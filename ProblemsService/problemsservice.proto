syntax = "proto3";

package problems;

option go_package = "./proto";

service ProblemsService {
    rpc CreateProblem(CreateProblemRequest) returns (CreateProblemResponse);
    rpc UpdateProblem(UpdateProblemRequest) returns (UpdateProblemResponse);
    rpc DeleteProblem(DeleteProblemRequest) returns (DeleteProblemResponse);
    rpc GetProblem(GetProblemRequest) returns (GetProblemResponse);
    rpc ListProblems(ListProblemsRequest) returns (ListProblemsResponse);
    rpc GetProblemByIDSlug(GetProblemByIdSlugRequest) returns (GetProblemByIdSlugResponse);
    rpc GetProblemByIDList(GetProblemByIdListRequest) returns (GetProblemByIdListResponse);
    rpc AddTestCases(AddTestCasesRequest) returns (AddTestCasesResponse);
    rpc DeleteTestCase(DeleteTestCaseRequest) returns (DeleteTestCaseResponse);
    rpc GetLanguageSupports(GetLanguageSupportsRequest) returns (GetLanguageSupportsResponse);
    rpc AddLanguageSupport(AddLanguageSupportRequest) returns (AddLanguageSupportResponse);
    rpc UpdateLanguageSupport(UpdateLanguageSupportRequest) returns (UpdateLanguageSupportResponse);
    rpc RemoveLanguageSupport(RemoveLanguageSupportRequest) returns (RemoveLanguageSupportResponse);
    rpc FullValidationByProblemID(FullValidationByProblemIDRequest) returns (FullValidationByProblemIDResponse);
    rpc RunUserCodeProblem(RunProblemRequest) returns (RunProblemResponse);
    rpc GetSubmissionsByOptionalProblemID(GetSubmissionsRequest) returns (GetSubmissionsResponse);

    //leaderboard
    //get leaderboard -req: page,limit resp
    rpc GetProblemsDoneStatistics(GetProblemsDoneStatisticsRequest) returns (GetProblemsDoneStatisticsResponse);

    //actitvitycontribution
    rpc GetMonthlyActivityHeatmap(GetMonthlyActivityHeatmapRequest) returns (GetMonthlyActivityHeatmapResponse);

    // leaderboard methods
    rpc GetTopKGlobal (GetTopKGlobalRequest) returns (GetTopKGlobalResponse);
    rpc GetTopKEntity (GetTopKEntityRequest) returns (GetTopKEntityResponse);
    rpc GetUserRank (GetUserRankRequest) returns (GetUserRankResponse);
    rpc GetLeaderboardData (GetLeaderboardDataRequest) returns (GetLeaderboardDataResponse);


    //challenge 
    rpc CreateChallenge(CreateChallengeRequest) returns (CreateChallengeResponse);
    rpc GetChallenge(GetChallengeRequest) returns (GetChallengeResponse);
    rpc GetPublicChallenges(GetPublicChallengesRequest) returns (GetPublicChallengesResponse);
    rpc JoinChallenge(JoinChallengeRequest) returns (JoinChallengeResponse);
    rpc StartChallenge(StartChallengeRequest) returns (StartChallengeResponse);
    rpc EndChallenge(EndChallengeRequest) returns (EndChallengeResponse);
  
    // Submission operations
    rpc SubmitSolution(SubmitSolutionRequest) returns (SubmitSolutionResponse);
    rpc GetSubmissionStatus(GetSubmissionStatusRequest) returns (GetSubmissionStatusResponse);
    rpc GetChallengeSubmissions(GetChallengeSubmissionsRequest) returns (GetChallengeSubmissionsResponse);
  
    // User stats operations
    rpc GetUserStats(GetUserStatsRequest) returns (GetUserStatsResponse);
    rpc GetChallengeUserStats(GetChallengeUserStatsRequest) returns (GetChallengeUserStatsResponse);
}

message Challenge {
    string id = 1;
    string title = 2;
    string creator_id = 3;
    string difficulty = 4;
    bool is_private = 5;
    string access_code = 6;
    repeated string problem_ids = 7;
    int32 time_limit = 8;
    int64 created_at = 9;
    bool is_active = 10;
    repeated string participant_ids = 11;
    map<string, ProblemMetadataList> user_problem_metadata = 12;
    string status = 13;
    int64 start_time = 14;
    int64 end_time = 15;
    string password = 16;
  }
  
  message ChallengeProblemMetadata {
    string problem_id = 1;
    int32 score = 2;
    int64 time_taken = 3;
    int64 completed_at = 4;
  }
  
  message ProblemMetadataList {
    repeated ChallengeProblemMetadata challenge_problem_metadata = 1;
  }


message ProblemMetadata {
    string problem_id = 1;
    string title = 2;
    string description = 3;
    repeated string tags = 4;
    TestCaseRunOnly testcase_run = 5;
    string difficulty = 6;
    repeated string supported_languages = 7;
    bool validated = 8;
}
  
 
  message UserStats {
    string user_id = 1;
    int32 problems_completed = 2;
    int64 total_time_taken = 3;
    int32 challenges_completed = 4;
    double score = 5;
    map<string, ChallengeStat> challenge_stats = 6;
  }
  
  message ChallengeStat {
    int32 rank = 1;
    int32 problems_completed = 2;
    int32 total_score = 3;
  }
  
  // Challenge messages
  message CreateChallengeRequest {
    string title = 1;
    string creator_id = 2; //userid
    string difficulty = 3; // for 3problems 1E:1M:1H , the difficulty is medium .. find a ratio and determine difficulty
    bool is_private = 4;
    optional string access_code = 5; //if private
    repeated string problem_ids = 6;
    int32 time_limit = 7;
    Timestamp start_at = 8; //like a cooldown time for users.
  }
  
  message CreateChallengeResponse {
    string id = 1;
    string access_code = 2; //if not present in the user request, gen a new one
    string password = 3;
    string join_url = 4; 
    
  }
  
  message GetChallengeRequest {
    string id = 1;
  }
  
  message GetChallengeResponse {
    Challenge challenge = 1;
    repeated LeaderboardEntry leaderboard = 2;
  }
  
  message GetPublicChallengesRequest {
    string difficulty = 1;
    bool is_active = 2;
    int32 page = 3;
    int32 page_size = 4;
    string userID = 5;
    string everything = 6;
  }
  
  message GetPublicChallengesResponse {
    repeated Challenge challenges = 1;
  }
  
  message JoinChallengeRequest {
    string challenge_id = 1;
    string user_id = 2;
    string access_code = 3;
    string password = 4;
  }
  
  message JoinChallengeResponse {
    string challenge_id = 1;
    bool success = 2;
  }
  
  message StartChallengeRequest {
    string challenge_id = 1;
    string user_id = 2;
  }
  
  message StartChallengeResponse {
    bool success = 1;
    int64 start_time = 2;
  }
  
  message EndChallengeRequest {
    string challenge_id = 1;
    string user_id = 2;
  }
  
  message EndChallengeResponse {
    bool success = 1;
    repeated LeaderboardEntry leaderboard = 2;
  }
  
  message LeaderboardEntry {
    string user_id = 1;
    int32 problems_completed = 2;
    int32 total_score = 3;
    int32 rank = 4;
  }
  
  // Submission messages
  message SubmitSolutionRequest {
    string challenge_id = 1;
    string user_id = 2;
    string problem_id = 3;
    string code = 4;
    string language = 5;
  }
  
  message SubmitSolutionResponse {
    string submission_id = 1;
    string status = 2;
  }
  
  message GetSubmissionStatusRequest {
    string submission_id = 1;
  }
  
  message GetSubmissionStatusResponse {
    Submission submission = 1;
  }
  
  message GetChallengeSubmissionsRequest {
    string challenge_id = 1;
  }
  
  message GetChallengeSubmissionsResponse {
    repeated Submission submissions = 1;
  }
  
  // User stats messages
  message GetUserStatsRequest {
    string user_id = 1;
  }
  
  message GetUserStatsResponse {
    UserStats stats = 1;
  }
  
  message GetChallengeUserStatsRequest {
    string challenge_id = 1;
    string user_id = 2;
  }
  
  message GetChallengeUserStatsResponse {
    string user_id = 1;
    int32 problems_completed = 2;
    int32 total_score = 3;
    int32 rank = 4;
    repeated ChallengeProblemMetadata challenge_problem_metadata = 5;
  }


message GetTopKGlobalRequest {
    int32 k = 1;
}

message GetTopKGlobalResponse {
    repeated UserScore users = 1;
}

message GetTopKEntityRequest {
    string entity = 1;
}

message GetTopKEntityResponse {
    repeated UserScore users = 1;
}

message GetUserRankRequest {
    string user_id = 1;
}

message GetUserRankResponse {
    int32 global_rank = 1;
    int32 entity_rank = 2;
}

message GetLeaderboardDataRequest {
    string user_id = 1;
}

message GetLeaderboardDataResponse {
    string user_id = 1;
    double score = 2;
    string entity = 3;
    int32 global_rank = 4;
    int32 entity_rank = 5;
    repeated UserScore top_k_global = 6;
    repeated UserScore top_k_entity = 7;
}

message UserScore {
    string user_id = 1;
    double score = 2;
    string entity = 3;
}

message GetMonthlyActivityHeatmapRequest {
    string userID = 1;
    int32 month = 2; // 1 to 12
    int32 year = 3;
  }
  
  message ActivityDay {
    string date = 1;   // format: YYYY-MM-DD
    int32 count = 2;
    bool isActive = 3;
  }
  
  message GetMonthlyActivityHeatmapResponse {
    repeated ActivityDay data = 1;
  }

message GetLeaderBoardOptionalCountryResponse{
    LeaderboardSingle data = 1;
    optional string filter_type = 2; //country or global
}

message LeaderboardSingle{
    string username = 1;
    optional int64 country_rank = 2;
    int64 global_rank = 3;
}

message GetLeaderBoardOptionalCountryRequest {
    int64 page = 1;
    int64 limit = 2;
    optional string country = 3;
    optional string username = 4; 
    string user_id = 5; 
}

message GetProblemsDoneStatisticsRequest {
    optional string username = 1; 
    string user_id = 2; 
}



message GetProblemsDoneStatisticsResponse{
    ProblemsDoneStatistics data = 1;
}

message ProblemsDoneStatistics {
    int32 max_easy_count = 1; 
    int32 done_easy_count = 2; 
    int32 max_medium_count = 3; 
    int32 done_medium_count = 4; 
    int32 max_hard_count = 5; 
    int32 done_hard_count = 6; 
}


message Timestamp {
    int64 seconds = 1;
    int32 nanos = 2;
}

message TestCase {
    string id = 1;
    string input = 2;
    string expected = 3;
}

message TestCases {
    repeated TestCase run = 1;
    repeated TestCase submit = 2;
}

message TestCaseRunOnly {
    repeated TestCase run = 1;
}

message ValidationCode {
    string placeholder = 1;
    string code = 2;
    string template = 3;
}

message CreateProblemRequest {
    string title = 1;
    string description = 2;
    repeated string tags = 3;
    string difficulty = 4;
}

message UpdateProblemRequest {
    string problem_id = 1;
    optional string title = 2;
    optional string description = 3;
    repeated string tags = 4;
    optional string difficulty = 5;
}

message DeleteProblemRequest {
    string problem_id = 1;
}

message GetProblemRequest {
    string problem_id = 1;
}

message ListProblemsRequest {
    int32 page = 1;
    int32 page_size = 2;
    repeated string tags = 3;
    string difficulty = 4;
    string search_query = 5;
}

message AddTestCasesRequest {
    string problem_id = 1;
    TestCases testcases = 2;
}

message AddLanguageSupportRequest {
    string problem_id = 1;
    string language = 2;
    ValidationCode validation_code = 3;
}

message UpdateLanguageSupportRequest {
    string problem_id = 1;
    string language = 2;
    ValidationCode validation_code = 3;
}

message RemoveLanguageSupportRequest {
    string problem_id = 1;
    string language = 2;
}

message Problem {
    string problem_id = 1;
    Timestamp created_at = 2;
    Timestamp updated_at = 3;
    optional Timestamp deleted_at = 4;
    string title = 5;
    string description = 6;
    repeated string tags = 7;
    TestCases testcases = 8;
    string difficulty = 9;
    repeated string supported_languages = 10;
    map<string, ValidationCode> validate_code = 11;
    bool validated = 12;
    Timestamp validated_at = 13;
}


message CreateProblemResponse {
    string problem_id = 1;
    bool success = 2;
    string message = 3;
    string error_type = 4;
}

message UpdateProblemResponse {
    bool success = 1;
    string message = 2;
    string error_type = 3;
}

message DeleteProblemResponse {
    bool success = 1;
    string message = 2;
    string error_type = 3;
}

message GetProblemResponse {
    Problem problem = 1;
    string error_type = 2;
}

message ListProblemsResponse {
    repeated Problem problems = 1;
    int32 total_count = 2;
    int32 page = 3;
    int32 page_size = 4;
    string error_type = 5;
}

message AddTestCasesResponse {
    bool success = 1;
    string message = 2;
    int32 added_count = 3;
    string error_type = 4;
}

message AddLanguageSupportResponse {
    bool success = 1;
    string message = 2;
    string error_type = 3;
}

message UpdateLanguageSupportResponse {
    bool success = 1;
    string message = 2;
    string error_type = 3;
}

message RemoveLanguageSupportResponse {
    bool success = 1;
    string message = 2;
    string error_type = 3;
}

message DeleteTestCaseRequest {
    string problem_id = 1;
    string testcase_id = 2;
    bool is_run_testcase = 3;
}

message DeleteTestCaseResponse {
    bool success = 1;
    string message = 2;
    string error_type = 3;
}

message GetLanguageSupportsRequest {
    string problem_id = 1;
}

message GetLanguageSupportsResponse {
    bool success = 1;
    string message = 2;
    repeated string supported_languages = 3;
    map<string, ValidationCode> validate_code = 4;
    string error_type = 5;
}

message FullValidationByProblemIDRequest {
    string problem_id = 1;
}

message FullValidationByProblemIDResponse {
    bool success = 1;
    string message = 2;
    string error_type = 3;
}


message RunProblemRequest {
    string problem_id = 1;
    string user_code = 2;
    string language = 3;
    bool is_run_testcase = 4;
    string user_id = 5;
    optional string country = 6;
}

message RunProblemResponse {
    string problem_id = 1;
    string language = 2;
    bool is_run_testcase = 3;
    bool success = 4;
    string message = 5;
    string error_type = 6;
}


message Submission {
    string id = 1; 
    string problem_id = 2; 
    string user_id = 3; 
    string challenge_id = 4;
    Timestamp submitted_at = 5;
    int32 score = 6; 
    string status = 7;
    string output = 8;
    string language = 9; 
    float execution_time = 10; 
    string difficulty = 11; 
    bool is_first = 12; 
    string title = 13;
    string user_code  = 14;
}


message GetSubmissionsRequest {
    optional string problem_id = 1;
    int32 page = 2;
    int32 limit = 3;
    string user_id = 4;
}

message GetSubmissionsResponse {
    repeated Submission submissions = 1;
    bool success = 2;
    string message = 3;
    string error_type = 4;
}

message GetProblemByIdSlugRequest {
    string problem_id = 1;
    optional string slug = 2;
}

message GetProblemByIdSlugResponse {
    ProblemMetadataLite problemmetdata = 1;
    string message = 2;
}

message GetProblemByIdListRequest {
    int32 page = 1;
    int32 page_size = 2;
    repeated string tags = 3;
    string difficulty = 4;
    string search_query = 5;
}

message GetProblemByIdListResponse {
    repeated ProblemMetadataLite problemmetdata = 1;
    string message = 2;
}
message ProblemMetadataLite {
    string problem_id = 1;
    string title = 2;
    string description = 3;
    repeated string tags = 4;
    TestCaseRunOnly testcase_run = 5;
    string difficulty = 6;
    repeated string supported_languages = 7;
    bool validated = 8;
    map<string, string> placeholder_maps = 9; 
}
