syntax = "proto3";

package problems;

option go_package = "./proto";

service ProblemsService {
  rpc CreateProblem(CreateProblemRequest) returns (CreateProblemResponse);
  rpc UpdateProblem(UpdateProblemRequest) returns (UpdateProblemResponse);
  rpc DeleteProblem(DeleteProblemRequest) returns (DeleteProblemResponse);
  rpc GetProblem(GetProblemRequest) returns (GetProblemResponse);
  rpc ListProblems(ListProblemsRequest) returns (ListProblemsResponse);
  rpc GetProblemByIDSlug(GetProblemByIdSlugRequest)
      returns (GetProblemByIdSlugResponse);
  rpc GetProblemMetadataList(GetProblemMetadataListRequest)
      returns (GetProblemMetadataListResponse);
  rpc AddTestCases(AddTestCasesRequest) returns (AddTestCasesResponse);
  // rpc EditTestcases(EditTestcasesRequest) returns (EditTestCasesResponse); TODO : use testcaseid for updates :priority low
  rpc DeleteTestCase(DeleteTestCaseRequest) returns (DeleteTestCaseResponse);
  rpc GetLanguageSupports(GetLanguageSupportsRequest)
      returns (GetLanguageSupportsResponse);
  rpc AddLanguageSupport(AddLanguageSupportRequest)
      returns (AddLanguageSupportResponse);
  rpc UpdateLanguageSupport(UpdateLanguageSupportRequest)
      returns (UpdateLanguageSupportResponse);
  rpc RemoveLanguageSupport(RemoveLanguageSupportRequest)
      returns (RemoveLanguageSupportResponse);
  rpc FullValidationByProblemID(FullValidationByProblemIDRequest)
      returns (FullValidationByProblemIDResponse);
  rpc RunUserCodeProblem(RunProblemRequest) returns (RunProblemResponse);
  rpc GetSubmissionsByOptionalProblemID(GetSubmissionsRequest)
      returns (GetSubmissionsResponse);
  rpc GetSubmissionsByID(GetSubmissionsByIDRequest) returns (GetSubmissionsByIDResponse);

  // Leaderboard
  rpc GetProblemsDoneStatistics(GetProblemsDoneStatisticsRequest)
      returns (GetProblemsDoneStatisticsResponse);
  rpc ForceChangeUserEntityInSubmission(ForceChangeUserEntityInSubmissionRequest) returns (ForceChangeUserEntityInSubmissionResponse);

  // Activity Contribution
  rpc GetMonthlyActivityHeatmap(GetMonthlyActivityHeatmapRequest)
      returns (GetMonthlyActivityHeatmapResponse);

  // Leaderboard Methods
  rpc GetTopKGlobal(GetTopKGlobalRequest) returns (GetTopKGlobalResponse);
  rpc GetTopKEntity(GetTopKEntityRequest) returns (GetTopKEntityResponse);
  rpc GetUserRank(GetUserRankRequest) returns (GetUserRankResponse);
  rpc GetLeaderboardData(GetLeaderboardDataRequest)
      returns (GetLeaderboardDataResponse);

  rpc GetBulkProblemMetadata(GetBulkProblemMetadataRequest)
      returns (GetBulkProblemMetadataResponse);
  rpc VerifyProblemExistenceBulk(VerifyProblemExistenceBulkRequest)
      returns (VerifyProblemExistenceBulkResponse);
  rpc RandomProblemIDsGenWithDifficultyRatio(RandomProblemIDsGenWithDifficultyRatioRequest)
      returns (RandomProblemIDsGenWithDifficultyRatioResponse);
  rpc ProblemIDsDoneByUserID(ProblemIDsDoneByUserIDRequest) returns (ProblemIDsDoneByUserIDResponse);

  rpc ProblemCountMetadata(ProblemCountMetadataRequest) returns (ProblemCountMetadataResponse);
  
}

message ProblemCountMetadataRequest {}

message ProblemCountMetadataResponse{
  int32 easy = 1;
  int32 medium = 2;
  int32 hard = 3;
}

message RandomProblemIDsGenWithDifficultyRatioRequest{
  ProblemDifficultyRatio qnratio = 1;
  string traceID = 2;
}

message ProblemDifficultyRatio {
  int32 easy = 1;
  int32 medium = 2;
  int32 hard = 3;
}

message RandomProblemIDsGenWithDifficultyRatioResponse {
  repeated string problem_ids = 1;
  ProblemDifficultyRatio qnratio = 2;  //unavailable ratio
  bool success = 3;
  string message =4;
  string error_type = 5;
}

message ProblemMetadata {
  string problem_id = 1;
  string title = 2;
  string description = 3;
  repeated string tags = 4;
  TestCaseRunOnly testcase_run = 5;
  string difficulty = 6;
  repeated string supported_languages = 7;
  bool validated = 8;
}



message VerifyProblemExistenceBulkRequest{
  repeated string problem_ids = 1;
}

message VerifyProblemExistenceBulkResponse{
  map<string, bool> problem_existence = 1; // problem_id -> exists
}

message ProblemIDsDoneByUserIDRequest{
  string user_id = 1;
}
message ProblemIDsDoneByUserIDResponse{
   repeated string problem_ids = 1;
  bool   success    = 2;
  string message    = 3;
  string error_type = 4;
 }

message GetSubmissionsByIDRequest {
 string submission_id =1;
 string traceID = 2;
}
message GetSubmissionsByIDResponse{
  Submission submission = 1;
  bool       success    = 2;
  string     message    = 3;
  string     error_type = 4;
}
 


message ForceChangeUserEntityInSubmissionRequest{
  string user_id = 1;
  string entity = 2;
}

message ForceChangeUserEntityInSubmissionResponse{}

// rpc EditTestcasesRequest 

message GetBulkProblemMetadataRequest {
  repeated string problem_ids = 1;
}

message GetBulkProblemMetadataResponse {
  repeated BulkProblemMetadata BulkProblemMetadata = 1;
}

message BulkProblemMetadata {
  string problem_id = 1;
  string title = 2;
  string difficulty = 6;
  repeated string tags = 4;
}

message GetTopKGlobalRequest {
  int32 k = 1;
  string traceID = 2;
}

message GetTopKGlobalResponse {
  repeated UserScore users = 1;
}

message GetTopKEntityRequest {
  string entity = 1;
  string traceID = 2;
}

message GetTopKEntityResponse {
  repeated UserScore users = 1;
}

message GetUserRankRequest {
  string user_id = 1;
  string traceID = 2;
}

message GetUserRankResponse {
  int32 global_rank = 1;
  int32 entity_rank = 2;
}

message GetLeaderboardDataRequest {
  string user_id = 1;
  string traceID = 2;
}

message GetLeaderboardDataResponse {
  string user_id = 1;
  double score = 2;
  string entity = 3;
  int32 global_rank = 4;
  int32 entity_rank = 5;
  repeated UserScore top_k_global = 6;
  repeated UserScore top_k_entity = 7;
}

message UserScore {
  string user_id = 1;
  double score = 2;
  string entity = 3;
}

message GetMonthlyActivityHeatmapRequest {
  string userID = 1;
  int32 month = 2;  // 1 to 12
  int32 year = 3;
  string traceID = 4;
}

message ActivityDay {
  string date = 1;  // format: YYYY-MM-DD
  int32 count = 2;
  bool isActive = 3;
}

message GetMonthlyActivityHeatmapResponse {
  repeated ActivityDay data = 1;
}

message GetLeaderBoardOptionalCountryRequest {
  int64 page = 1;
  int64 limit = 2;
  optional string country = 3;
  optional string username = 4;
  string user_id = 5;
  string traceID = 6;
}

message GetLeaderBoardOptionalCountryResponse {
  LeaderboardSingle data = 1;
  optional string filter_type = 2;  // country or global
}

message LeaderboardSingle {
  string username = 1;
  optional int64 country_rank = 2;
  int64 global_rank = 3;
}

message GetProblemsDoneStatisticsRequest {
  optional string username = 1;
  string user_id = 2;
  string traceID = 3;
}

message GetProblemsDoneStatisticsResponse {
  ProblemsDoneStatistics data = 1;
}

message ProblemsDoneStatistics {
  int32 max_easy_count = 1;
  int32 done_easy_count = 2;
  int32 max_medium_count = 3;
  int32 done_medium_count = 4;
  int32 max_hard_count = 5;
  int32 done_hard_count = 6;
}

message Timestamp {
  int64 seconds = 1;
  int32 nanos = 2;
}

message TestCase {
  string id = 1;
  string input = 2;
  string expected = 3;
}

message TestCases {
  repeated TestCase run = 1;
  repeated TestCase submit = 2;
}

message TestCaseRunOnly {
  repeated TestCase run = 1;
}

message ValidationCode {
  string placeholder = 1;
  string code = 2;
  string template = 3;
}

message CreateProblemRequest {
  string title = 1;
  string description = 2;
  repeated string tags = 3;
  string difficulty = 4;
  string traceID = 5;
}

message UpdateProblemRequest {
  string problem_id = 1;
  optional string title = 2;
  optional string description = 3;
  repeated string tags = 4;
  optional string difficulty = 5;
  optional bool visible = 6;
  string traceID = 7;
}

message DeleteProblemRequest {
  string problem_id = 1;
  string traceID = 2;
}

message GetProblemRequest {
  string problem_id = 1;
  string traceID = 2;
}

message ListProblemsRequest {
  int32 page = 1;
  int32 page_size = 2;
  repeated string tags = 3;
  string difficulty = 4;
  string search_query = 5;
  string traceID = 6;
  bool isAdmin = 7;
}

message AddTestCasesRequest {
  string problem_id = 1;
  TestCases testcases = 2;
  string traceID = 3;
}

message AddLanguageSupportRequest {
  string problem_id = 1;
  string language = 2;
  ValidationCode validation_code = 3;
  string traceID = 4;
}

message UpdateLanguageSupportRequest {
  string problem_id = 1;
  string language = 2;
  ValidationCode validation_code = 3;
  string traceID = 4;
}

message RemoveLanguageSupportRequest {
  string problem_id = 1;
  string language = 2;
  string traceID = 3;
}

message Problem {
  string problem_id = 1;
  Timestamp created_at = 2;
  Timestamp updated_at = 3;
  optional Timestamp deleted_at = 4;
  string title = 5;
  string description = 6;
  repeated string tags = 7;
  TestCases testcases = 8;
  string difficulty = 9;
  repeated string supported_languages = 10;
  map<string, ValidationCode> validate_code = 11;
  bool validated = 12;
  Timestamp validated_at = 13;
  bool visible = 14;
}

message CreateProblemResponse {
  string problem_id = 1;
  bool success = 2;
  string message = 3;
  string error_type = 4;
}

message UpdateProblemResponse {
  bool success = 1;
  string message = 2;
  string error_type = 3;
}

message DeleteProblemResponse {
  bool success = 1;
  string message = 2;
  string error_type = 3;
}

message GetProblemResponse {
  Problem problem = 1;
  string error_type = 2;
}

message ListProblemsResponse {
  repeated Problem problems = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
  string error_type = 5;
}

message AddTestCasesResponse {
  bool success = 1;
  string message = 2;
  int32 added_count = 3;
  string error_type = 4;
}

message AddLanguageSupportResponse {
  bool success = 1;
  string message = 2;
  string error_type = 3;
}

message UpdateLanguageSupportResponse {
  bool success = 1;
  string message = 2;
  string error_type = 3;
}

message RemoveLanguageSupportResponse {
  bool success = 1;
  string message = 2;
  string error_type = 3;
}

message DeleteTestCaseRequest {
  string problem_id = 1;
  string testcase_id = 2;
  bool is_run_testcase = 3;
  string traceID = 4;
}

message DeleteTestCaseResponse {
  bool success = 1;
  string message = 2;
  string error_type = 3;
}

message GetLanguageSupportsRequest {
  string problem_id = 1;
  string traceID = 2;
}

message GetLanguageSupportsResponse {
  bool success = 1;
  string message = 2;
  repeated string supported_languages = 3;
  map<string, ValidationCode> validate_code = 4;
  string error_type = 5;
}

message FullValidationByProblemIDRequest {
  string problem_id = 1;
  string traceID = 2;
}

message FullValidationByProblemIDResponse {
  bool success = 1;
  string message = 2;
  string error_type = 3;
}

message RunProblemRequest {
  string problem_id = 1;
  string user_code = 2;
  string language = 3;
  bool is_run_testcase = 4;
  string user_id = 5;
  optional string country = 6;
  string traceID = 7;
}

message RunProblemResponse {
  string problem_id = 1;
  string language = 2;
  bool is_run_testcase = 3;
  bool success = 4;
  string message = 5;
  string error_type = 6;
}

message Submission {
  string id = 1;
  string problem_id = 2;
  string user_id = 3;
  string challenge_id = 4;
  Timestamp submitted_at = 5;
  int32 score = 6;
  string status = 7;
  string output = 8;
  string language = 9;
  float execution_time = 10;
  string difficulty = 11;
  bool is_first = 12;
  string title = 13;
  string user_code = 14;
}

message GetSubmissionsRequest {
  optional string problem_id = 1;
  int32 page = 2;
  int32 limit = 3;
  string user_id = 4;
  string traceID = 5;
}

message GetSubmissionsResponse {
  repeated Submission submissions = 1;
  bool success = 2;
  string message = 3;
  string error_type = 4;
}

message GetProblemByIdSlugRequest {
  string problem_id = 1;
  optional string slug = 2;
  string traceID = 3;
}

message GetProblemByIdSlugResponse {
  ProblemMetadataLite problemmetdata = 1;
  string message = 2;
}

message GetProblemMetadataListRequest {
  int32 page = 1;
  int32 page_size = 2;
  repeated string tags = 3;
  string difficulty = 4;
  string search_query = 5;
  string traceID = 6;
  bool isAdmin = 7;
}

message GetProblemMetadataListResponse {
  repeated ProblemMetadataLite problemmetdata = 1;
  string message = 2;
}

message ProblemMetadataLite {
  string problem_id = 1;
  string title = 2;
  string description = 3;
  repeated string tags = 4;
  TestCaseRunOnly testcase_run = 5;
  string difficulty = 6;
  repeated string supported_languages = 7;
  bool validated = 8;
  map<string, string> placeholder_maps = 9;
  bool visible = 10;
}
