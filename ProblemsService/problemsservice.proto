syntax = "proto3";

package problems;

option go_package = "./proto";

service ProblemsService {
  rpc CreateProblem(CreateProblemRequest) returns (CreateProblemResponse);
  rpc UpdateProblem(UpdateProblemRequest) returns (UpdateProblemResponse);
  rpc DeleteProblem(DeleteProblemRequest) returns (DeleteProblemResponse);
  rpc GetProblem(GetProblemRequest) returns (GetProblemResponse);
  rpc ListProblems(ListProblemsRequest) returns (ListProblemsResponse);
  rpc GetProblemByIdSlug(GetProblemByIdSlugRequest)
      returns (GetProblemByIdSlugResponse);
  rpc GetProblemMetadataList(GetProblemMetadataListRequest)
      returns (GetProblemMetadataListResponse);
  rpc AddTestCases(AddTestCasesRequest) returns (AddTestCasesResponse);
  // rpc EditTestcases(EditTestcasesRequest) returns (EditTestCasesResponse); TODO : use testcaseId for updates :priority low
  rpc DeleteTestCase(DeleteTestCaseRequest) returns (DeleteTestCaseResponse);
  rpc GetLanguageSupports(GetLanguageSupportsRequest)
      returns (GetLanguageSupportsResponse);
  rpc AddLanguageSupport(AddLanguageSupportRequest)
      returns (AddLanguageSupportResponse);
  rpc UpdateLanguageSupport(UpdateLanguageSupportRequest)
      returns (UpdateLanguageSupportResponse);
  rpc RemoveLanguageSupport(RemoveLanguageSupportRequest)
      returns (RemoveLanguageSupportResponse);
  rpc FullValidationByProblemId(FullValidationByProblemIdRequest)
      returns (FullValidationByProblemIdResponse);
  rpc RunUserCodeProblem(RunProblemRequest) returns (RunProblemResponse);
  rpc GetSubmissionsByOptionalProblemId(GetSubmissionsRequest)
      returns (GetSubmissionsResponse);
  rpc GetSubmissionsById(GetSubmissionsByIdRequest) returns (GetSubmissionsByIdResponse);

  // Leaderboard
  rpc GetProblemsDoneStatistics(GetProblemsDoneStatisticsRequest)
      returns (GetProblemsDoneStatisticsResponse);
  rpc ForceChangeUserEntityInSubmission(ForceChangeUserEntityInSubmissionRequest) returns (ForceChangeUserEntityInSubmissionResponse);

  // Activity Contribution
  rpc GetMonthlyActivityHeatmap(GetMonthlyActivityHeatmapRequest)
      returns (GetMonthlyActivityHeatmapResponse);

  // Leaderboard Methods
  rpc GetTopKGlobal(GetTopKGlobalRequest) returns (GetTopKGlobalResponse);
  rpc GetTopKEntity(GetTopKEntityRequest) returns (GetTopKEntityResponse);
  rpc GetUserRank(GetUserRankRequest) returns (GetUserRankResponse);
  rpc GetLeaderboardData(GetLeaderboardDataRequest)
      returns (GetLeaderboardDataResponse);

  rpc GetBulkProblemMetadata(GetBulkProblemMetadataRequest)
      returns (GetBulkProblemMetadataResponse);
  rpc VerifyProblemExistenceBulk(VerifyProblemExistenceBulkRequest)
      returns (VerifyProblemExistenceBulkResponse);
  rpc RandomProblemIdsGenWithDifficultyRatio(RandomProblemIdsGenWithDifficultyRatioRequest)
      returns (RandomProblemIdsGenWithDifficultyRatioResponse);
  rpc ProblemIdsDoneByUserId(ProblemIdsDoneByUserIdRequest) returns (ProblemIdsDoneByUserIdResponse);

  rpc ProblemCountMetadata(ProblemCountMetadataRequest) returns (ProblemCountMetadataResponse);
}

message ProblemCountMetadataRequest {}

message ProblemCountMetadataResponse {
  int32 easy = 1;
  int32 medium = 2;
  int32 hard = 3;
}

message RandomProblemIdsGenWithDifficultyRatioRequest {
  ProblemDifficultyRatio qnRatio = 1;
  string traceId = 2;
}

message ProblemDifficultyRatio {
  int32 easy = 1;
  int32 medium = 2;
  int32 hard = 3;
}

message RandomProblemIdsGenWithDifficultyRatioResponse {
  repeated string problemIds = 1;
  ProblemDifficultyRatio qnRatio = 2;  // unavailable ratio
  bool success = 3;
  string message = 4;
  string errorType = 5;
}

message ProblemMetadata {
  string problemId = 1;
  string title = 2;
  string description = 3;
  repeated string tags = 4;
  TestCaseRunOnly testcaseRun = 5;
  string difficulty = 6;
  repeated string supportedLanguages = 7;
  bool validated = 8;
}

message VerifyProblemExistenceBulkRequest {
  repeated string problemIds = 1;
}

message VerifyProblemExistenceBulkResponse {
  map<string, bool> problemExistence = 1; // problemId -> exists
}

message ProblemIdsDoneByUserIdRequest {
  string userId = 1;
}

message ProblemIdsDoneByUserIdResponse {
  repeated string problemIds = 1;
  bool success = 2;
  string message = 3;
  string errorType = 4;
}

message GetSubmissionsByIdRequest {
  string submissionId = 1;
  string traceId = 2;
}

message GetSubmissionsByIdResponse {
  Submission submission = 1;
  bool success = 2;
  string message = 3;
  string errorType = 4;
}

message ForceChangeUserEntityInSubmissionRequest {
  string userId = 1;
  string entity = 2;
}

message ForceChangeUserEntityInSubmissionResponse {}

message GetBulkProblemMetadataRequest {
  repeated string problemIds = 1;
}

message GetBulkProblemMetadataResponse {
  repeated BulkProblemMetadata bulkProblemMetadata = 1;
}

message BulkProblemMetadata {
  string problemId = 1;
  string title = 2;
  string difficulty = 6;
  repeated string tags = 4;
}

message GetTopKGlobalRequest {
  int32 k = 1;
  string traceId = 2;
}

message GetTopKGlobalResponse {
  repeated UserScore users = 1;
}

message GetTopKEntityRequest {
  string entity = 1;
  string traceId = 2;
}

message GetTopKEntityResponse {
  repeated UserScore users = 1;
}

message GetUserRankRequest {
  string userId = 1;
  string traceId = 2;
}

message GetUserRankResponse {
  int32 globalRank = 1;
  int32 entityRank = 2;
}

message GetLeaderboardDataRequest {
  string userId = 1;
  string traceId = 2;
}

message GetLeaderboardDataResponse {
  string userId = 1;
  double score = 2;
  string entity = 3;
  int32 globalRank = 4;
  int32 entityRank = 5;
  repeated UserScore topKGlobal = 6;
  repeated UserScore topKEntity = 7;
}

message UserScore {
  string userId = 1;
  double score = 2;
  string entity = 3;
}

message GetMonthlyActivityHeatmapRequest {
  string userId = 1;
  int32 month = 2;  // 1 to 12
  int32 year = 3;
  string traceId = 4;
}

message ActivityDay {
  string date = 1;  // format: YYYY-MM-DD
  int32 count = 2;
  bool isActive = 3;
}

message GetMonthlyActivityHeatmapResponse {
  repeated ActivityDay data = 1;
}

message GetLeaderBoardOptionalCountryRequest {
  int64 page = 1;
  int64 limit = 2;
  optional string country = 3;
  optional string username = 4;
  string userId = 5;
  string traceId = 6;
}

message GetLeaderBoardOptionalCountryResponse {
  LeaderboardSingle data = 1;
  optional string filterType = 2;  // country or global
}

message LeaderboardSingle {
  string username = 1;
  optional int64 countryRank = 2;
  int64 globalRank = 3;
}

message GetProblemsDoneStatisticsRequest {
  optional string username = 1;
  string userId = 2;
  string traceId = 3;
}

message GetProblemsDoneStatisticsResponse {
  ProblemsDoneStatistics data = 1;
}

message ProblemsDoneStatistics {
  int32 maxEasyCount = 1;
  int32 doneEasyCount = 2;
  int32 maxMediumCount = 3;
  int32 doneMediumCount = 4;
  int32 maxHardCount = 5;
  int32 doneHardCount = 6;
}

message Timestamp {
  int64 seconds = 1;
  int32 nanos = 2;
}

message TestCase {
  string id = 1;
  string input = 2;
  string expected = 3;
}

message TestCases {
  repeated TestCase run = 1;
  repeated TestCase submit = 2;
}

message TestCaseRunOnly {
  repeated TestCase run = 1;
}

message ValidationCode {
  string placeholder = 1;
  string code = 2;
  string template = 3;
}

message CreateProblemRequest {
  string title = 1;
  string description = 2;
  repeated string tags = 3;
  string difficulty = 4;
  string traceId = 5;
}

message UpdateProblemRequest {
  string problemId = 1;
  optional string title = 2;
  optional string description = 3;
  repeated string tags = 4;
  optional string difficulty = 5;
  optional bool visible = 6;
  string traceId = 7;
}

message DeleteProblemRequest {
  string problemId = 1;
  string traceId = 2;
}

message GetProblemRequest {
  string problemId = 1;
  string traceId = 2;
}

message ListProblemsRequest {
  int32 page = 1;
  int32 pageSize = 2;
  repeated string tags = 3;
  string difficulty = 4;
  string searchQuery = 5;
  string traceId = 6;
  bool isAdmin = 7;
}

message AddTestCasesRequest {
  string problemId = 1;
  TestCases testcases = 2;
  string traceId = 3;
}

message AddLanguageSupportRequest {
  string problemId = 1;
  string language = 2;
  ValidationCode validationCode = 3;
  string traceId = 4;
}

message UpdateLanguageSupportRequest {
  string problemId = 1;
  string language = 2;
  ValidationCode validationCode = 3;
  string traceId = 4;
}

message RemoveLanguageSupportRequest {
  string problemId = 1;
  string language = 2;
  string traceId = 3;
}

message Problem {
  string problemId = 1;
  Timestamp createdAt = 2;
  Timestamp updatedAt = 3;
  optional Timestamp deletedAt = 4;
  string title = 5;
  string description = 6;
  repeated string tags = 7;
  TestCases testcases = 8;
  string difficulty = 9;
  repeated string supportedLanguages = 10;
  map<string, ValidationCode> validateCode = 11;
  bool validated = 12;
  Timestamp validatedAt = 13;
  bool visible = 14;
}

message CreateProblemResponse {
  string problemId = 1;
  bool success = 2;
  string message = 3;
  string errorType = 4;
}

message UpdateProblemResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
}

message DeleteProblemResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
}

message GetProblemResponse {
  Problem problem = 1;
  string errorType = 2;
}

message ListProblemsResponse {
  repeated Problem problems = 1;
  int32 totalCount = 2;
  int32 page = 3;
  int32 pageSize = 4;
  string errorType = 5;
}

message AddTestCasesResponse {
  bool success = 1;
  string message = 2;
  int32 addedCount = 3;
  string errorType = 4;
}

message AddLanguageSupportResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
}

message UpdateLanguageSupportResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
}

message RemoveLanguageSupportResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
}

message DeleteTestCaseRequest {
  string problemId = 1;
  string testcaseId = 2;
  bool isRunTestcase = 3;
  string traceId = 4;
}

message DeleteTestCaseResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
}

message GetLanguageSupportsRequest {
  string problemId = 1;
  string traceId = 2;
}

message GetLanguageSupportsResponse {
  bool success = 1;
  string message = 2;
  repeated string supportedLanguages = 3;
  map<string, ValidationCode> validateCode = 4;
  string errorType = 5;
}

message FullValidationByProblemIdRequest {
  string problemId = 1;
  string traceId = 2;
}

message FullValidationByProblemIdResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
}

message RunProblemRequest {
  string problemId = 1;
  string userCode = 2;
  string language = 3;
  bool isRunTestcase = 4;
  string userId = 5;
  optional string country = 6;
  bool isChallenge = 7;
  optional string challengeId = 8;
  optional string challengeToken = 9;
  string traceId = 10;
  optional bool requireComplexity = 11;
}

enum ComplexityStatus {
  COMPLEXITY_UNSPECIFIED = 0;
  LINEAR = 1;
  CONSTANT = 2;
  QUADRATIC = 3;
  LOGARITHMIC = 4;
  EXPONENTIAL = 5;
  OTHER = 6;
}

message RunProblemResponse {
  string problemId = 1;
  string language = 2;
  bool isRunTestcase = 3;
  bool success = 4;
  string message = 5;
  string errorType = 6;
  optional ComplexityStatus memoryComplexity = 7;
  optional ComplexityStatus spaceComplexity = 8;
}

message Submission {
  string id = 1;
  string problemId = 2;
  string userId = 3;
  string challengeId = 4;
  Timestamp submittedAt = 5;
  int32 score = 6;
  string status = 7;
  string output = 8;
  string language = 9;
  float executionTime = 10;
  string difficulty = 11;
  bool isFirst = 12;
  string title = 13;
  string userCode = 14;
}

message GetSubmissionsRequest {
  optional string problemId = 1;
  int32 page = 2;
  int32 limit = 3;
  string userId = 4;
  string traceId = 5;
}

message GetSubmissionsResponse {
  repeated Submission submissions = 1;
  bool success = 2;
  string message = 3;
  string errorType = 4;
}

message GetProblemByIdSlugRequest {
  string problemId = 1;
  optional string slug = 2;
  string traceId = 3;
}

message GetProblemByIdSlugResponse {
  ProblemMetadataLite problemMetadata = 1;
  string message = 2;
}

message GetProblemMetadataListRequest {
  int32 page = 1;
  int32 pageSize = 2;
  repeated string tags = 3;
  string difficulty = 4;
  string searchTitle = 5;
  repeated string searchTags = 6;
  string traceId = 7;
  bool isAdmin = 8;
}

message GetProblemMetadataListResponse {
  repeated ProblemMetadataLite problemMetadata = 1;
  int64 totalSize =2;
  string message = 3;
}

message ProblemMetadataLite {
  string problemId = 1;
  string title = 2;
  string description = 3;
  repeated string tags = 4;
  TestCaseRunOnly testcaseRun = 5;
  string difficulty = 6;
  repeated string supportedLanguages = 7;
  bool validated = 8;
  map<string, string> placeholderMaps = 9;
  bool visible = 10;
}