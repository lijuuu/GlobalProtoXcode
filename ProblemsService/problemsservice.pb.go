// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.19.6
// source: ProblemsService/problemsservice.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProblemCountMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemCountMetadataRequest) Reset() {
	*x = ProblemCountMetadataRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemCountMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemCountMetadataRequest) ProtoMessage() {}

func (x *ProblemCountMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemCountMetadataRequest.ProtoReflect.Descriptor instead.
func (*ProblemCountMetadataRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{0}
}

type ProblemCountMetadataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Easy          int32                  `protobuf:"varint,1,opt,name=easy,proto3" json:"easy,omitempty"`
	Medium        int32                  `protobuf:"varint,2,opt,name=medium,proto3" json:"medium,omitempty"`
	Hard          int32                  `protobuf:"varint,3,opt,name=hard,proto3" json:"hard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemCountMetadataResponse) Reset() {
	*x = ProblemCountMetadataResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemCountMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemCountMetadataResponse) ProtoMessage() {}

func (x *ProblemCountMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemCountMetadataResponse.ProtoReflect.Descriptor instead.
func (*ProblemCountMetadataResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{1}
}

func (x *ProblemCountMetadataResponse) GetEasy() int32 {
	if x != nil {
		return x.Easy
	}
	return 0
}

func (x *ProblemCountMetadataResponse) GetMedium() int32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *ProblemCountMetadataResponse) GetHard() int32 {
	if x != nil {
		return x.Hard
	}
	return 0
}

type RandomProblemIdsGenWithDifficultyRatioRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	QnRatio       *ProblemDifficultyRatio `protobuf:"bytes,1,opt,name=qnRatio,proto3" json:"qnRatio,omitempty"`
	TraceId       string                  `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RandomProblemIdsGenWithDifficultyRatioRequest) Reset() {
	*x = RandomProblemIdsGenWithDifficultyRatioRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandomProblemIdsGenWithDifficultyRatioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomProblemIdsGenWithDifficultyRatioRequest) ProtoMessage() {}

func (x *RandomProblemIdsGenWithDifficultyRatioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomProblemIdsGenWithDifficultyRatioRequest.ProtoReflect.Descriptor instead.
func (*RandomProblemIdsGenWithDifficultyRatioRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{2}
}

func (x *RandomProblemIdsGenWithDifficultyRatioRequest) GetQnRatio() *ProblemDifficultyRatio {
	if x != nil {
		return x.QnRatio
	}
	return nil
}

func (x *RandomProblemIdsGenWithDifficultyRatioRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type ProblemDifficultyRatio struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Easy          int32                  `protobuf:"varint,1,opt,name=easy,proto3" json:"easy,omitempty"`
	Medium        int32                  `protobuf:"varint,2,opt,name=medium,proto3" json:"medium,omitempty"`
	Hard          int32                  `protobuf:"varint,3,opt,name=hard,proto3" json:"hard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemDifficultyRatio) Reset() {
	*x = ProblemDifficultyRatio{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemDifficultyRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemDifficultyRatio) ProtoMessage() {}

func (x *ProblemDifficultyRatio) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemDifficultyRatio.ProtoReflect.Descriptor instead.
func (*ProblemDifficultyRatio) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{3}
}

func (x *ProblemDifficultyRatio) GetEasy() int32 {
	if x != nil {
		return x.Easy
	}
	return 0
}

func (x *ProblemDifficultyRatio) GetMedium() int32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *ProblemDifficultyRatio) GetHard() int32 {
	if x != nil {
		return x.Hard
	}
	return 0
}

type RandomProblemIdsGenWithDifficultyRatioResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ProblemIds    []string                `protobuf:"bytes,1,rep,name=problemIds,proto3" json:"problemIds,omitempty"`
	QnRatio       *ProblemDifficultyRatio `protobuf:"bytes,2,opt,name=qnRatio,proto3" json:"qnRatio,omitempty"` // unavailable ratio
	Success       bool                    `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                  `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                  `protobuf:"bytes,5,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RandomProblemIdsGenWithDifficultyRatioResponse) Reset() {
	*x = RandomProblemIdsGenWithDifficultyRatioResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandomProblemIdsGenWithDifficultyRatioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomProblemIdsGenWithDifficultyRatioResponse) ProtoMessage() {}

func (x *RandomProblemIdsGenWithDifficultyRatioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomProblemIdsGenWithDifficultyRatioResponse.ProtoReflect.Descriptor instead.
func (*RandomProblemIdsGenWithDifficultyRatioResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{4}
}

func (x *RandomProblemIdsGenWithDifficultyRatioResponse) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

func (x *RandomProblemIdsGenWithDifficultyRatioResponse) GetQnRatio() *ProblemDifficultyRatio {
	if x != nil {
		return x.QnRatio
	}
	return nil
}

func (x *RandomProblemIdsGenWithDifficultyRatioResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RandomProblemIdsGenWithDifficultyRatioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RandomProblemIdsGenWithDifficultyRatioResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type ProblemMetadata struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProblemId          string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Title              string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tags               []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	TestcaseRun        *TestCaseRunOnly       `protobuf:"bytes,5,opt,name=testcaseRun,proto3" json:"testcaseRun,omitempty"`
	Difficulty         string                 `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SupportedLanguages []string               `protobuf:"bytes,7,rep,name=supportedLanguages,proto3" json:"supportedLanguages,omitempty"`
	Validated          bool                   `protobuf:"varint,8,opt,name=validated,proto3" json:"validated,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProblemMetadata) Reset() {
	*x = ProblemMetadata{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemMetadata) ProtoMessage() {}

func (x *ProblemMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemMetadata.ProtoReflect.Descriptor instead.
func (*ProblemMetadata) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{5}
}

func (x *ProblemMetadata) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ProblemMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProblemMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProblemMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProblemMetadata) GetTestcaseRun() *TestCaseRunOnly {
	if x != nil {
		return x.TestcaseRun
	}
	return nil
}

func (x *ProblemMetadata) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ProblemMetadata) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *ProblemMetadata) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

type VerifyProblemExistenceBulkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemIds    []string               `protobuf:"bytes,1,rep,name=problemIds,proto3" json:"problemIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyProblemExistenceBulkRequest) Reset() {
	*x = VerifyProblemExistenceBulkRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyProblemExistenceBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProblemExistenceBulkRequest) ProtoMessage() {}

func (x *VerifyProblemExistenceBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProblemExistenceBulkRequest.ProtoReflect.Descriptor instead.
func (*VerifyProblemExistenceBulkRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{6}
}

func (x *VerifyProblemExistenceBulkRequest) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

type VerifyProblemExistenceBulkResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ProblemExistence map[string]bool        `protobuf:"bytes,1,rep,name=problemExistence,proto3" json:"problemExistence,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // problemId -> exists
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VerifyProblemExistenceBulkResponse) Reset() {
	*x = VerifyProblemExistenceBulkResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyProblemExistenceBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProblemExistenceBulkResponse) ProtoMessage() {}

func (x *VerifyProblemExistenceBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProblemExistenceBulkResponse.ProtoReflect.Descriptor instead.
func (*VerifyProblemExistenceBulkResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyProblemExistenceBulkResponse) GetProblemExistence() map[string]bool {
	if x != nil {
		return x.ProblemExistence
	}
	return nil
}

type ProblemIdsDoneByUserIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemIdsDoneByUserIdRequest) Reset() {
	*x = ProblemIdsDoneByUserIdRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemIdsDoneByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemIdsDoneByUserIdRequest) ProtoMessage() {}

func (x *ProblemIdsDoneByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemIdsDoneByUserIdRequest.ProtoReflect.Descriptor instead.
func (*ProblemIdsDoneByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{8}
}

func (x *ProblemIdsDoneByUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ProblemIdsDoneByUserIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemIds    []string               `protobuf:"bytes,1,rep,name=problemIds,proto3" json:"problemIds,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemIdsDoneByUserIdResponse) Reset() {
	*x = ProblemIdsDoneByUserIdResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemIdsDoneByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemIdsDoneByUserIdResponse) ProtoMessage() {}

func (x *ProblemIdsDoneByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemIdsDoneByUserIdResponse.ProtoReflect.Descriptor instead.
func (*ProblemIdsDoneByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{9}
}

func (x *ProblemIdsDoneByUserIdResponse) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

func (x *ProblemIdsDoneByUserIdResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProblemIdsDoneByUserIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProblemIdsDoneByUserIdResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type GetSubmissionsByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubmissionId  string                 `protobuf:"bytes,1,opt,name=submissionId,proto3" json:"submissionId,omitempty"`
	TraceId       string                 `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionsByIdRequest) Reset() {
	*x = GetSubmissionsByIdRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsByIdRequest) ProtoMessage() {}

func (x *GetSubmissionsByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsByIdRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionsByIdRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{10}
}

func (x *GetSubmissionsByIdRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *GetSubmissionsByIdRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetSubmissionsByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Submission    *Submission            `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionsByIdResponse) Reset() {
	*x = GetSubmissionsByIdResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsByIdResponse) ProtoMessage() {}

func (x *GetSubmissionsByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsByIdResponse.ProtoReflect.Descriptor instead.
func (*GetSubmissionsByIdResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{11}
}

func (x *GetSubmissionsByIdResponse) GetSubmission() *Submission {
	if x != nil {
		return x.Submission
	}
	return nil
}

func (x *GetSubmissionsByIdResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetSubmissionsByIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSubmissionsByIdResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type ForceChangeUserEntityInSubmissionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Entity        string                 `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForceChangeUserEntityInSubmissionRequest) Reset() {
	*x = ForceChangeUserEntityInSubmissionRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceChangeUserEntityInSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceChangeUserEntityInSubmissionRequest) ProtoMessage() {}

func (x *ForceChangeUserEntityInSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceChangeUserEntityInSubmissionRequest.ProtoReflect.Descriptor instead.
func (*ForceChangeUserEntityInSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{12}
}

func (x *ForceChangeUserEntityInSubmissionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ForceChangeUserEntityInSubmissionRequest) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

type ForceChangeUserEntityInSubmissionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForceChangeUserEntityInSubmissionResponse) Reset() {
	*x = ForceChangeUserEntityInSubmissionResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceChangeUserEntityInSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceChangeUserEntityInSubmissionResponse) ProtoMessage() {}

func (x *ForceChangeUserEntityInSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceChangeUserEntityInSubmissionResponse.ProtoReflect.Descriptor instead.
func (*ForceChangeUserEntityInSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{13}
}

type GetBulkProblemMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemIds    []string               `protobuf:"bytes,1,rep,name=problemIds,proto3" json:"problemIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBulkProblemMetadataRequest) Reset() {
	*x = GetBulkProblemMetadataRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBulkProblemMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkProblemMetadataRequest) ProtoMessage() {}

func (x *GetBulkProblemMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkProblemMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetBulkProblemMetadataRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{14}
}

func (x *GetBulkProblemMetadataRequest) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

type GetBulkProblemMetadataResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BulkProblemMetadata []*BulkProblemMetadata `protobuf:"bytes,1,rep,name=bulkProblemMetadata,proto3" json:"bulkProblemMetadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetBulkProblemMetadataResponse) Reset() {
	*x = GetBulkProblemMetadataResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBulkProblemMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkProblemMetadataResponse) ProtoMessage() {}

func (x *GetBulkProblemMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkProblemMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetBulkProblemMetadataResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{15}
}

func (x *GetBulkProblemMetadataResponse) GetBulkProblemMetadata() []*BulkProblemMetadata {
	if x != nil {
		return x.BulkProblemMetadata
	}
	return nil
}

type BulkProblemMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Difficulty    string                 `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulkProblemMetadata) Reset() {
	*x = BulkProblemMetadata{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkProblemMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkProblemMetadata) ProtoMessage() {}

func (x *BulkProblemMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkProblemMetadata.ProtoReflect.Descriptor instead.
func (*BulkProblemMetadata) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{16}
}

func (x *BulkProblemMetadata) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *BulkProblemMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BulkProblemMetadata) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *BulkProblemMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetTopKGlobalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	K             int32                  `protobuf:"varint,1,opt,name=k,proto3" json:"k,omitempty"`
	TraceId       string                 `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopKGlobalRequest) Reset() {
	*x = GetTopKGlobalRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopKGlobalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopKGlobalRequest) ProtoMessage() {}

func (x *GetTopKGlobalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopKGlobalRequest.ProtoReflect.Descriptor instead.
func (*GetTopKGlobalRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{17}
}

func (x *GetTopKGlobalRequest) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *GetTopKGlobalRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetTopKGlobalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*UserScore           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopKGlobalResponse) Reset() {
	*x = GetTopKGlobalResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopKGlobalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopKGlobalResponse) ProtoMessage() {}

func (x *GetTopKGlobalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopKGlobalResponse.ProtoReflect.Descriptor instead.
func (*GetTopKGlobalResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{18}
}

func (x *GetTopKGlobalResponse) GetUsers() []*UserScore {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetTopKEntityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        string                 `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	TraceId       string                 `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopKEntityRequest) Reset() {
	*x = GetTopKEntityRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopKEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopKEntityRequest) ProtoMessage() {}

func (x *GetTopKEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopKEntityRequest.ProtoReflect.Descriptor instead.
func (*GetTopKEntityRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{19}
}

func (x *GetTopKEntityRequest) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *GetTopKEntityRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetTopKEntityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*UserScore           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopKEntityResponse) Reset() {
	*x = GetTopKEntityResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopKEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopKEntityResponse) ProtoMessage() {}

func (x *GetTopKEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopKEntityResponse.ProtoReflect.Descriptor instead.
func (*GetTopKEntityResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{20}
}

func (x *GetTopKEntityResponse) GetUsers() []*UserScore {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetUserRankRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TraceId       string                 `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRankRequest) Reset() {
	*x = GetUserRankRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRankRequest) ProtoMessage() {}

func (x *GetUserRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRankRequest.ProtoReflect.Descriptor instead.
func (*GetUserRankRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{21}
}

func (x *GetUserRankRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserRankRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetUserRankResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GlobalRank    int32                  `protobuf:"varint,1,opt,name=globalRank,proto3" json:"globalRank,omitempty"`
	EntityRank    int32                  `protobuf:"varint,2,opt,name=entityRank,proto3" json:"entityRank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRankResponse) Reset() {
	*x = GetUserRankResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRankResponse) ProtoMessage() {}

func (x *GetUserRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRankResponse.ProtoReflect.Descriptor instead.
func (*GetUserRankResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{22}
}

func (x *GetUserRankResponse) GetGlobalRank() int32 {
	if x != nil {
		return x.GlobalRank
	}
	return 0
}

func (x *GetUserRankResponse) GetEntityRank() int32 {
	if x != nil {
		return x.EntityRank
	}
	return 0
}

type GetLeaderboardDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TraceId       string                 `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderboardDataRequest) Reset() {
	*x = GetLeaderboardDataRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderboardDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardDataRequest) ProtoMessage() {}

func (x *GetLeaderboardDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardDataRequest.ProtoReflect.Descriptor instead.
func (*GetLeaderboardDataRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{23}
}

func (x *GetLeaderboardDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetLeaderboardDataRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetLeaderboardDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Score         float64                `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Entity        string                 `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
	GlobalRank    int32                  `protobuf:"varint,4,opt,name=globalRank,proto3" json:"globalRank,omitempty"`
	EntityRank    int32                  `protobuf:"varint,5,opt,name=entityRank,proto3" json:"entityRank,omitempty"`
	TopKGlobal    []*UserScore           `protobuf:"bytes,6,rep,name=topKGlobal,proto3" json:"topKGlobal,omitempty"`
	TopKEntity    []*UserScore           `protobuf:"bytes,7,rep,name=topKEntity,proto3" json:"topKEntity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderboardDataResponse) Reset() {
	*x = GetLeaderboardDataResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderboardDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardDataResponse) ProtoMessage() {}

func (x *GetLeaderboardDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardDataResponse.ProtoReflect.Descriptor instead.
func (*GetLeaderboardDataResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{24}
}

func (x *GetLeaderboardDataResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetLeaderboardDataResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetLeaderboardDataResponse) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *GetLeaderboardDataResponse) GetGlobalRank() int32 {
	if x != nil {
		return x.GlobalRank
	}
	return 0
}

func (x *GetLeaderboardDataResponse) GetEntityRank() int32 {
	if x != nil {
		return x.EntityRank
	}
	return 0
}

func (x *GetLeaderboardDataResponse) GetTopKGlobal() []*UserScore {
	if x != nil {
		return x.TopKGlobal
	}
	return nil
}

func (x *GetLeaderboardDataResponse) GetTopKEntity() []*UserScore {
	if x != nil {
		return x.TopKEntity
	}
	return nil
}

type UserScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Score         float64                `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Entity        string                 `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserScore) Reset() {
	*x = UserScore{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScore) ProtoMessage() {}

func (x *UserScore) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScore.ProtoReflect.Descriptor instead.
func (*UserScore) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{25}
}

func (x *UserScore) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserScore) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserScore) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

type GetMonthlyActivityHeatmapRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Month         int32                  `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"` // 1 to 12
	Year          int32                  `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	TraceId       string                 `protobuf:"bytes,4,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonthlyActivityHeatmapRequest) Reset() {
	*x = GetMonthlyActivityHeatmapRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonthlyActivityHeatmapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyActivityHeatmapRequest) ProtoMessage() {}

func (x *GetMonthlyActivityHeatmapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyActivityHeatmapRequest.ProtoReflect.Descriptor instead.
func (*GetMonthlyActivityHeatmapRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{26}
}

func (x *GetMonthlyActivityHeatmapRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetMonthlyActivityHeatmapRequest) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *GetMonthlyActivityHeatmapRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetMonthlyActivityHeatmapRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type ActivityDay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          string                 `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // format: YYYY-MM-DD
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	IsActive      bool                   `protobuf:"varint,3,opt,name=isActive,proto3" json:"isActive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityDay) Reset() {
	*x = ActivityDay{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDay) ProtoMessage() {}

func (x *ActivityDay) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDay.ProtoReflect.Descriptor instead.
func (*ActivityDay) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{27}
}

func (x *ActivityDay) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ActivityDay) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ActivityDay) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type GetMonthlyActivityHeatmapResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*ActivityDay         `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonthlyActivityHeatmapResponse) Reset() {
	*x = GetMonthlyActivityHeatmapResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonthlyActivityHeatmapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyActivityHeatmapResponse) ProtoMessage() {}

func (x *GetMonthlyActivityHeatmapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyActivityHeatmapResponse.ProtoReflect.Descriptor instead.
func (*GetMonthlyActivityHeatmapResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{28}
}

func (x *GetMonthlyActivityHeatmapResponse) GetData() []*ActivityDay {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetLeaderBoardOptionalCountryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int64                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Country       *string                `protobuf:"bytes,3,opt,name=country,proto3,oneof" json:"country,omitempty"`
	Username      *string                `protobuf:"bytes,4,opt,name=username,proto3,oneof" json:"username,omitempty"`
	UserId        string                 `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
	TraceId       string                 `protobuf:"bytes,6,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderBoardOptionalCountryRequest) Reset() {
	*x = GetLeaderBoardOptionalCountryRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderBoardOptionalCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderBoardOptionalCountryRequest) ProtoMessage() {}

func (x *GetLeaderBoardOptionalCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderBoardOptionalCountryRequest.ProtoReflect.Descriptor instead.
func (*GetLeaderBoardOptionalCountryRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{29}
}

func (x *GetLeaderBoardOptionalCountryRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetLeaderBoardOptionalCountryRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetLeaderBoardOptionalCountryRequest) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *GetLeaderBoardOptionalCountryRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *GetLeaderBoardOptionalCountryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetLeaderBoardOptionalCountryRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetLeaderBoardOptionalCountryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *LeaderboardSingle     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	FilterType    *string                `protobuf:"bytes,2,opt,name=filterType,proto3,oneof" json:"filterType,omitempty"` // country or global
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderBoardOptionalCountryResponse) Reset() {
	*x = GetLeaderBoardOptionalCountryResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderBoardOptionalCountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderBoardOptionalCountryResponse) ProtoMessage() {}

func (x *GetLeaderBoardOptionalCountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderBoardOptionalCountryResponse.ProtoReflect.Descriptor instead.
func (*GetLeaderBoardOptionalCountryResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{30}
}

func (x *GetLeaderBoardOptionalCountryResponse) GetData() *LeaderboardSingle {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetLeaderBoardOptionalCountryResponse) GetFilterType() string {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return ""
}

type LeaderboardSingle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	CountryRank   *int64                 `protobuf:"varint,2,opt,name=countryRank,proto3,oneof" json:"countryRank,omitempty"`
	GlobalRank    int64                  `protobuf:"varint,3,opt,name=globalRank,proto3" json:"globalRank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderboardSingle) Reset() {
	*x = LeaderboardSingle{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardSingle) ProtoMessage() {}

func (x *LeaderboardSingle) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardSingle.ProtoReflect.Descriptor instead.
func (*LeaderboardSingle) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{31}
}

func (x *LeaderboardSingle) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LeaderboardSingle) GetCountryRank() int64 {
	if x != nil && x.CountryRank != nil {
		return *x.CountryRank
	}
	return 0
}

func (x *LeaderboardSingle) GetGlobalRank() int64 {
	if x != nil {
		return x.GlobalRank
	}
	return 0
}

type GetProblemsDoneStatisticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      *string                `protobuf:"bytes,1,opt,name=username,proto3,oneof" json:"username,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TraceId       string                 `protobuf:"bytes,3,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemsDoneStatisticsRequest) Reset() {
	*x = GetProblemsDoneStatisticsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemsDoneStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsDoneStatisticsRequest) ProtoMessage() {}

func (x *GetProblemsDoneStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsDoneStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetProblemsDoneStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{32}
}

func (x *GetProblemsDoneStatisticsRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *GetProblemsDoneStatisticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetProblemsDoneStatisticsRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetProblemsDoneStatisticsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Data          *ProblemsDoneStatistics `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemsDoneStatisticsResponse) Reset() {
	*x = GetProblemsDoneStatisticsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemsDoneStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsDoneStatisticsResponse) ProtoMessage() {}

func (x *GetProblemsDoneStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsDoneStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetProblemsDoneStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{33}
}

func (x *GetProblemsDoneStatisticsResponse) GetData() *ProblemsDoneStatistics {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProblemsDoneStatistics struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MaxEasyCount    int32                  `protobuf:"varint,1,opt,name=maxEasyCount,proto3" json:"maxEasyCount,omitempty"`
	DoneEasyCount   int32                  `protobuf:"varint,2,opt,name=doneEasyCount,proto3" json:"doneEasyCount,omitempty"`
	MaxMediumCount  int32                  `protobuf:"varint,3,opt,name=maxMediumCount,proto3" json:"maxMediumCount,omitempty"`
	DoneMediumCount int32                  `protobuf:"varint,4,opt,name=doneMediumCount,proto3" json:"doneMediumCount,omitempty"`
	MaxHardCount    int32                  `protobuf:"varint,5,opt,name=maxHardCount,proto3" json:"maxHardCount,omitempty"`
	DoneHardCount   int32                  `protobuf:"varint,6,opt,name=doneHardCount,proto3" json:"doneHardCount,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProblemsDoneStatistics) Reset() {
	*x = ProblemsDoneStatistics{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemsDoneStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemsDoneStatistics) ProtoMessage() {}

func (x *ProblemsDoneStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemsDoneStatistics.ProtoReflect.Descriptor instead.
func (*ProblemsDoneStatistics) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{34}
}

func (x *ProblemsDoneStatistics) GetMaxEasyCount() int32 {
	if x != nil {
		return x.MaxEasyCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetDoneEasyCount() int32 {
	if x != nil {
		return x.DoneEasyCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetMaxMediumCount() int32 {
	if x != nil {
		return x.MaxMediumCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetDoneMediumCount() int32 {
	if x != nil {
		return x.DoneMediumCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetMaxHardCount() int32 {
	if x != nil {
		return x.MaxHardCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetDoneHardCount() int32 {
	if x != nil {
		return x.DoneHardCount
	}
	return 0
}

type Timestamp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seconds       int64                  `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos         int32                  `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{35}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type TestCase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Input         string                 `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Expected      string                 `protobuf:"bytes,3,opt,name=expected,proto3" json:"expected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{36}
}

func (x *TestCase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestCase) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TestCase) GetExpected() string {
	if x != nil {
		return x.Expected
	}
	return ""
}

type TestCases struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           []*TestCase            `protobuf:"bytes,1,rep,name=run,proto3" json:"run,omitempty"`
	Submit        []*TestCase            `protobuf:"bytes,2,rep,name=submit,proto3" json:"submit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCases) Reset() {
	*x = TestCases{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCases) ProtoMessage() {}

func (x *TestCases) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCases.ProtoReflect.Descriptor instead.
func (*TestCases) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{37}
}

func (x *TestCases) GetRun() []*TestCase {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *TestCases) GetSubmit() []*TestCase {
	if x != nil {
		return x.Submit
	}
	return nil
}

type TestCaseRunOnly struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           []*TestCase            `protobuf:"bytes,1,rep,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCaseRunOnly) Reset() {
	*x = TestCaseRunOnly{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCaseRunOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseRunOnly) ProtoMessage() {}

func (x *TestCaseRunOnly) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseRunOnly.ProtoReflect.Descriptor instead.
func (*TestCaseRunOnly) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{38}
}

func (x *TestCaseRunOnly) GetRun() []*TestCase {
	if x != nil {
		return x.Run
	}
	return nil
}

type ValidationCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Placeholder   string                 `protobuf:"bytes,1,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Template      string                 `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationCode) Reset() {
	*x = ValidationCode{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationCode) ProtoMessage() {}

func (x *ValidationCode) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationCode.ProtoReflect.Descriptor instead.
func (*ValidationCode) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{39}
}

func (x *ValidationCode) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *ValidationCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ValidationCode) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

type CreateProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    string                 `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	TraceId       string                 `protobuf:"bytes,5,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProblemRequest) Reset() {
	*x = CreateProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemRequest) ProtoMessage() {}

func (x *CreateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{40}
}

func (x *CreateProblemRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateProblemRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateProblemRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateProblemRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *CreateProblemRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type UpdateProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Title         *string                `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    *string                `protobuf:"bytes,5,opt,name=difficulty,proto3,oneof" json:"difficulty,omitempty"`
	Visible       *bool                  `protobuf:"varint,6,opt,name=visible,proto3,oneof" json:"visible,omitempty"`
	TraceId       string                 `protobuf:"bytes,7,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemRequest) Reset() {
	*x = UpdateProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemRequest) ProtoMessage() {}

func (x *UpdateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateProblemRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateProblemRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateProblemRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateProblemRequest) GetDifficulty() string {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return ""
}

func (x *UpdateProblemRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *UpdateProblemRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type DeleteProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	TraceId       string                 `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProblemRequest) Reset() {
	*x = DeleteProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemRequest) ProtoMessage() {}

func (x *DeleteProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteProblemRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	TraceId       string                 `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemRequest) Reset() {
	*x = GetProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemRequest) ProtoMessage() {}

func (x *GetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{43}
}

func (x *GetProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *GetProblemRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type ListProblemsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    string                 `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SearchQuery   string                 `protobuf:"bytes,5,opt,name=searchQuery,proto3" json:"searchQuery,omitempty"`
	TraceId       string                 `protobuf:"bytes,6,opt,name=traceId,proto3" json:"traceId,omitempty"`
	IsAdmin       bool                   `protobuf:"varint,7,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProblemsRequest) Reset() {
	*x = ListProblemsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsRequest) ProtoMessage() {}

func (x *ListProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsRequest.ProtoReflect.Descriptor instead.
func (*ListProblemsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{44}
}

func (x *ListProblemsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProblemsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListProblemsRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ListProblemsRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *ListProblemsRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ListProblemsRequest) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

type AddTestCasesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Testcases     *TestCases             `protobuf:"bytes,2,opt,name=testcases,proto3" json:"testcases,omitempty"`
	TraceId       string                 `protobuf:"bytes,3,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTestCasesRequest) Reset() {
	*x = AddTestCasesRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestCasesRequest) ProtoMessage() {}

func (x *AddTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestCasesRequest.ProtoReflect.Descriptor instead.
func (*AddTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{45}
}

func (x *AddTestCasesRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *AddTestCasesRequest) GetTestcases() *TestCases {
	if x != nil {
		return x.Testcases
	}
	return nil
}

func (x *AddTestCasesRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type AddLanguageSupportRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProblemId      string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Language       string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	ValidationCode *ValidationCode        `protobuf:"bytes,3,opt,name=validationCode,proto3" json:"validationCode,omitempty"`
	TraceId        string                 `protobuf:"bytes,4,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddLanguageSupportRequest) Reset() {
	*x = AddLanguageSupportRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLanguageSupportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLanguageSupportRequest) ProtoMessage() {}

func (x *AddLanguageSupportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLanguageSupportRequest.ProtoReflect.Descriptor instead.
func (*AddLanguageSupportRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{46}
}

func (x *AddLanguageSupportRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *AddLanguageSupportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AddLanguageSupportRequest) GetValidationCode() *ValidationCode {
	if x != nil {
		return x.ValidationCode
	}
	return nil
}

func (x *AddLanguageSupportRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type UpdateLanguageSupportRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProblemId      string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Language       string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	ValidationCode *ValidationCode        `protobuf:"bytes,3,opt,name=validationCode,proto3" json:"validationCode,omitempty"`
	TraceId        string                 `protobuf:"bytes,4,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateLanguageSupportRequest) Reset() {
	*x = UpdateLanguageSupportRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLanguageSupportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguageSupportRequest) ProtoMessage() {}

func (x *UpdateLanguageSupportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguageSupportRequest.ProtoReflect.Descriptor instead.
func (*UpdateLanguageSupportRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateLanguageSupportRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateLanguageSupportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UpdateLanguageSupportRequest) GetValidationCode() *ValidationCode {
	if x != nil {
		return x.ValidationCode
	}
	return nil
}

func (x *UpdateLanguageSupportRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type RemoveLanguageSupportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	TraceId       string                 `protobuf:"bytes,3,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveLanguageSupportRequest) Reset() {
	*x = RemoveLanguageSupportRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveLanguageSupportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLanguageSupportRequest) ProtoMessage() {}

func (x *RemoveLanguageSupportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLanguageSupportRequest.ProtoReflect.Descriptor instead.
func (*RemoveLanguageSupportRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{48}
}

func (x *RemoveLanguageSupportRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RemoveLanguageSupportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RemoveLanguageSupportRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type Problem struct {
	state              protoimpl.MessageState     `protogen:"open.v1"`
	ProblemId          string                     `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	CreatedAt          *Timestamp                 `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *Timestamp                 `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt          *Timestamp                 `protobuf:"bytes,4,opt,name=deletedAt,proto3,oneof" json:"deletedAt,omitempty"`
	Title              string                     `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                     `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Tags               []string                   `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Testcases          *TestCases                 `protobuf:"bytes,8,opt,name=testcases,proto3" json:"testcases,omitempty"`
	Difficulty         string                     `protobuf:"bytes,9,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SupportedLanguages []string                   `protobuf:"bytes,10,rep,name=supportedLanguages,proto3" json:"supportedLanguages,omitempty"`
	ValidateCode       map[string]*ValidationCode `protobuf:"bytes,11,rep,name=validateCode,proto3" json:"validateCode,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Validated          bool                       `protobuf:"varint,12,opt,name=validated,proto3" json:"validated,omitempty"`
	ValidatedAt        *Timestamp                 `protobuf:"bytes,13,opt,name=validatedAt,proto3" json:"validatedAt,omitempty"`
	Visible            bool                       `protobuf:"varint,14,opt,name=visible,proto3" json:"visible,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Problem) Reset() {
	*x = Problem{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{49}
}

func (x *Problem) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Problem) GetCreatedAt() *Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Problem) GetUpdatedAt() *Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Problem) GetDeletedAt() *Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Problem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Problem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Problem) GetTestcases() *TestCases {
	if x != nil {
		return x.Testcases
	}
	return nil
}

func (x *Problem) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *Problem) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *Problem) GetValidateCode() map[string]*ValidationCode {
	if x != nil {
		return x.ValidateCode
	}
	return nil
}

func (x *Problem) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *Problem) GetValidatedAt() *Timestamp {
	if x != nil {
		return x.ValidatedAt
	}
	return nil
}

func (x *Problem) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type CreateProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProblemResponse) Reset() {
	*x = CreateProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemResponse) ProtoMessage() {}

func (x *CreateProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemResponse.ProtoReflect.Descriptor instead.
func (*CreateProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{50}
}

func (x *CreateProblemResponse) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type UpdateProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemResponse) Reset() {
	*x = UpdateProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemResponse) ProtoMessage() {}

func (x *UpdateProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemResponse.ProtoReflect.Descriptor instead.
func (*UpdateProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type DeleteProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProblemResponse) Reset() {
	*x = DeleteProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemResponse) ProtoMessage() {}

func (x *DeleteProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemResponse.ProtoReflect.Descriptor instead.
func (*DeleteProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type GetProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Problem       *Problem               `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	ErrorType     string                 `protobuf:"bytes,2,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemResponse) Reset() {
	*x = GetProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemResponse) ProtoMessage() {}

func (x *GetProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemResponse.ProtoReflect.Descriptor instead.
func (*GetProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{53}
}

func (x *GetProblemResponse) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

func (x *GetProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type ListProblemsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Problems      []*Problem             `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	ErrorType     string                 `protobuf:"bytes,5,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProblemsResponse) Reset() {
	*x = ListProblemsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProblemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsResponse) ProtoMessage() {}

func (x *ListProblemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsResponse.ProtoReflect.Descriptor instead.
func (*ListProblemsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{54}
}

func (x *ListProblemsResponse) GetProblems() []*Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *ListProblemsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListProblemsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProblemsResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type AddTestCasesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AddedCount    int32                  `protobuf:"varint,3,opt,name=addedCount,proto3" json:"addedCount,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTestCasesResponse) Reset() {
	*x = AddTestCasesResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestCasesResponse) ProtoMessage() {}

func (x *AddTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestCasesResponse.ProtoReflect.Descriptor instead.
func (*AddTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{55}
}

func (x *AddTestCasesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddTestCasesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddTestCasesResponse) GetAddedCount() int32 {
	if x != nil {
		return x.AddedCount
	}
	return 0
}

func (x *AddTestCasesResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type AddLanguageSupportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddLanguageSupportResponse) Reset() {
	*x = AddLanguageSupportResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLanguageSupportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLanguageSupportResponse) ProtoMessage() {}

func (x *AddLanguageSupportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLanguageSupportResponse.ProtoReflect.Descriptor instead.
func (*AddLanguageSupportResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{56}
}

func (x *AddLanguageSupportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddLanguageSupportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddLanguageSupportResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type UpdateLanguageSupportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLanguageSupportResponse) Reset() {
	*x = UpdateLanguageSupportResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLanguageSupportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguageSupportResponse) ProtoMessage() {}

func (x *UpdateLanguageSupportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguageSupportResponse.ProtoReflect.Descriptor instead.
func (*UpdateLanguageSupportResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateLanguageSupportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateLanguageSupportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateLanguageSupportResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type RemoveLanguageSupportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveLanguageSupportResponse) Reset() {
	*x = RemoveLanguageSupportResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveLanguageSupportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLanguageSupportResponse) ProtoMessage() {}

func (x *RemoveLanguageSupportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLanguageSupportResponse.ProtoReflect.Descriptor instead.
func (*RemoveLanguageSupportResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{58}
}

func (x *RemoveLanguageSupportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveLanguageSupportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveLanguageSupportResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type DeleteTestCaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	TestcaseId    string                 `protobuf:"bytes,2,opt,name=testcaseId,proto3" json:"testcaseId,omitempty"`
	IsRunTestcase bool                   `protobuf:"varint,3,opt,name=isRunTestcase,proto3" json:"isRunTestcase,omitempty"`
	TraceId       string                 `protobuf:"bytes,4,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTestCaseRequest) Reset() {
	*x = DeleteTestCaseRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestCaseRequest) ProtoMessage() {}

func (x *DeleteTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteTestCaseRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteTestCaseRequest) GetTestcaseId() string {
	if x != nil {
		return x.TestcaseId
	}
	return ""
}

func (x *DeleteTestCaseRequest) GetIsRunTestcase() bool {
	if x != nil {
		return x.IsRunTestcase
	}
	return false
}

func (x *DeleteTestCaseRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type DeleteTestCaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTestCaseResponse) Reset() {
	*x = DeleteTestCaseResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestCaseResponse) ProtoMessage() {}

func (x *DeleteTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestCaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteTestCaseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTestCaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteTestCaseResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type GetLanguageSupportsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	TraceId       string                 `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLanguageSupportsRequest) Reset() {
	*x = GetLanguageSupportsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageSupportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageSupportsRequest) ProtoMessage() {}

func (x *GetLanguageSupportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageSupportsRequest.ProtoReflect.Descriptor instead.
func (*GetLanguageSupportsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{61}
}

func (x *GetLanguageSupportsRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *GetLanguageSupportsRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetLanguageSupportsResponse struct {
	state              protoimpl.MessageState     `protogen:"open.v1"`
	Success            bool                       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message            string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SupportedLanguages []string                   `protobuf:"bytes,3,rep,name=supportedLanguages,proto3" json:"supportedLanguages,omitempty"`
	ValidateCode       map[string]*ValidationCode `protobuf:"bytes,4,rep,name=validateCode,proto3" json:"validateCode,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ErrorType          string                     `protobuf:"bytes,5,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetLanguageSupportsResponse) Reset() {
	*x = GetLanguageSupportsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageSupportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageSupportsResponse) ProtoMessage() {}

func (x *GetLanguageSupportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageSupportsResponse.ProtoReflect.Descriptor instead.
func (*GetLanguageSupportsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{62}
}

func (x *GetLanguageSupportsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetLanguageSupportsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetLanguageSupportsResponse) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *GetLanguageSupportsResponse) GetValidateCode() map[string]*ValidationCode {
	if x != nil {
		return x.ValidateCode
	}
	return nil
}

func (x *GetLanguageSupportsResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type FullValidationByProblemIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	TraceId       string                 `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullValidationByProblemIdRequest) Reset() {
	*x = FullValidationByProblemIdRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullValidationByProblemIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullValidationByProblemIdRequest) ProtoMessage() {}

func (x *FullValidationByProblemIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullValidationByProblemIdRequest.ProtoReflect.Descriptor instead.
func (*FullValidationByProblemIdRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{63}
}

func (x *FullValidationByProblemIdRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *FullValidationByProblemIdRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type FullValidationByProblemIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullValidationByProblemIdResponse) Reset() {
	*x = FullValidationByProblemIdResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullValidationByProblemIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullValidationByProblemIdResponse) ProtoMessage() {}

func (x *FullValidationByProblemIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullValidationByProblemIdResponse.ProtoReflect.Descriptor instead.
func (*FullValidationByProblemIdResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{64}
}

func (x *FullValidationByProblemIdResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FullValidationByProblemIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FullValidationByProblemIdResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type RunProblemRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProblemId      string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	UserCode       string                 `protobuf:"bytes,2,opt,name=userCode,proto3" json:"userCode,omitempty"`
	Language       string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	IsRunTestcase  bool                   `protobuf:"varint,4,opt,name=isRunTestcase,proto3" json:"isRunTestcase,omitempty"`
	UserId         string                 `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
	Country        *string                `protobuf:"bytes,6,opt,name=country,proto3,oneof" json:"country,omitempty"`
	IsChallenge    *string                `protobuf:"bytes,7,opt,name=isChallenge,proto3,oneof" json:"isChallenge,omitempty"`
	ChallengeToken *string                `protobuf:"bytes,8,opt,name=challengeToken,proto3,oneof" json:"challengeToken,omitempty"`
	TraceId        string                 `protobuf:"bytes,9,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RunProblemRequest) Reset() {
	*x = RunProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunProblemRequest) ProtoMessage() {}

func (x *RunProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunProblemRequest.ProtoReflect.Descriptor instead.
func (*RunProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{65}
}

func (x *RunProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RunProblemRequest) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *RunProblemRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RunProblemRequest) GetIsRunTestcase() bool {
	if x != nil {
		return x.IsRunTestcase
	}
	return false
}

func (x *RunProblemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RunProblemRequest) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *RunProblemRequest) GetIsChallenge() string {
	if x != nil && x.IsChallenge != nil {
		return *x.IsChallenge
	}
	return ""
}

func (x *RunProblemRequest) GetChallengeToken() string {
	if x != nil && x.ChallengeToken != nil {
		return *x.ChallengeToken
	}
	return ""
}

func (x *RunProblemRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type RunProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	IsRunTestcase bool                   `protobuf:"varint,3,opt,name=isRunTestcase,proto3" json:"isRunTestcase,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,6,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunProblemResponse) Reset() {
	*x = RunProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunProblemResponse) ProtoMessage() {}

func (x *RunProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunProblemResponse.ProtoReflect.Descriptor instead.
func (*RunProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{66}
}

func (x *RunProblemResponse) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RunProblemResponse) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RunProblemResponse) GetIsRunTestcase() bool {
	if x != nil {
		return x.IsRunTestcase
	}
	return false
}

func (x *RunProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RunProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RunProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type Submission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemId     string                 `protobuf:"bytes,2,opt,name=problemId,proto3" json:"problemId,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	ChallengeId   string                 `protobuf:"bytes,4,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
	SubmittedAt   *Timestamp             `protobuf:"bytes,5,opt,name=submittedAt,proto3" json:"submittedAt,omitempty"`
	Score         int32                  `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	Status        string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Output        string                 `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	Language      string                 `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`
	ExecutionTime float32                `protobuf:"fixed32,10,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	Difficulty    string                 `protobuf:"bytes,11,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	IsFirst       bool                   `protobuf:"varint,12,opt,name=isFirst,proto3" json:"isFirst,omitempty"`
	Title         string                 `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
	UserCode      string                 `protobuf:"bytes,14,opt,name=userCode,proto3" json:"userCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Submission) Reset() {
	*x = Submission{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{67}
}

func (x *Submission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Submission) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Submission) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Submission) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *Submission) GetSubmittedAt() *Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Submission) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Submission) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Submission) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *Submission) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Submission) GetExecutionTime() float32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *Submission) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *Submission) GetIsFirst() bool {
	if x != nil {
		return x.IsFirst
	}
	return false
}

func (x *Submission) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Submission) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

type GetSubmissionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     *string                `protobuf:"bytes,1,opt,name=problemId,proto3,oneof" json:"problemId,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`
	TraceId       string                 `protobuf:"bytes,5,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionsRequest) Reset() {
	*x = GetSubmissionsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsRequest) ProtoMessage() {}

func (x *GetSubmissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{68}
}

func (x *GetSubmissionsRequest) GetProblemId() string {
	if x != nil && x.ProblemId != nil {
		return *x.ProblemId
	}
	return ""
}

func (x *GetSubmissionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSubmissionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSubmissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSubmissionsRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetSubmissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Submissions   []*Submission          `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=errorType,proto3" json:"errorType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionsResponse) Reset() {
	*x = GetSubmissionsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsResponse) ProtoMessage() {}

func (x *GetSubmissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsResponse.ProtoReflect.Descriptor instead.
func (*GetSubmissionsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{69}
}

func (x *GetSubmissionsResponse) GetSubmissions() []*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *GetSubmissionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetSubmissionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSubmissionsResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type GetProblemByIdSlugRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Slug          *string                `protobuf:"bytes,2,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	TraceId       string                 `protobuf:"bytes,3,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemByIdSlugRequest) Reset() {
	*x = GetProblemByIdSlugRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemByIdSlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemByIdSlugRequest) ProtoMessage() {}

func (x *GetProblemByIdSlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemByIdSlugRequest.ProtoReflect.Descriptor instead.
func (*GetProblemByIdSlugRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{70}
}

func (x *GetProblemByIdSlugRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *GetProblemByIdSlugRequest) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *GetProblemByIdSlugRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetProblemByIdSlugResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProblemMetadata *ProblemMetadataLite   `protobuf:"bytes,1,opt,name=problemMetadata,proto3" json:"problemMetadata,omitempty"`
	Message         string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetProblemByIdSlugResponse) Reset() {
	*x = GetProblemByIdSlugResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemByIdSlugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemByIdSlugResponse) ProtoMessage() {}

func (x *GetProblemByIdSlugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemByIdSlugResponse.ProtoReflect.Descriptor instead.
func (*GetProblemByIdSlugResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{71}
}

func (x *GetProblemByIdSlugResponse) GetProblemMetadata() *ProblemMetadataLite {
	if x != nil {
		return x.ProblemMetadata
	}
	return nil
}

func (x *GetProblemByIdSlugResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetProblemMetadataListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    string                 `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SearchQuery   string                 `protobuf:"bytes,5,opt,name=searchQuery,proto3" json:"searchQuery,omitempty"`
	TraceId       string                 `protobuf:"bytes,6,opt,name=traceId,proto3" json:"traceId,omitempty"`
	IsAdmin       bool                   `protobuf:"varint,7,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemMetadataListRequest) Reset() {
	*x = GetProblemMetadataListRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemMetadataListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemMetadataListRequest) ProtoMessage() {}

func (x *GetProblemMetadataListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemMetadataListRequest.ProtoReflect.Descriptor instead.
func (*GetProblemMetadataListRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{72}
}

func (x *GetProblemMetadataListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetProblemMetadataListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProblemMetadataListRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetProblemMetadataListRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *GetProblemMetadataListRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *GetProblemMetadataListRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *GetProblemMetadataListRequest) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

type GetProblemMetadataListResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProblemMetadata []*ProblemMetadataLite `protobuf:"bytes,1,rep,name=problemMetadata,proto3" json:"problemMetadata,omitempty"`
	Message         string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetProblemMetadataListResponse) Reset() {
	*x = GetProblemMetadataListResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemMetadataListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemMetadataListResponse) ProtoMessage() {}

func (x *GetProblemMetadataListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemMetadataListResponse.ProtoReflect.Descriptor instead.
func (*GetProblemMetadataListResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{73}
}

func (x *GetProblemMetadataListResponse) GetProblemMetadata() []*ProblemMetadataLite {
	if x != nil {
		return x.ProblemMetadata
	}
	return nil
}

func (x *GetProblemMetadataListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProblemMetadataLite struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProblemId          string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Title              string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tags               []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	TestcaseRun        *TestCaseRunOnly       `protobuf:"bytes,5,opt,name=testcaseRun,proto3" json:"testcaseRun,omitempty"`
	Difficulty         string                 `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SupportedLanguages []string               `protobuf:"bytes,7,rep,name=supportedLanguages,proto3" json:"supportedLanguages,omitempty"`
	Validated          bool                   `protobuf:"varint,8,opt,name=validated,proto3" json:"validated,omitempty"`
	PlaceholderMaps    map[string]string      `protobuf:"bytes,9,rep,name=placeholderMaps,proto3" json:"placeholderMaps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Visible            bool                   `protobuf:"varint,10,opt,name=visible,proto3" json:"visible,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProblemMetadataLite) Reset() {
	*x = ProblemMetadataLite{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemMetadataLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemMetadataLite) ProtoMessage() {}

func (x *ProblemMetadataLite) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemMetadataLite.ProtoReflect.Descriptor instead.
func (*ProblemMetadataLite) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{74}
}

func (x *ProblemMetadataLite) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ProblemMetadataLite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProblemMetadataLite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProblemMetadataLite) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProblemMetadataLite) GetTestcaseRun() *TestCaseRunOnly {
	if x != nil {
		return x.TestcaseRun
	}
	return nil
}

func (x *ProblemMetadataLite) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ProblemMetadataLite) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *ProblemMetadataLite) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *ProblemMetadataLite) GetPlaceholderMaps() map[string]string {
	if x != nil {
		return x.PlaceholderMaps
	}
	return nil
}

func (x *ProblemMetadataLite) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

var File_ProblemsService_problemsservice_proto protoreflect.FileDescriptor

const file_ProblemsService_problemsservice_proto_rawDesc = "" +
	"\n" +
	"%ProblemsService/problemsservice.proto\x12\bproblems\"\x1d\n" +
	"\x1bProblemCountMetadataRequest\"^\n" +
	"\x1cProblemCountMetadataResponse\x12\x12\n" +
	"\x04easy\x18\x01 \x01(\x05R\x04easy\x12\x16\n" +
	"\x06medium\x18\x02 \x01(\x05R\x06medium\x12\x12\n" +
	"\x04hard\x18\x03 \x01(\x05R\x04hard\"\x85\x01\n" +
	"-RandomProblemIdsGenWithDifficultyRatioRequest\x12:\n" +
	"\aqnRatio\x18\x01 \x01(\v2 .problems.ProblemDifficultyRatioR\aqnRatio\x12\x18\n" +
	"\atraceId\x18\x02 \x01(\tR\atraceId\"X\n" +
	"\x16ProblemDifficultyRatio\x12\x12\n" +
	"\x04easy\x18\x01 \x01(\x05R\x04easy\x12\x16\n" +
	"\x06medium\x18\x02 \x01(\x05R\x06medium\x12\x12\n" +
	"\x04hard\x18\x03 \x01(\x05R\x04hard\"\xde\x01\n" +
	".RandomProblemIdsGenWithDifficultyRatioResponse\x12\x1e\n" +
	"\n" +
	"problemIds\x18\x01 \x03(\tR\n" +
	"problemIds\x12:\n" +
	"\aqnRatio\x18\x02 \x01(\v2 .problems.ProblemDifficultyRatioR\aqnRatio\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x05 \x01(\tR\terrorType\"\xa6\x02\n" +
	"\x0fProblemMetadata\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12;\n" +
	"\vtestcaseRun\x18\x05 \x01(\v2\x19.problems.TestCaseRunOnlyR\vtestcaseRun\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x06 \x01(\tR\n" +
	"difficulty\x12.\n" +
	"\x12supportedLanguages\x18\a \x03(\tR\x12supportedLanguages\x12\x1c\n" +
	"\tvalidated\x18\b \x01(\bR\tvalidated\"C\n" +
	"!VerifyProblemExistenceBulkRequest\x12\x1e\n" +
	"\n" +
	"problemIds\x18\x01 \x03(\tR\n" +
	"problemIds\"\xd9\x01\n" +
	"\"VerifyProblemExistenceBulkResponse\x12n\n" +
	"\x10problemExistence\x18\x01 \x03(\v2B.problems.VerifyProblemExistenceBulkResponse.ProblemExistenceEntryR\x10problemExistence\x1aC\n" +
	"\x15ProblemExistenceEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"7\n" +
	"\x1dProblemIdsDoneByUserIdRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\"\x92\x01\n" +
	"\x1eProblemIdsDoneByUserIdResponse\x12\x1e\n" +
	"\n" +
	"problemIds\x18\x01 \x03(\tR\n" +
	"problemIds\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x04 \x01(\tR\terrorType\"Y\n" +
	"\x19GetSubmissionsByIdRequest\x12\"\n" +
	"\fsubmissionId\x18\x01 \x01(\tR\fsubmissionId\x12\x18\n" +
	"\atraceId\x18\x02 \x01(\tR\atraceId\"\xa4\x01\n" +
	"\x1aGetSubmissionsByIdResponse\x124\n" +
	"\n" +
	"submission\x18\x01 \x01(\v2\x14.problems.SubmissionR\n" +
	"submission\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x04 \x01(\tR\terrorType\"Z\n" +
	"(ForceChangeUserEntityInSubmissionRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x16\n" +
	"\x06entity\x18\x02 \x01(\tR\x06entity\"+\n" +
	")ForceChangeUserEntityInSubmissionResponse\"?\n" +
	"\x1dGetBulkProblemMetadataRequest\x12\x1e\n" +
	"\n" +
	"problemIds\x18\x01 \x03(\tR\n" +
	"problemIds\"q\n" +
	"\x1eGetBulkProblemMetadataResponse\x12O\n" +
	"\x13bulkProblemMetadata\x18\x01 \x03(\v2\x1d.problems.BulkProblemMetadataR\x13bulkProblemMetadata\"}\n" +
	"\x13BulkProblemMetadata\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x06 \x01(\tR\n" +
	"difficulty\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\">\n" +
	"\x14GetTopKGlobalRequest\x12\f\n" +
	"\x01k\x18\x01 \x01(\x05R\x01k\x12\x18\n" +
	"\atraceId\x18\x02 \x01(\tR\atraceId\"B\n" +
	"\x15GetTopKGlobalResponse\x12)\n" +
	"\x05users\x18\x01 \x03(\v2\x13.problems.UserScoreR\x05users\"H\n" +
	"\x14GetTopKEntityRequest\x12\x16\n" +
	"\x06entity\x18\x01 \x01(\tR\x06entity\x12\x18\n" +
	"\atraceId\x18\x02 \x01(\tR\atraceId\"B\n" +
	"\x15GetTopKEntityResponse\x12)\n" +
	"\x05users\x18\x01 \x03(\v2\x13.problems.UserScoreR\x05users\"F\n" +
	"\x12GetUserRankRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceId\x18\x02 \x01(\tR\atraceId\"U\n" +
	"\x13GetUserRankResponse\x12\x1e\n" +
	"\n" +
	"globalRank\x18\x01 \x01(\x05R\n" +
	"globalRank\x12\x1e\n" +
	"\n" +
	"entityRank\x18\x02 \x01(\x05R\n" +
	"entityRank\"M\n" +
	"\x19GetLeaderboardDataRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceId\x18\x02 \x01(\tR\atraceId\"\x8c\x02\n" +
	"\x1aGetLeaderboardDataResponse\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x01R\x05score\x12\x16\n" +
	"\x06entity\x18\x03 \x01(\tR\x06entity\x12\x1e\n" +
	"\n" +
	"globalRank\x18\x04 \x01(\x05R\n" +
	"globalRank\x12\x1e\n" +
	"\n" +
	"entityRank\x18\x05 \x01(\x05R\n" +
	"entityRank\x123\n" +
	"\n" +
	"topKGlobal\x18\x06 \x03(\v2\x13.problems.UserScoreR\n" +
	"topKGlobal\x123\n" +
	"\n" +
	"topKEntity\x18\a \x03(\v2\x13.problems.UserScoreR\n" +
	"topKEntity\"Q\n" +
	"\tUserScore\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x01R\x05score\x12\x16\n" +
	"\x06entity\x18\x03 \x01(\tR\x06entity\"~\n" +
	" GetMonthlyActivityHeatmapRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05month\x18\x02 \x01(\x05R\x05month\x12\x12\n" +
	"\x04year\x18\x03 \x01(\x05R\x04year\x12\x18\n" +
	"\atraceId\x18\x04 \x01(\tR\atraceId\"S\n" +
	"\vActivityDay\x12\x12\n" +
	"\x04date\x18\x01 \x01(\tR\x04date\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12\x1a\n" +
	"\bisActive\x18\x03 \x01(\bR\bisActive\"N\n" +
	"!GetMonthlyActivityHeatmapResponse\x12)\n" +
	"\x04data\x18\x01 \x03(\v2\x15.problems.ActivityDayR\x04data\"\xdb\x01\n" +
	"$GetLeaderBoardOptionalCountryRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x03R\x04page\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x03R\x05limit\x12\x1d\n" +
	"\acountry\x18\x03 \x01(\tH\x00R\acountry\x88\x01\x01\x12\x1f\n" +
	"\busername\x18\x04 \x01(\tH\x01R\busername\x88\x01\x01\x12\x16\n" +
	"\x06userId\x18\x05 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceId\x18\x06 \x01(\tR\atraceIdB\n" +
	"\n" +
	"\b_countryB\v\n" +
	"\t_username\"\x8c\x01\n" +
	"%GetLeaderBoardOptionalCountryResponse\x12/\n" +
	"\x04data\x18\x01 \x01(\v2\x1b.problems.LeaderboardSingleR\x04data\x12#\n" +
	"\n" +
	"filterType\x18\x02 \x01(\tH\x00R\n" +
	"filterType\x88\x01\x01B\r\n" +
	"\v_filterType\"\x86\x01\n" +
	"\x11LeaderboardSingle\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12%\n" +
	"\vcountryRank\x18\x02 \x01(\x03H\x00R\vcountryRank\x88\x01\x01\x12\x1e\n" +
	"\n" +
	"globalRank\x18\x03 \x01(\x03R\n" +
	"globalRankB\x0e\n" +
	"\f_countryRank\"\x82\x01\n" +
	" GetProblemsDoneStatisticsRequest\x12\x1f\n" +
	"\busername\x18\x01 \x01(\tH\x00R\busername\x88\x01\x01\x12\x16\n" +
	"\x06userId\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceId\x18\x03 \x01(\tR\atraceIdB\v\n" +
	"\t_username\"Y\n" +
	"!GetProblemsDoneStatisticsResponse\x124\n" +
	"\x04data\x18\x01 \x01(\v2 .problems.ProblemsDoneStatisticsR\x04data\"\xfe\x01\n" +
	"\x16ProblemsDoneStatistics\x12\"\n" +
	"\fmaxEasyCount\x18\x01 \x01(\x05R\fmaxEasyCount\x12$\n" +
	"\rdoneEasyCount\x18\x02 \x01(\x05R\rdoneEasyCount\x12&\n" +
	"\x0emaxMediumCount\x18\x03 \x01(\x05R\x0emaxMediumCount\x12(\n" +
	"\x0fdoneMediumCount\x18\x04 \x01(\x05R\x0fdoneMediumCount\x12\"\n" +
	"\fmaxHardCount\x18\x05 \x01(\x05R\fmaxHardCount\x12$\n" +
	"\rdoneHardCount\x18\x06 \x01(\x05R\rdoneHardCount\";\n" +
	"\tTimestamp\x12\x18\n" +
	"\aseconds\x18\x01 \x01(\x03R\aseconds\x12\x14\n" +
	"\x05nanos\x18\x02 \x01(\x05R\x05nanos\"L\n" +
	"\bTestCase\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05input\x18\x02 \x01(\tR\x05input\x12\x1a\n" +
	"\bexpected\x18\x03 \x01(\tR\bexpected\"]\n" +
	"\tTestCases\x12$\n" +
	"\x03run\x18\x01 \x03(\v2\x12.problems.TestCaseR\x03run\x12*\n" +
	"\x06submit\x18\x02 \x03(\v2\x12.problems.TestCaseR\x06submit\"7\n" +
	"\x0fTestCaseRunOnly\x12$\n" +
	"\x03run\x18\x01 \x03(\v2\x12.problems.TestCaseR\x03run\"b\n" +
	"\x0eValidationCode\x12 \n" +
	"\vplaceholder\x18\x01 \x01(\tR\vplaceholder\x12\x12\n" +
	"\x04code\x18\x02 \x01(\tR\x04code\x12\x1a\n" +
	"\btemplate\x18\x03 \x01(\tR\btemplate\"\x9c\x01\n" +
	"\x14CreateProblemRequest\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\tR\n" +
	"difficulty\x12\x18\n" +
	"\atraceId\x18\x05 \x01(\tR\atraceId\"\x9d\x02\n" +
	"\x14UpdateProblemRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x19\n" +
	"\x05title\x18\x02 \x01(\tH\x00R\x05title\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x03 \x01(\tH\x01R\vdescription\x88\x01\x01\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12#\n" +
	"\n" +
	"difficulty\x18\x05 \x01(\tH\x02R\n" +
	"difficulty\x88\x01\x01\x12\x1d\n" +
	"\avisible\x18\x06 \x01(\bH\x03R\avisible\x88\x01\x01\x12\x18\n" +
	"\atraceId\x18\a \x01(\tR\atraceIdB\b\n" +
	"\x06_titleB\x0e\n" +
	"\f_descriptionB\r\n" +
	"\v_difficultyB\n" +
	"\n" +
	"\b_visible\"N\n" +
	"\x14DeleteProblemRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\atraceId\x18\x02 \x01(\tR\atraceId\"K\n" +
	"\x11GetProblemRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\atraceId\x18\x02 \x01(\tR\atraceId\"\xcf\x01\n" +
	"\x13ListProblemsRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1a\n" +
	"\bpageSize\x18\x02 \x01(\x05R\bpageSize\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\tR\n" +
	"difficulty\x12 \n" +
	"\vsearchQuery\x18\x05 \x01(\tR\vsearchQuery\x12\x18\n" +
	"\atraceId\x18\x06 \x01(\tR\atraceId\x12\x18\n" +
	"\aisAdmin\x18\a \x01(\bR\aisAdmin\"\x80\x01\n" +
	"\x13AddTestCasesRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x121\n" +
	"\ttestcases\x18\x02 \x01(\v2\x13.problems.TestCasesR\ttestcases\x12\x18\n" +
	"\atraceId\x18\x03 \x01(\tR\atraceId\"\xb1\x01\n" +
	"\x19AddLanguageSupportRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12@\n" +
	"\x0evalidationCode\x18\x03 \x01(\v2\x18.problems.ValidationCodeR\x0evalidationCode\x12\x18\n" +
	"\atraceId\x18\x04 \x01(\tR\atraceId\"\xb4\x01\n" +
	"\x1cUpdateLanguageSupportRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12@\n" +
	"\x0evalidationCode\x18\x03 \x01(\v2\x18.problems.ValidationCodeR\x0evalidationCode\x12\x18\n" +
	"\atraceId\x18\x04 \x01(\tR\atraceId\"r\n" +
	"\x1cRemoveLanguageSupportRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12\x18\n" +
	"\atraceId\x18\x03 \x01(\tR\atraceId\"\xb5\x05\n" +
	"\aProblem\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x121\n" +
	"\tcreatedAt\x18\x02 \x01(\v2\x13.problems.TimestampR\tcreatedAt\x121\n" +
	"\tupdatedAt\x18\x03 \x01(\v2\x13.problems.TimestampR\tupdatedAt\x126\n" +
	"\tdeletedAt\x18\x04 \x01(\v2\x13.problems.TimestampH\x00R\tdeletedAt\x88\x01\x01\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\a \x03(\tR\x04tags\x121\n" +
	"\ttestcases\x18\b \x01(\v2\x13.problems.TestCasesR\ttestcases\x12\x1e\n" +
	"\n" +
	"difficulty\x18\t \x01(\tR\n" +
	"difficulty\x12.\n" +
	"\x12supportedLanguages\x18\n" +
	" \x03(\tR\x12supportedLanguages\x12G\n" +
	"\fvalidateCode\x18\v \x03(\v2#.problems.Problem.ValidateCodeEntryR\fvalidateCode\x12\x1c\n" +
	"\tvalidated\x18\f \x01(\bR\tvalidated\x125\n" +
	"\vvalidatedAt\x18\r \x01(\v2\x13.problems.TimestampR\vvalidatedAt\x12\x18\n" +
	"\avisible\x18\x0e \x01(\bR\avisible\x1aY\n" +
	"\x11ValidateCodeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.problems.ValidationCodeR\x05value:\x028\x01B\f\n" +
	"\n" +
	"_deletedAt\"\x87\x01\n" +
	"\x15CreateProblemResponse\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x04 \x01(\tR\terrorType\"i\n" +
	"\x15UpdateProblemResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x03 \x01(\tR\terrorType\"i\n" +
	"\x15DeleteProblemResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x03 \x01(\tR\terrorType\"_\n" +
	"\x12GetProblemResponse\x12+\n" +
	"\aproblem\x18\x01 \x01(\v2\x11.problems.ProblemR\aproblem\x12\x1c\n" +
	"\terrorType\x18\x02 \x01(\tR\terrorType\"\xb3\x01\n" +
	"\x14ListProblemsResponse\x12-\n" +
	"\bproblems\x18\x01 \x03(\v2\x11.problems.ProblemR\bproblems\x12\x1e\n" +
	"\n" +
	"totalCount\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1a\n" +
	"\bpageSize\x18\x04 \x01(\x05R\bpageSize\x12\x1c\n" +
	"\terrorType\x18\x05 \x01(\tR\terrorType\"\x88\x01\n" +
	"\x14AddTestCasesResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1e\n" +
	"\n" +
	"addedCount\x18\x03 \x01(\x05R\n" +
	"addedCount\x12\x1c\n" +
	"\terrorType\x18\x04 \x01(\tR\terrorType\"n\n" +
	"\x1aAddLanguageSupportResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x03 \x01(\tR\terrorType\"q\n" +
	"\x1dUpdateLanguageSupportResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x03 \x01(\tR\terrorType\"q\n" +
	"\x1dRemoveLanguageSupportResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x03 \x01(\tR\terrorType\"\x95\x01\n" +
	"\x15DeleteTestCaseRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x1e\n" +
	"\n" +
	"testcaseId\x18\x02 \x01(\tR\n" +
	"testcaseId\x12$\n" +
	"\risRunTestcase\x18\x03 \x01(\bR\risRunTestcase\x12\x18\n" +
	"\atraceId\x18\x04 \x01(\tR\atraceId\"j\n" +
	"\x16DeleteTestCaseResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x03 \x01(\tR\terrorType\"T\n" +
	"\x1aGetLanguageSupportsRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\atraceId\x18\x02 \x01(\tR\atraceId\"\xd7\x02\n" +
	"\x1bGetLanguageSupportsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12.\n" +
	"\x12supportedLanguages\x18\x03 \x03(\tR\x12supportedLanguages\x12[\n" +
	"\fvalidateCode\x18\x04 \x03(\v27.problems.GetLanguageSupportsResponse.ValidateCodeEntryR\fvalidateCode\x12\x1c\n" +
	"\terrorType\x18\x05 \x01(\tR\terrorType\x1aY\n" +
	"\x11ValidateCodeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.problems.ValidationCodeR\x05value:\x028\x01\"Z\n" +
	" FullValidationByProblemIdRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\atraceId\x18\x02 \x01(\tR\atraceId\"u\n" +
	"!FullValidationByProblemIdResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x03 \x01(\tR\terrorType\"\xe3\x02\n" +
	"\x11RunProblemRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\buserCode\x18\x02 \x01(\tR\buserCode\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\tR\blanguage\x12$\n" +
	"\risRunTestcase\x18\x04 \x01(\bR\risRunTestcase\x12\x16\n" +
	"\x06userId\x18\x05 \x01(\tR\x06userId\x12\x1d\n" +
	"\acountry\x18\x06 \x01(\tH\x00R\acountry\x88\x01\x01\x12%\n" +
	"\visChallenge\x18\a \x01(\tH\x01R\visChallenge\x88\x01\x01\x12+\n" +
	"\x0echallengeToken\x18\b \x01(\tH\x02R\x0echallengeToken\x88\x01\x01\x12\x18\n" +
	"\atraceId\x18\t \x01(\tR\atraceIdB\n" +
	"\n" +
	"\b_countryB\x0e\n" +
	"\f_isChallengeB\x11\n" +
	"\x0f_challengeToken\"\xc6\x01\n" +
	"\x12RunProblemResponse\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12$\n" +
	"\risRunTestcase\x18\x03 \x01(\bR\risRunTestcase\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x06 \x01(\tR\terrorType\"\x9f\x03\n" +
	"\n" +
	"Submission\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1c\n" +
	"\tproblemId\x18\x02 \x01(\tR\tproblemId\x12\x16\n" +
	"\x06userId\x18\x03 \x01(\tR\x06userId\x12 \n" +
	"\vchallengeId\x18\x04 \x01(\tR\vchallengeId\x125\n" +
	"\vsubmittedAt\x18\x05 \x01(\v2\x13.problems.TimestampR\vsubmittedAt\x12\x14\n" +
	"\x05score\x18\x06 \x01(\x05R\x05score\x12\x16\n" +
	"\x06status\x18\a \x01(\tR\x06status\x12\x16\n" +
	"\x06output\x18\b \x01(\tR\x06output\x12\x1a\n" +
	"\blanguage\x18\t \x01(\tR\blanguage\x12$\n" +
	"\rexecutionTime\x18\n" +
	" \x01(\x02R\rexecutionTime\x12\x1e\n" +
	"\n" +
	"difficulty\x18\v \x01(\tR\n" +
	"difficulty\x12\x18\n" +
	"\aisFirst\x18\f \x01(\bR\aisFirst\x12\x14\n" +
	"\x05title\x18\r \x01(\tR\x05title\x12\x1a\n" +
	"\buserCode\x18\x0e \x01(\tR\buserCode\"\xa4\x01\n" +
	"\x15GetSubmissionsRequest\x12!\n" +
	"\tproblemId\x18\x01 \x01(\tH\x00R\tproblemId\x88\x01\x01\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06userId\x18\x04 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceId\x18\x05 \x01(\tR\atraceIdB\f\n" +
	"\n" +
	"_problemId\"\xa2\x01\n" +
	"\x16GetSubmissionsResponse\x126\n" +
	"\vsubmissions\x18\x01 \x03(\v2\x14.problems.SubmissionR\vsubmissions\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1c\n" +
	"\terrorType\x18\x04 \x01(\tR\terrorType\"u\n" +
	"\x19GetProblemByIdSlugRequest\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x17\n" +
	"\x04slug\x18\x02 \x01(\tH\x00R\x04slug\x88\x01\x01\x12\x18\n" +
	"\atraceId\x18\x03 \x01(\tR\atraceIdB\a\n" +
	"\x05_slug\"\x7f\n" +
	"\x1aGetProblemByIdSlugResponse\x12G\n" +
	"\x0fproblemMetadata\x18\x01 \x01(\v2\x1d.problems.ProblemMetadataLiteR\x0fproblemMetadata\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xd9\x01\n" +
	"\x1dGetProblemMetadataListRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1a\n" +
	"\bpageSize\x18\x02 \x01(\x05R\bpageSize\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\tR\n" +
	"difficulty\x12 \n" +
	"\vsearchQuery\x18\x05 \x01(\tR\vsearchQuery\x12\x18\n" +
	"\atraceId\x18\x06 \x01(\tR\atraceId\x12\x18\n" +
	"\aisAdmin\x18\a \x01(\bR\aisAdmin\"\x83\x01\n" +
	"\x1eGetProblemMetadataListResponse\x12G\n" +
	"\x0fproblemMetadata\x18\x01 \x03(\v2\x1d.problems.ProblemMetadataLiteR\x0fproblemMetadata\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xe6\x03\n" +
	"\x13ProblemMetadataLite\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12;\n" +
	"\vtestcaseRun\x18\x05 \x01(\v2\x19.problems.TestCaseRunOnlyR\vtestcaseRun\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x06 \x01(\tR\n" +
	"difficulty\x12.\n" +
	"\x12supportedLanguages\x18\a \x03(\tR\x12supportedLanguages\x12\x1c\n" +
	"\tvalidated\x18\b \x01(\bR\tvalidated\x12\\\n" +
	"\x0fplaceholderMaps\x18\t \x03(\v22.problems.ProblemMetadataLite.PlaceholderMapsEntryR\x0fplaceholderMaps\x12\x18\n" +
	"\avisible\x18\n" +
	" \x01(\bR\avisible\x1aB\n" +
	"\x14PlaceholderMapsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\xde\x16\n" +
	"\x0fProblemsService\x12P\n" +
	"\rCreateProblem\x12\x1e.problems.CreateProblemRequest\x1a\x1f.problems.CreateProblemResponse\x12P\n" +
	"\rUpdateProblem\x12\x1e.problems.UpdateProblemRequest\x1a\x1f.problems.UpdateProblemResponse\x12P\n" +
	"\rDeleteProblem\x12\x1e.problems.DeleteProblemRequest\x1a\x1f.problems.DeleteProblemResponse\x12G\n" +
	"\n" +
	"GetProblem\x12\x1b.problems.GetProblemRequest\x1a\x1c.problems.GetProblemResponse\x12M\n" +
	"\fListProblems\x12\x1d.problems.ListProblemsRequest\x1a\x1e.problems.ListProblemsResponse\x12_\n" +
	"\x12GetProblemByIdSlug\x12#.problems.GetProblemByIdSlugRequest\x1a$.problems.GetProblemByIdSlugResponse\x12k\n" +
	"\x16GetProblemMetadataList\x12'.problems.GetProblemMetadataListRequest\x1a(.problems.GetProblemMetadataListResponse\x12M\n" +
	"\fAddTestCases\x12\x1d.problems.AddTestCasesRequest\x1a\x1e.problems.AddTestCasesResponse\x12S\n" +
	"\x0eDeleteTestCase\x12\x1f.problems.DeleteTestCaseRequest\x1a .problems.DeleteTestCaseResponse\x12b\n" +
	"\x13GetLanguageSupports\x12$.problems.GetLanguageSupportsRequest\x1a%.problems.GetLanguageSupportsResponse\x12_\n" +
	"\x12AddLanguageSupport\x12#.problems.AddLanguageSupportRequest\x1a$.problems.AddLanguageSupportResponse\x12h\n" +
	"\x15UpdateLanguageSupport\x12&.problems.UpdateLanguageSupportRequest\x1a'.problems.UpdateLanguageSupportResponse\x12h\n" +
	"\x15RemoveLanguageSupport\x12&.problems.RemoveLanguageSupportRequest\x1a'.problems.RemoveLanguageSupportResponse\x12t\n" +
	"\x19FullValidationByProblemId\x12*.problems.FullValidationByProblemIdRequest\x1a+.problems.FullValidationByProblemIdResponse\x12O\n" +
	"\x12RunUserCodeProblem\x12\x1b.problems.RunProblemRequest\x1a\x1c.problems.RunProblemResponse\x12f\n" +
	"!GetSubmissionsByOptionalProblemId\x12\x1f.problems.GetSubmissionsRequest\x1a .problems.GetSubmissionsResponse\x12_\n" +
	"\x12GetSubmissionsById\x12#.problems.GetSubmissionsByIdRequest\x1a$.problems.GetSubmissionsByIdResponse\x12t\n" +
	"\x19GetProblemsDoneStatistics\x12*.problems.GetProblemsDoneStatisticsRequest\x1a+.problems.GetProblemsDoneStatisticsResponse\x12\x8c\x01\n" +
	"!ForceChangeUserEntityInSubmission\x122.problems.ForceChangeUserEntityInSubmissionRequest\x1a3.problems.ForceChangeUserEntityInSubmissionResponse\x12t\n" +
	"\x19GetMonthlyActivityHeatmap\x12*.problems.GetMonthlyActivityHeatmapRequest\x1a+.problems.GetMonthlyActivityHeatmapResponse\x12P\n" +
	"\rGetTopKGlobal\x12\x1e.problems.GetTopKGlobalRequest\x1a\x1f.problems.GetTopKGlobalResponse\x12P\n" +
	"\rGetTopKEntity\x12\x1e.problems.GetTopKEntityRequest\x1a\x1f.problems.GetTopKEntityResponse\x12J\n" +
	"\vGetUserRank\x12\x1c.problems.GetUserRankRequest\x1a\x1d.problems.GetUserRankResponse\x12_\n" +
	"\x12GetLeaderboardData\x12#.problems.GetLeaderboardDataRequest\x1a$.problems.GetLeaderboardDataResponse\x12k\n" +
	"\x16GetBulkProblemMetadata\x12'.problems.GetBulkProblemMetadataRequest\x1a(.problems.GetBulkProblemMetadataResponse\x12w\n" +
	"\x1aVerifyProblemExistenceBulk\x12+.problems.VerifyProblemExistenceBulkRequest\x1a,.problems.VerifyProblemExistenceBulkResponse\x12\x9b\x01\n" +
	"&RandomProblemIdsGenWithDifficultyRatio\x127.problems.RandomProblemIdsGenWithDifficultyRatioRequest\x1a8.problems.RandomProblemIdsGenWithDifficultyRatioResponse\x12k\n" +
	"\x16ProblemIdsDoneByUserId\x12'.problems.ProblemIdsDoneByUserIdRequest\x1a(.problems.ProblemIdsDoneByUserIdResponse\x12e\n" +
	"\x14ProblemCountMetadata\x12%.problems.ProblemCountMetadataRequest\x1a&.problems.ProblemCountMetadataResponseB\tZ\a./protob\x06proto3"

var (
	file_ProblemsService_problemsservice_proto_rawDescOnce sync.Once
	file_ProblemsService_problemsservice_proto_rawDescData []byte
)

func file_ProblemsService_problemsservice_proto_rawDescGZIP() []byte {
	file_ProblemsService_problemsservice_proto_rawDescOnce.Do(func() {
		file_ProblemsService_problemsservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ProblemsService_problemsservice_proto_rawDesc), len(file_ProblemsService_problemsservice_proto_rawDesc)))
	})
	return file_ProblemsService_problemsservice_proto_rawDescData
}

var file_ProblemsService_problemsservice_proto_msgTypes = make([]protoimpl.MessageInfo, 79)
var file_ProblemsService_problemsservice_proto_goTypes = []any{
	(*ProblemCountMetadataRequest)(nil),                    // 0: problems.ProblemCountMetadataRequest
	(*ProblemCountMetadataResponse)(nil),                   // 1: problems.ProblemCountMetadataResponse
	(*RandomProblemIdsGenWithDifficultyRatioRequest)(nil),  // 2: problems.RandomProblemIdsGenWithDifficultyRatioRequest
	(*ProblemDifficultyRatio)(nil),                         // 3: problems.ProblemDifficultyRatio
	(*RandomProblemIdsGenWithDifficultyRatioResponse)(nil), // 4: problems.RandomProblemIdsGenWithDifficultyRatioResponse
	(*ProblemMetadata)(nil),                                // 5: problems.ProblemMetadata
	(*VerifyProblemExistenceBulkRequest)(nil),              // 6: problems.VerifyProblemExistenceBulkRequest
	(*VerifyProblemExistenceBulkResponse)(nil),             // 7: problems.VerifyProblemExistenceBulkResponse
	(*ProblemIdsDoneByUserIdRequest)(nil),                  // 8: problems.ProblemIdsDoneByUserIdRequest
	(*ProblemIdsDoneByUserIdResponse)(nil),                 // 9: problems.ProblemIdsDoneByUserIdResponse
	(*GetSubmissionsByIdRequest)(nil),                      // 10: problems.GetSubmissionsByIdRequest
	(*GetSubmissionsByIdResponse)(nil),                     // 11: problems.GetSubmissionsByIdResponse
	(*ForceChangeUserEntityInSubmissionRequest)(nil),       // 12: problems.ForceChangeUserEntityInSubmissionRequest
	(*ForceChangeUserEntityInSubmissionResponse)(nil),      // 13: problems.ForceChangeUserEntityInSubmissionResponse
	(*GetBulkProblemMetadataRequest)(nil),                  // 14: problems.GetBulkProblemMetadataRequest
	(*GetBulkProblemMetadataResponse)(nil),                 // 15: problems.GetBulkProblemMetadataResponse
	(*BulkProblemMetadata)(nil),                            // 16: problems.BulkProblemMetadata
	(*GetTopKGlobalRequest)(nil),                           // 17: problems.GetTopKGlobalRequest
	(*GetTopKGlobalResponse)(nil),                          // 18: problems.GetTopKGlobalResponse
	(*GetTopKEntityRequest)(nil),                           // 19: problems.GetTopKEntityRequest
	(*GetTopKEntityResponse)(nil),                          // 20: problems.GetTopKEntityResponse
	(*GetUserRankRequest)(nil),                             // 21: problems.GetUserRankRequest
	(*GetUserRankResponse)(nil),                            // 22: problems.GetUserRankResponse
	(*GetLeaderboardDataRequest)(nil),                      // 23: problems.GetLeaderboardDataRequest
	(*GetLeaderboardDataResponse)(nil),                     // 24: problems.GetLeaderboardDataResponse
	(*UserScore)(nil),                                      // 25: problems.UserScore
	(*GetMonthlyActivityHeatmapRequest)(nil),               // 26: problems.GetMonthlyActivityHeatmapRequest
	(*ActivityDay)(nil),                                    // 27: problems.ActivityDay
	(*GetMonthlyActivityHeatmapResponse)(nil),              // 28: problems.GetMonthlyActivityHeatmapResponse
	(*GetLeaderBoardOptionalCountryRequest)(nil),           // 29: problems.GetLeaderBoardOptionalCountryRequest
	(*GetLeaderBoardOptionalCountryResponse)(nil),          // 30: problems.GetLeaderBoardOptionalCountryResponse
	(*LeaderboardSingle)(nil),                              // 31: problems.LeaderboardSingle
	(*GetProblemsDoneStatisticsRequest)(nil),               // 32: problems.GetProblemsDoneStatisticsRequest
	(*GetProblemsDoneStatisticsResponse)(nil),              // 33: problems.GetProblemsDoneStatisticsResponse
	(*ProblemsDoneStatistics)(nil),                         // 34: problems.ProblemsDoneStatistics
	(*Timestamp)(nil),                                      // 35: problems.Timestamp
	(*TestCase)(nil),                                       // 36: problems.TestCase
	(*TestCases)(nil),                                      // 37: problems.TestCases
	(*TestCaseRunOnly)(nil),                                // 38: problems.TestCaseRunOnly
	(*ValidationCode)(nil),                                 // 39: problems.ValidationCode
	(*CreateProblemRequest)(nil),                           // 40: problems.CreateProblemRequest
	(*UpdateProblemRequest)(nil),                           // 41: problems.UpdateProblemRequest
	(*DeleteProblemRequest)(nil),                           // 42: problems.DeleteProblemRequest
	(*GetProblemRequest)(nil),                              // 43: problems.GetProblemRequest
	(*ListProblemsRequest)(nil),                            // 44: problems.ListProblemsRequest
	(*AddTestCasesRequest)(nil),                            // 45: problems.AddTestCasesRequest
	(*AddLanguageSupportRequest)(nil),                      // 46: problems.AddLanguageSupportRequest
	(*UpdateLanguageSupportRequest)(nil),                   // 47: problems.UpdateLanguageSupportRequest
	(*RemoveLanguageSupportRequest)(nil),                   // 48: problems.RemoveLanguageSupportRequest
	(*Problem)(nil),                                        // 49: problems.Problem
	(*CreateProblemResponse)(nil),                          // 50: problems.CreateProblemResponse
	(*UpdateProblemResponse)(nil),                          // 51: problems.UpdateProblemResponse
	(*DeleteProblemResponse)(nil),                          // 52: problems.DeleteProblemResponse
	(*GetProblemResponse)(nil),                             // 53: problems.GetProblemResponse
	(*ListProblemsResponse)(nil),                           // 54: problems.ListProblemsResponse
	(*AddTestCasesResponse)(nil),                           // 55: problems.AddTestCasesResponse
	(*AddLanguageSupportResponse)(nil),                     // 56: problems.AddLanguageSupportResponse
	(*UpdateLanguageSupportResponse)(nil),                  // 57: problems.UpdateLanguageSupportResponse
	(*RemoveLanguageSupportResponse)(nil),                  // 58: problems.RemoveLanguageSupportResponse
	(*DeleteTestCaseRequest)(nil),                          // 59: problems.DeleteTestCaseRequest
	(*DeleteTestCaseResponse)(nil),                         // 60: problems.DeleteTestCaseResponse
	(*GetLanguageSupportsRequest)(nil),                     // 61: problems.GetLanguageSupportsRequest
	(*GetLanguageSupportsResponse)(nil),                    // 62: problems.GetLanguageSupportsResponse
	(*FullValidationByProblemIdRequest)(nil),               // 63: problems.FullValidationByProblemIdRequest
	(*FullValidationByProblemIdResponse)(nil),              // 64: problems.FullValidationByProblemIdResponse
	(*RunProblemRequest)(nil),                              // 65: problems.RunProblemRequest
	(*RunProblemResponse)(nil),                             // 66: problems.RunProblemResponse
	(*Submission)(nil),                                     // 67: problems.Submission
	(*GetSubmissionsRequest)(nil),                          // 68: problems.GetSubmissionsRequest
	(*GetSubmissionsResponse)(nil),                         // 69: problems.GetSubmissionsResponse
	(*GetProblemByIdSlugRequest)(nil),                      // 70: problems.GetProblemByIdSlugRequest
	(*GetProblemByIdSlugResponse)(nil),                     // 71: problems.GetProblemByIdSlugResponse
	(*GetProblemMetadataListRequest)(nil),                  // 72: problems.GetProblemMetadataListRequest
	(*GetProblemMetadataListResponse)(nil),                 // 73: problems.GetProblemMetadataListResponse
	(*ProblemMetadataLite)(nil),                            // 74: problems.ProblemMetadataLite
	nil,                                                    // 75: problems.VerifyProblemExistenceBulkResponse.ProblemExistenceEntry
	nil,                                                    // 76: problems.Problem.ValidateCodeEntry
	nil,                                                    // 77: problems.GetLanguageSupportsResponse.ValidateCodeEntry
	nil,                                                    // 78: problems.ProblemMetadataLite.PlaceholderMapsEntry
}
var file_ProblemsService_problemsservice_proto_depIdxs = []int32{
	3,  // 0: problems.RandomProblemIdsGenWithDifficultyRatioRequest.qnRatio:type_name -> problems.ProblemDifficultyRatio
	3,  // 1: problems.RandomProblemIdsGenWithDifficultyRatioResponse.qnRatio:type_name -> problems.ProblemDifficultyRatio
	38, // 2: problems.ProblemMetadata.testcaseRun:type_name -> problems.TestCaseRunOnly
	75, // 3: problems.VerifyProblemExistenceBulkResponse.problemExistence:type_name -> problems.VerifyProblemExistenceBulkResponse.ProblemExistenceEntry
	67, // 4: problems.GetSubmissionsByIdResponse.submission:type_name -> problems.Submission
	16, // 5: problems.GetBulkProblemMetadataResponse.bulkProblemMetadata:type_name -> problems.BulkProblemMetadata
	25, // 6: problems.GetTopKGlobalResponse.users:type_name -> problems.UserScore
	25, // 7: problems.GetTopKEntityResponse.users:type_name -> problems.UserScore
	25, // 8: problems.GetLeaderboardDataResponse.topKGlobal:type_name -> problems.UserScore
	25, // 9: problems.GetLeaderboardDataResponse.topKEntity:type_name -> problems.UserScore
	27, // 10: problems.GetMonthlyActivityHeatmapResponse.data:type_name -> problems.ActivityDay
	31, // 11: problems.GetLeaderBoardOptionalCountryResponse.data:type_name -> problems.LeaderboardSingle
	34, // 12: problems.GetProblemsDoneStatisticsResponse.data:type_name -> problems.ProblemsDoneStatistics
	36, // 13: problems.TestCases.run:type_name -> problems.TestCase
	36, // 14: problems.TestCases.submit:type_name -> problems.TestCase
	36, // 15: problems.TestCaseRunOnly.run:type_name -> problems.TestCase
	37, // 16: problems.AddTestCasesRequest.testcases:type_name -> problems.TestCases
	39, // 17: problems.AddLanguageSupportRequest.validationCode:type_name -> problems.ValidationCode
	39, // 18: problems.UpdateLanguageSupportRequest.validationCode:type_name -> problems.ValidationCode
	35, // 19: problems.Problem.createdAt:type_name -> problems.Timestamp
	35, // 20: problems.Problem.updatedAt:type_name -> problems.Timestamp
	35, // 21: problems.Problem.deletedAt:type_name -> problems.Timestamp
	37, // 22: problems.Problem.testcases:type_name -> problems.TestCases
	76, // 23: problems.Problem.validateCode:type_name -> problems.Problem.ValidateCodeEntry
	35, // 24: problems.Problem.validatedAt:type_name -> problems.Timestamp
	49, // 25: problems.GetProblemResponse.problem:type_name -> problems.Problem
	49, // 26: problems.ListProblemsResponse.problems:type_name -> problems.Problem
	77, // 27: problems.GetLanguageSupportsResponse.validateCode:type_name -> problems.GetLanguageSupportsResponse.ValidateCodeEntry
	35, // 28: problems.Submission.submittedAt:type_name -> problems.Timestamp
	67, // 29: problems.GetSubmissionsResponse.submissions:type_name -> problems.Submission
	74, // 30: problems.GetProblemByIdSlugResponse.problemMetadata:type_name -> problems.ProblemMetadataLite
	74, // 31: problems.GetProblemMetadataListResponse.problemMetadata:type_name -> problems.ProblemMetadataLite
	38, // 32: problems.ProblemMetadataLite.testcaseRun:type_name -> problems.TestCaseRunOnly
	78, // 33: problems.ProblemMetadataLite.placeholderMaps:type_name -> problems.ProblemMetadataLite.PlaceholderMapsEntry
	39, // 34: problems.Problem.ValidateCodeEntry.value:type_name -> problems.ValidationCode
	39, // 35: problems.GetLanguageSupportsResponse.ValidateCodeEntry.value:type_name -> problems.ValidationCode
	40, // 36: problems.ProblemsService.CreateProblem:input_type -> problems.CreateProblemRequest
	41, // 37: problems.ProblemsService.UpdateProblem:input_type -> problems.UpdateProblemRequest
	42, // 38: problems.ProblemsService.DeleteProblem:input_type -> problems.DeleteProblemRequest
	43, // 39: problems.ProblemsService.GetProblem:input_type -> problems.GetProblemRequest
	44, // 40: problems.ProblemsService.ListProblems:input_type -> problems.ListProblemsRequest
	70, // 41: problems.ProblemsService.GetProblemByIdSlug:input_type -> problems.GetProblemByIdSlugRequest
	72, // 42: problems.ProblemsService.GetProblemMetadataList:input_type -> problems.GetProblemMetadataListRequest
	45, // 43: problems.ProblemsService.AddTestCases:input_type -> problems.AddTestCasesRequest
	59, // 44: problems.ProblemsService.DeleteTestCase:input_type -> problems.DeleteTestCaseRequest
	61, // 45: problems.ProblemsService.GetLanguageSupports:input_type -> problems.GetLanguageSupportsRequest
	46, // 46: problems.ProblemsService.AddLanguageSupport:input_type -> problems.AddLanguageSupportRequest
	47, // 47: problems.ProblemsService.UpdateLanguageSupport:input_type -> problems.UpdateLanguageSupportRequest
	48, // 48: problems.ProblemsService.RemoveLanguageSupport:input_type -> problems.RemoveLanguageSupportRequest
	63, // 49: problems.ProblemsService.FullValidationByProblemId:input_type -> problems.FullValidationByProblemIdRequest
	65, // 50: problems.ProblemsService.RunUserCodeProblem:input_type -> problems.RunProblemRequest
	68, // 51: problems.ProblemsService.GetSubmissionsByOptionalProblemId:input_type -> problems.GetSubmissionsRequest
	10, // 52: problems.ProblemsService.GetSubmissionsById:input_type -> problems.GetSubmissionsByIdRequest
	32, // 53: problems.ProblemsService.GetProblemsDoneStatistics:input_type -> problems.GetProblemsDoneStatisticsRequest
	12, // 54: problems.ProblemsService.ForceChangeUserEntityInSubmission:input_type -> problems.ForceChangeUserEntityInSubmissionRequest
	26, // 55: problems.ProblemsService.GetMonthlyActivityHeatmap:input_type -> problems.GetMonthlyActivityHeatmapRequest
	17, // 56: problems.ProblemsService.GetTopKGlobal:input_type -> problems.GetTopKGlobalRequest
	19, // 57: problems.ProblemsService.GetTopKEntity:input_type -> problems.GetTopKEntityRequest
	21, // 58: problems.ProblemsService.GetUserRank:input_type -> problems.GetUserRankRequest
	23, // 59: problems.ProblemsService.GetLeaderboardData:input_type -> problems.GetLeaderboardDataRequest
	14, // 60: problems.ProblemsService.GetBulkProblemMetadata:input_type -> problems.GetBulkProblemMetadataRequest
	6,  // 61: problems.ProblemsService.VerifyProblemExistenceBulk:input_type -> problems.VerifyProblemExistenceBulkRequest
	2,  // 62: problems.ProblemsService.RandomProblemIdsGenWithDifficultyRatio:input_type -> problems.RandomProblemIdsGenWithDifficultyRatioRequest
	8,  // 63: problems.ProblemsService.ProblemIdsDoneByUserId:input_type -> problems.ProblemIdsDoneByUserIdRequest
	0,  // 64: problems.ProblemsService.ProblemCountMetadata:input_type -> problems.ProblemCountMetadataRequest
	50, // 65: problems.ProblemsService.CreateProblem:output_type -> problems.CreateProblemResponse
	51, // 66: problems.ProblemsService.UpdateProblem:output_type -> problems.UpdateProblemResponse
	52, // 67: problems.ProblemsService.DeleteProblem:output_type -> problems.DeleteProblemResponse
	53, // 68: problems.ProblemsService.GetProblem:output_type -> problems.GetProblemResponse
	54, // 69: problems.ProblemsService.ListProblems:output_type -> problems.ListProblemsResponse
	71, // 70: problems.ProblemsService.GetProblemByIdSlug:output_type -> problems.GetProblemByIdSlugResponse
	73, // 71: problems.ProblemsService.GetProblemMetadataList:output_type -> problems.GetProblemMetadataListResponse
	55, // 72: problems.ProblemsService.AddTestCases:output_type -> problems.AddTestCasesResponse
	60, // 73: problems.ProblemsService.DeleteTestCase:output_type -> problems.DeleteTestCaseResponse
	62, // 74: problems.ProblemsService.GetLanguageSupports:output_type -> problems.GetLanguageSupportsResponse
	56, // 75: problems.ProblemsService.AddLanguageSupport:output_type -> problems.AddLanguageSupportResponse
	57, // 76: problems.ProblemsService.UpdateLanguageSupport:output_type -> problems.UpdateLanguageSupportResponse
	58, // 77: problems.ProblemsService.RemoveLanguageSupport:output_type -> problems.RemoveLanguageSupportResponse
	64, // 78: problems.ProblemsService.FullValidationByProblemId:output_type -> problems.FullValidationByProblemIdResponse
	66, // 79: problems.ProblemsService.RunUserCodeProblem:output_type -> problems.RunProblemResponse
	69, // 80: problems.ProblemsService.GetSubmissionsByOptionalProblemId:output_type -> problems.GetSubmissionsResponse
	11, // 81: problems.ProblemsService.GetSubmissionsById:output_type -> problems.GetSubmissionsByIdResponse
	33, // 82: problems.ProblemsService.GetProblemsDoneStatistics:output_type -> problems.GetProblemsDoneStatisticsResponse
	13, // 83: problems.ProblemsService.ForceChangeUserEntityInSubmission:output_type -> problems.ForceChangeUserEntityInSubmissionResponse
	28, // 84: problems.ProblemsService.GetMonthlyActivityHeatmap:output_type -> problems.GetMonthlyActivityHeatmapResponse
	18, // 85: problems.ProblemsService.GetTopKGlobal:output_type -> problems.GetTopKGlobalResponse
	20, // 86: problems.ProblemsService.GetTopKEntity:output_type -> problems.GetTopKEntityResponse
	22, // 87: problems.ProblemsService.GetUserRank:output_type -> problems.GetUserRankResponse
	24, // 88: problems.ProblemsService.GetLeaderboardData:output_type -> problems.GetLeaderboardDataResponse
	15, // 89: problems.ProblemsService.GetBulkProblemMetadata:output_type -> problems.GetBulkProblemMetadataResponse
	7,  // 90: problems.ProblemsService.VerifyProblemExistenceBulk:output_type -> problems.VerifyProblemExistenceBulkResponse
	4,  // 91: problems.ProblemsService.RandomProblemIdsGenWithDifficultyRatio:output_type -> problems.RandomProblemIdsGenWithDifficultyRatioResponse
	9,  // 92: problems.ProblemsService.ProblemIdsDoneByUserId:output_type -> problems.ProblemIdsDoneByUserIdResponse
	1,  // 93: problems.ProblemsService.ProblemCountMetadata:output_type -> problems.ProblemCountMetadataResponse
	65, // [65:94] is the sub-list for method output_type
	36, // [36:65] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_ProblemsService_problemsservice_proto_init() }
func file_ProblemsService_problemsservice_proto_init() {
	if File_ProblemsService_problemsservice_proto != nil {
		return
	}
	file_ProblemsService_problemsservice_proto_msgTypes[29].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[30].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[31].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[32].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[41].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[49].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[65].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[68].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[70].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ProblemsService_problemsservice_proto_rawDesc), len(file_ProblemsService_problemsservice_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   79,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ProblemsService_problemsservice_proto_goTypes,
		DependencyIndexes: file_ProblemsService_problemsservice_proto_depIdxs,
		MessageInfos:      file_ProblemsService_problemsservice_proto_msgTypes,
	}.Build()
	File_ProblemsService_problemsservice_proto = out.File
	file_ProblemsService_problemsservice_proto_goTypes = nil
	file_ProblemsService_problemsservice_proto_depIdxs = nil
}
