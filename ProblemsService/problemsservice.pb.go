// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.6
// source: ProblemsService/problemsservice.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetLeaderBoardOptionalCountryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *LeaderboardSingle     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	FilterType    *string                `protobuf:"bytes,2,opt,name=filter_type,json=filterType,proto3,oneof" json:"filter_type,omitempty"` //country or global
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderBoardOptionalCountryResponse) Reset() {
	*x = GetLeaderBoardOptionalCountryResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderBoardOptionalCountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderBoardOptionalCountryResponse) ProtoMessage() {}

func (x *GetLeaderBoardOptionalCountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderBoardOptionalCountryResponse.ProtoReflect.Descriptor instead.
func (*GetLeaderBoardOptionalCountryResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{0}
}

func (x *GetLeaderBoardOptionalCountryResponse) GetData() *LeaderboardSingle {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetLeaderBoardOptionalCountryResponse) GetFilterType() string {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return ""
}

type LeaderboardSingle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	CountryRank   *int64                 `protobuf:"varint,2,opt,name=country_rank,json=countryRank,proto3,oneof" json:"country_rank,omitempty"`
	GlobalRank    int64                  `protobuf:"varint,3,opt,name=global_rank,json=globalRank,proto3" json:"global_rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderboardSingle) Reset() {
	*x = LeaderboardSingle{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardSingle) ProtoMessage() {}

func (x *LeaderboardSingle) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardSingle.ProtoReflect.Descriptor instead.
func (*LeaderboardSingle) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{1}
}

func (x *LeaderboardSingle) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LeaderboardSingle) GetCountryRank() int64 {
	if x != nil && x.CountryRank != nil {
		return *x.CountryRank
	}
	return 0
}

func (x *LeaderboardSingle) GetGlobalRank() int64 {
	if x != nil {
		return x.GlobalRank
	}
	return 0
}

type GetLeaderBoardOptionalCountryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int64                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Country       *string                `protobuf:"bytes,3,opt,name=country,proto3,oneof" json:"country,omitempty"`
	Username      *string                `protobuf:"bytes,4,opt,name=username,proto3,oneof" json:"username,omitempty"`
	UserId        string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderBoardOptionalCountryRequest) Reset() {
	*x = GetLeaderBoardOptionalCountryRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderBoardOptionalCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderBoardOptionalCountryRequest) ProtoMessage() {}

func (x *GetLeaderBoardOptionalCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderBoardOptionalCountryRequest.ProtoReflect.Descriptor instead.
func (*GetLeaderBoardOptionalCountryRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{2}
}

func (x *GetLeaderBoardOptionalCountryRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetLeaderBoardOptionalCountryRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetLeaderBoardOptionalCountryRequest) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *GetLeaderBoardOptionalCountryRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *GetLeaderBoardOptionalCountryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetProblemsDoneStatisticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      *string                `protobuf:"bytes,1,opt,name=username,proto3,oneof" json:"username,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemsDoneStatisticsRequest) Reset() {
	*x = GetProblemsDoneStatisticsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemsDoneStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsDoneStatisticsRequest) ProtoMessage() {}

func (x *GetProblemsDoneStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsDoneStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetProblemsDoneStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{3}
}

func (x *GetProblemsDoneStatisticsRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *GetProblemsDoneStatisticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserRankRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      *string                `protobuf:"bytes,1,opt,name=username,proto3,oneof" json:"username,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRankRequest) Reset() {
	*x = GetUserRankRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRankRequest) ProtoMessage() {}

func (x *GetUserRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRankRequest.ProtoReflect.Descriptor instead.
func (*GetUserRankRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserRankRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *GetUserRankRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetProblemsDoneStatisticsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Data          *ProblemsDoneStatistics `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemsDoneStatisticsResponse) Reset() {
	*x = GetProblemsDoneStatisticsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemsDoneStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsDoneStatisticsResponse) ProtoMessage() {}

func (x *GetProblemsDoneStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsDoneStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetProblemsDoneStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{5}
}

func (x *GetProblemsDoneStatisticsResponse) GetData() *ProblemsDoneStatistics {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProblemsDoneStatistics struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MaxEasyCount    int32                  `protobuf:"varint,1,opt,name=max_easy_count,json=maxEasyCount,proto3" json:"max_easy_count,omitempty"`
	DoneEasyCount   int32                  `protobuf:"varint,2,opt,name=done_easy_count,json=doneEasyCount,proto3" json:"done_easy_count,omitempty"`
	MaxMediumCount  int32                  `protobuf:"varint,3,opt,name=max_medium_count,json=maxMediumCount,proto3" json:"max_medium_count,omitempty"`
	DoneMediumCount int32                  `protobuf:"varint,4,opt,name=done_medium_count,json=doneMediumCount,proto3" json:"done_medium_count,omitempty"`
	MaxHardCount    int32                  `protobuf:"varint,5,opt,name=max_hard_count,json=maxHardCount,proto3" json:"max_hard_count,omitempty"`
	DoneHardCount   int32                  `protobuf:"varint,6,opt,name=done_hard_count,json=doneHardCount,proto3" json:"done_hard_count,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProblemsDoneStatistics) Reset() {
	*x = ProblemsDoneStatistics{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemsDoneStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemsDoneStatistics) ProtoMessage() {}

func (x *ProblemsDoneStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemsDoneStatistics.ProtoReflect.Descriptor instead.
func (*ProblemsDoneStatistics) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{6}
}

func (x *ProblemsDoneStatistics) GetMaxEasyCount() int32 {
	if x != nil {
		return x.MaxEasyCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetDoneEasyCount() int32 {
	if x != nil {
		return x.DoneEasyCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetMaxMediumCount() int32 {
	if x != nil {
		return x.MaxMediumCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetDoneMediumCount() int32 {
	if x != nil {
		return x.DoneMediumCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetMaxHardCount() int32 {
	if x != nil {
		return x.MaxHardCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetDoneHardCount() int32 {
	if x != nil {
		return x.DoneHardCount
	}
	return 0
}

type GetUserRankResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	CountryRank   int64                  `protobuf:"varint,2,opt,name=country_rank,json=countryRank,proto3" json:"country_rank,omitempty"`
	GlobalRank    int64                  `protobuf:"varint,3,opt,name=global_rank,json=globalRank,proto3" json:"global_rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRankResponse) Reset() {
	*x = GetUserRankResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRankResponse) ProtoMessage() {}

func (x *GetUserRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRankResponse.ProtoReflect.Descriptor instead.
func (*GetUserRankResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserRankResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserRankResponse) GetCountryRank() int64 {
	if x != nil {
		return x.CountryRank
	}
	return 0
}

func (x *GetUserRankResponse) GetGlobalRank() int64 {
	if x != nil {
		return x.GlobalRank
	}
	return 0
}

type Timestamp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seconds       int64                  `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos         int32                  `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{8}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type TestCase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Input         string                 `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Expected      string                 `protobuf:"bytes,3,opt,name=expected,proto3" json:"expected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{9}
}

func (x *TestCase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestCase) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TestCase) GetExpected() string {
	if x != nil {
		return x.Expected
	}
	return ""
}

type TestCases struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           []*TestCase            `protobuf:"bytes,1,rep,name=run,proto3" json:"run,omitempty"`
	Submit        []*TestCase            `protobuf:"bytes,2,rep,name=submit,proto3" json:"submit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCases) Reset() {
	*x = TestCases{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCases) ProtoMessage() {}

func (x *TestCases) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCases.ProtoReflect.Descriptor instead.
func (*TestCases) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{10}
}

func (x *TestCases) GetRun() []*TestCase {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *TestCases) GetSubmit() []*TestCase {
	if x != nil {
		return x.Submit
	}
	return nil
}

type TestCaseRunOnly struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           []*TestCase            `protobuf:"bytes,1,rep,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCaseRunOnly) Reset() {
	*x = TestCaseRunOnly{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCaseRunOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseRunOnly) ProtoMessage() {}

func (x *TestCaseRunOnly) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseRunOnly.ProtoReflect.Descriptor instead.
func (*TestCaseRunOnly) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{11}
}

func (x *TestCaseRunOnly) GetRun() []*TestCase {
	if x != nil {
		return x.Run
	}
	return nil
}

type ValidationCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Placeholder   string                 `protobuf:"bytes,1,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Template      string                 `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationCode) Reset() {
	*x = ValidationCode{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationCode) ProtoMessage() {}

func (x *ValidationCode) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationCode.ProtoReflect.Descriptor instead.
func (*ValidationCode) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{12}
}

func (x *ValidationCode) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *ValidationCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ValidationCode) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

type CreateProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    string                 `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProblemRequest) Reset() {
	*x = CreateProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemRequest) ProtoMessage() {}

func (x *CreateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{13}
}

func (x *CreateProblemRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateProblemRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateProblemRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateProblemRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

type UpdateProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Title         *string                `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    *string                `protobuf:"bytes,5,opt,name=difficulty,proto3,oneof" json:"difficulty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemRequest) Reset() {
	*x = UpdateProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemRequest) ProtoMessage() {}

func (x *UpdateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateProblemRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateProblemRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateProblemRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateProblemRequest) GetDifficulty() string {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return ""
}

type DeleteProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProblemRequest) Reset() {
	*x = DeleteProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemRequest) ProtoMessage() {}

func (x *DeleteProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type GetProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemRequest) Reset() {
	*x = GetProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemRequest) ProtoMessage() {}

func (x *GetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{16}
}

func (x *GetProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type ListProblemsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    string                 `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SearchQuery   string                 `protobuf:"bytes,5,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProblemsRequest) Reset() {
	*x = ListProblemsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsRequest) ProtoMessage() {}

func (x *ListProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsRequest.ProtoReflect.Descriptor instead.
func (*ListProblemsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{17}
}

func (x *ListProblemsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProblemsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListProblemsRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ListProblemsRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

type AddTestCasesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Testcases     *TestCases             `protobuf:"bytes,2,opt,name=testcases,proto3" json:"testcases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTestCasesRequest) Reset() {
	*x = AddTestCasesRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestCasesRequest) ProtoMessage() {}

func (x *AddTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestCasesRequest.ProtoReflect.Descriptor instead.
func (*AddTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{18}
}

func (x *AddTestCasesRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *AddTestCasesRequest) GetTestcases() *TestCases {
	if x != nil {
		return x.Testcases
	}
	return nil
}

type AddLanguageSupportRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProblemId      string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language       string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	ValidationCode *ValidationCode        `protobuf:"bytes,3,opt,name=validation_code,json=validationCode,proto3" json:"validation_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddLanguageSupportRequest) Reset() {
	*x = AddLanguageSupportRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLanguageSupportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLanguageSupportRequest) ProtoMessage() {}

func (x *AddLanguageSupportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLanguageSupportRequest.ProtoReflect.Descriptor instead.
func (*AddLanguageSupportRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{19}
}

func (x *AddLanguageSupportRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *AddLanguageSupportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AddLanguageSupportRequest) GetValidationCode() *ValidationCode {
	if x != nil {
		return x.ValidationCode
	}
	return nil
}

type UpdateLanguageSupportRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProblemId      string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language       string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	ValidationCode *ValidationCode        `protobuf:"bytes,3,opt,name=validation_code,json=validationCode,proto3" json:"validation_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateLanguageSupportRequest) Reset() {
	*x = UpdateLanguageSupportRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLanguageSupportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguageSupportRequest) ProtoMessage() {}

func (x *UpdateLanguageSupportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguageSupportRequest.ProtoReflect.Descriptor instead.
func (*UpdateLanguageSupportRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateLanguageSupportRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateLanguageSupportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UpdateLanguageSupportRequest) GetValidationCode() *ValidationCode {
	if x != nil {
		return x.ValidationCode
	}
	return nil
}

type RemoveLanguageSupportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveLanguageSupportRequest) Reset() {
	*x = RemoveLanguageSupportRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveLanguageSupportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLanguageSupportRequest) ProtoMessage() {}

func (x *RemoveLanguageSupportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLanguageSupportRequest.ProtoReflect.Descriptor instead.
func (*RemoveLanguageSupportRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{21}
}

func (x *RemoveLanguageSupportRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RemoveLanguageSupportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type Problem struct {
	state              protoimpl.MessageState     `protogen:"open.v1"`
	ProblemId          string                     `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	CreatedAt          *Timestamp                 `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *Timestamp                 `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt          *Timestamp                 `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Title              string                     `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                     `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Tags               []string                   `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Testcases          *TestCases                 `protobuf:"bytes,8,opt,name=testcases,proto3" json:"testcases,omitempty"`
	Difficulty         string                     `protobuf:"bytes,9,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SupportedLanguages []string                   `protobuf:"bytes,10,rep,name=supported_languages,json=supportedLanguages,proto3" json:"supported_languages,omitempty"`
	ValidateCode       map[string]*ValidationCode `protobuf:"bytes,11,rep,name=validate_code,json=validateCode,proto3" json:"validate_code,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Validated          bool                       `protobuf:"varint,12,opt,name=validated,proto3" json:"validated,omitempty"`
	ValidatedAt        *Timestamp                 `protobuf:"bytes,13,opt,name=validated_at,json=validatedAt,proto3" json:"validated_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Problem) Reset() {
	*x = Problem{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{22}
}

func (x *Problem) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Problem) GetCreatedAt() *Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Problem) GetUpdatedAt() *Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Problem) GetDeletedAt() *Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Problem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Problem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Problem) GetTestcases() *TestCases {
	if x != nil {
		return x.Testcases
	}
	return nil
}

func (x *Problem) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *Problem) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *Problem) GetValidateCode() map[string]*ValidationCode {
	if x != nil {
		return x.ValidateCode
	}
	return nil
}

func (x *Problem) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *Problem) GetValidatedAt() *Timestamp {
	if x != nil {
		return x.ValidatedAt
	}
	return nil
}

type ProblemMetadata struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProblemId          string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Title              string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tags               []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	TestcaseRun        *TestCaseRunOnly       `protobuf:"bytes,5,opt,name=testcase_run,json=testcaseRun,proto3" json:"testcase_run,omitempty"`
	Difficulty         string                 `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SupportedLanguages []string               `protobuf:"bytes,7,rep,name=supported_languages,json=supportedLanguages,proto3" json:"supported_languages,omitempty"`
	Validated          bool                   `protobuf:"varint,8,opt,name=validated,proto3" json:"validated,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProblemMetadata) Reset() {
	*x = ProblemMetadata{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemMetadata) ProtoMessage() {}

func (x *ProblemMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemMetadata.ProtoReflect.Descriptor instead.
func (*ProblemMetadata) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{23}
}

func (x *ProblemMetadata) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ProblemMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProblemMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProblemMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProblemMetadata) GetTestcaseRun() *TestCaseRunOnly {
	if x != nil {
		return x.TestcaseRun
	}
	return nil
}

func (x *ProblemMetadata) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ProblemMetadata) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *ProblemMetadata) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

type CreateProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProblemResponse) Reset() {
	*x = CreateProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemResponse) ProtoMessage() {}

func (x *CreateProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemResponse.ProtoReflect.Descriptor instead.
func (*CreateProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{24}
}

func (x *CreateProblemResponse) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type UpdateProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemResponse) Reset() {
	*x = UpdateProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemResponse) ProtoMessage() {}

func (x *UpdateProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemResponse.ProtoReflect.Descriptor instead.
func (*UpdateProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type DeleteProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProblemResponse) Reset() {
	*x = DeleteProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemResponse) ProtoMessage() {}

func (x *DeleteProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemResponse.ProtoReflect.Descriptor instead.
func (*DeleteProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type GetProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Problem       *Problem               `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	ErrorType     string                 `protobuf:"bytes,2,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemResponse) Reset() {
	*x = GetProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemResponse) ProtoMessage() {}

func (x *GetProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemResponse.ProtoReflect.Descriptor instead.
func (*GetProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{27}
}

func (x *GetProblemResponse) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

func (x *GetProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type ListProblemsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Problems      []*Problem             `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ErrorType     string                 `protobuf:"bytes,5,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProblemsResponse) Reset() {
	*x = ListProblemsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProblemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsResponse) ProtoMessage() {}

func (x *ListProblemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsResponse.ProtoReflect.Descriptor instead.
func (*ListProblemsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{28}
}

func (x *ListProblemsResponse) GetProblems() []*Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *ListProblemsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListProblemsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProblemsResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type AddTestCasesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AddedCount    int32                  `protobuf:"varint,3,opt,name=added_count,json=addedCount,proto3" json:"added_count,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTestCasesResponse) Reset() {
	*x = AddTestCasesResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestCasesResponse) ProtoMessage() {}

func (x *AddTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestCasesResponse.ProtoReflect.Descriptor instead.
func (*AddTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{29}
}

func (x *AddTestCasesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddTestCasesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddTestCasesResponse) GetAddedCount() int32 {
	if x != nil {
		return x.AddedCount
	}
	return 0
}

func (x *AddTestCasesResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type AddLanguageSupportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddLanguageSupportResponse) Reset() {
	*x = AddLanguageSupportResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLanguageSupportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLanguageSupportResponse) ProtoMessage() {}

func (x *AddLanguageSupportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLanguageSupportResponse.ProtoReflect.Descriptor instead.
func (*AddLanguageSupportResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{30}
}

func (x *AddLanguageSupportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddLanguageSupportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddLanguageSupportResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type UpdateLanguageSupportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLanguageSupportResponse) Reset() {
	*x = UpdateLanguageSupportResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLanguageSupportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguageSupportResponse) ProtoMessage() {}

func (x *UpdateLanguageSupportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguageSupportResponse.ProtoReflect.Descriptor instead.
func (*UpdateLanguageSupportResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateLanguageSupportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateLanguageSupportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateLanguageSupportResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type RemoveLanguageSupportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveLanguageSupportResponse) Reset() {
	*x = RemoveLanguageSupportResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveLanguageSupportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLanguageSupportResponse) ProtoMessage() {}

func (x *RemoveLanguageSupportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLanguageSupportResponse.ProtoReflect.Descriptor instead.
func (*RemoveLanguageSupportResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{32}
}

func (x *RemoveLanguageSupportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveLanguageSupportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveLanguageSupportResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type DeleteTestCaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestcaseId    string                 `protobuf:"bytes,2,opt,name=testcase_id,json=testcaseId,proto3" json:"testcase_id,omitempty"`
	IsRunTestcase bool                   `protobuf:"varint,3,opt,name=is_run_testcase,json=isRunTestcase,proto3" json:"is_run_testcase,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTestCaseRequest) Reset() {
	*x = DeleteTestCaseRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestCaseRequest) ProtoMessage() {}

func (x *DeleteTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteTestCaseRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteTestCaseRequest) GetTestcaseId() string {
	if x != nil {
		return x.TestcaseId
	}
	return ""
}

func (x *DeleteTestCaseRequest) GetIsRunTestcase() bool {
	if x != nil {
		return x.IsRunTestcase
	}
	return false
}

type DeleteTestCaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTestCaseResponse) Reset() {
	*x = DeleteTestCaseResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestCaseResponse) ProtoMessage() {}

func (x *DeleteTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestCaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteTestCaseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTestCaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteTestCaseResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type GetLanguageSupportsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLanguageSupportsRequest) Reset() {
	*x = GetLanguageSupportsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageSupportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageSupportsRequest) ProtoMessage() {}

func (x *GetLanguageSupportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageSupportsRequest.ProtoReflect.Descriptor instead.
func (*GetLanguageSupportsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{35}
}

func (x *GetLanguageSupportsRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type GetLanguageSupportsResponse struct {
	state              protoimpl.MessageState     `protogen:"open.v1"`
	Success            bool                       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message            string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SupportedLanguages []string                   `protobuf:"bytes,3,rep,name=supported_languages,json=supportedLanguages,proto3" json:"supported_languages,omitempty"`
	ValidateCode       map[string]*ValidationCode `protobuf:"bytes,4,rep,name=validate_code,json=validateCode,proto3" json:"validate_code,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ErrorType          string                     `protobuf:"bytes,5,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetLanguageSupportsResponse) Reset() {
	*x = GetLanguageSupportsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageSupportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageSupportsResponse) ProtoMessage() {}

func (x *GetLanguageSupportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageSupportsResponse.ProtoReflect.Descriptor instead.
func (*GetLanguageSupportsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{36}
}

func (x *GetLanguageSupportsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetLanguageSupportsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetLanguageSupportsResponse) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *GetLanguageSupportsResponse) GetValidateCode() map[string]*ValidationCode {
	if x != nil {
		return x.ValidateCode
	}
	return nil
}

func (x *GetLanguageSupportsResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type FullValidationByProblemIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullValidationByProblemIDRequest) Reset() {
	*x = FullValidationByProblemIDRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullValidationByProblemIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullValidationByProblemIDRequest) ProtoMessage() {}

func (x *FullValidationByProblemIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullValidationByProblemIDRequest.ProtoReflect.Descriptor instead.
func (*FullValidationByProblemIDRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{37}
}

func (x *FullValidationByProblemIDRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type FullValidationByProblemIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullValidationByProblemIDResponse) Reset() {
	*x = FullValidationByProblemIDResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullValidationByProblemIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullValidationByProblemIDResponse) ProtoMessage() {}

func (x *FullValidationByProblemIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullValidationByProblemIDResponse.ProtoReflect.Descriptor instead.
func (*FullValidationByProblemIDResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{38}
}

func (x *FullValidationByProblemIDResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FullValidationByProblemIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FullValidationByProblemIDResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type RunProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	UserCode      string                 `protobuf:"bytes,2,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
	Language      string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	IsRunTestcase bool                   `protobuf:"varint,4,opt,name=is_run_testcase,json=isRunTestcase,proto3" json:"is_run_testcase,omitempty"`
	UserId        string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Country       *string                `protobuf:"bytes,6,opt,name=country,proto3,oneof" json:"country,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunProblemRequest) Reset() {
	*x = RunProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunProblemRequest) ProtoMessage() {}

func (x *RunProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunProblemRequest.ProtoReflect.Descriptor instead.
func (*RunProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{39}
}

func (x *RunProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RunProblemRequest) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *RunProblemRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RunProblemRequest) GetIsRunTestcase() bool {
	if x != nil {
		return x.IsRunTestcase
	}
	return false
}

func (x *RunProblemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RunProblemRequest) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type RunProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	IsRunTestcase bool                   `protobuf:"varint,3,opt,name=is_run_testcase,json=isRunTestcase,proto3" json:"is_run_testcase,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,6,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunProblemResponse) Reset() {
	*x = RunProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunProblemResponse) ProtoMessage() {}

func (x *RunProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunProblemResponse.ProtoReflect.Descriptor instead.
func (*RunProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{40}
}

func (x *RunProblemResponse) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RunProblemResponse) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RunProblemResponse) GetIsRunTestcase() bool {
	if x != nil {
		return x.IsRunTestcase
	}
	return false
}

func (x *RunProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RunProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RunProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type Submission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemId     string                 `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChallengeId   string                 `protobuf:"bytes,4,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	SubmittedAt   *Timestamp             `protobuf:"bytes,5,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	Score         int32                  `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	Status        string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Output        string                 `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	Language      string                 `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`
	ExecutionTime float32                `protobuf:"fixed32,10,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	Difficulty    string                 `protobuf:"bytes,11,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	IsFirst       bool                   `protobuf:"varint,12,opt,name=is_first,json=isFirst,proto3" json:"is_first,omitempty"`
	Title         string                 `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
	UserCode      string                 `protobuf:"bytes,14,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Submission) Reset() {
	*x = Submission{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{41}
}

func (x *Submission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Submission) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Submission) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Submission) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *Submission) GetSubmittedAt() *Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Submission) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Submission) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Submission) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *Submission) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Submission) GetExecutionTime() float32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *Submission) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *Submission) GetIsFirst() bool {
	if x != nil {
		return x.IsFirst
	}
	return false
}

func (x *Submission) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Submission) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

type GetSubmissionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     *string                `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3,oneof" json:"problem_id,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionsRequest) Reset() {
	*x = GetSubmissionsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsRequest) ProtoMessage() {}

func (x *GetSubmissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{42}
}

func (x *GetSubmissionsRequest) GetProblemId() string {
	if x != nil && x.ProblemId != nil {
		return *x.ProblemId
	}
	return ""
}

func (x *GetSubmissionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSubmissionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSubmissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetSubmissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Submissions   []*Submission          `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionsResponse) Reset() {
	*x = GetSubmissionsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsResponse) ProtoMessage() {}

func (x *GetSubmissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsResponse.ProtoReflect.Descriptor instead.
func (*GetSubmissionsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{43}
}

func (x *GetSubmissionsResponse) GetSubmissions() []*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *GetSubmissionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetSubmissionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSubmissionsResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type GetProblemByIdSlugRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Slug          *string                `protobuf:"bytes,2,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemByIdSlugRequest) Reset() {
	*x = GetProblemByIdSlugRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemByIdSlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemByIdSlugRequest) ProtoMessage() {}

func (x *GetProblemByIdSlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemByIdSlugRequest.ProtoReflect.Descriptor instead.
func (*GetProblemByIdSlugRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{44}
}

func (x *GetProblemByIdSlugRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *GetProblemByIdSlugRequest) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

type GetProblemByIdSlugResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Problemmetdata *ProblemMetadataLite   `protobuf:"bytes,1,opt,name=problemmetdata,proto3" json:"problemmetdata,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetProblemByIdSlugResponse) Reset() {
	*x = GetProblemByIdSlugResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemByIdSlugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemByIdSlugResponse) ProtoMessage() {}

func (x *GetProblemByIdSlugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemByIdSlugResponse.ProtoReflect.Descriptor instead.
func (*GetProblemByIdSlugResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{45}
}

func (x *GetProblemByIdSlugResponse) GetProblemmetdata() *ProblemMetadataLite {
	if x != nil {
		return x.Problemmetdata
	}
	return nil
}

func (x *GetProblemByIdSlugResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetProblemByIdListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    string                 `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SearchQuery   string                 `protobuf:"bytes,5,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemByIdListRequest) Reset() {
	*x = GetProblemByIdListRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemByIdListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemByIdListRequest) ProtoMessage() {}

func (x *GetProblemByIdListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemByIdListRequest.ProtoReflect.Descriptor instead.
func (*GetProblemByIdListRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{46}
}

func (x *GetProblemByIdListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetProblemByIdListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProblemByIdListRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetProblemByIdListRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *GetProblemByIdListRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

type GetProblemByIdListResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Problemmetdata []*ProblemMetadataLite `protobuf:"bytes,1,rep,name=problemmetdata,proto3" json:"problemmetdata,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetProblemByIdListResponse) Reset() {
	*x = GetProblemByIdListResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemByIdListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemByIdListResponse) ProtoMessage() {}

func (x *GetProblemByIdListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemByIdListResponse.ProtoReflect.Descriptor instead.
func (*GetProblemByIdListResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{47}
}

func (x *GetProblemByIdListResponse) GetProblemmetdata() []*ProblemMetadataLite {
	if x != nil {
		return x.Problemmetdata
	}
	return nil
}

func (x *GetProblemByIdListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProblemMetadataLite struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProblemId          string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Title              string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tags               []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	TestcaseRun        *TestCaseRunOnly       `protobuf:"bytes,5,opt,name=testcase_run,json=testcaseRun,proto3" json:"testcase_run,omitempty"`
	Difficulty         string                 `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SupportedLanguages []string               `protobuf:"bytes,7,rep,name=supported_languages,json=supportedLanguages,proto3" json:"supported_languages,omitempty"`
	Validated          bool                   `protobuf:"varint,8,opt,name=validated,proto3" json:"validated,omitempty"`
	PlaceholderMaps    map[string]string      `protobuf:"bytes,9,rep,name=placeholder_maps,json=placeholderMaps,proto3" json:"placeholder_maps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProblemMetadataLite) Reset() {
	*x = ProblemMetadataLite{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemMetadataLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemMetadataLite) ProtoMessage() {}

func (x *ProblemMetadataLite) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemMetadataLite.ProtoReflect.Descriptor instead.
func (*ProblemMetadataLite) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{48}
}

func (x *ProblemMetadataLite) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ProblemMetadataLite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProblemMetadataLite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProblemMetadataLite) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProblemMetadataLite) GetTestcaseRun() *TestCaseRunOnly {
	if x != nil {
		return x.TestcaseRun
	}
	return nil
}

func (x *ProblemMetadataLite) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ProblemMetadataLite) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *ProblemMetadataLite) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *ProblemMetadataLite) GetPlaceholderMaps() map[string]string {
	if x != nil {
		return x.PlaceholderMaps
	}
	return nil
}

var File_ProblemsService_problemsservice_proto protoreflect.FileDescriptor

const file_ProblemsService_problemsservice_proto_rawDesc = "" +
	"\n" +
	"%ProblemsService/problemsservice.proto\x12\bproblems\"\x8e\x01\n" +
	"%GetLeaderBoardOptionalCountryResponse\x12/\n" +
	"\x04data\x18\x01 \x01(\v2\x1b.problems.LeaderboardSingleR\x04data\x12$\n" +
	"\vfilter_type\x18\x02 \x01(\tH\x00R\n" +
	"filterType\x88\x01\x01B\x0e\n" +
	"\f_filter_type\"\x89\x01\n" +
	"\x11LeaderboardSingle\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12&\n" +
	"\fcountry_rank\x18\x02 \x01(\x03H\x00R\vcountryRank\x88\x01\x01\x12\x1f\n" +
	"\vglobal_rank\x18\x03 \x01(\x03R\n" +
	"globalRankB\x0f\n" +
	"\r_country_rank\"\xc2\x01\n" +
	"$GetLeaderBoardOptionalCountryRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x03R\x04page\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x03R\x05limit\x12\x1d\n" +
	"\acountry\x18\x03 \x01(\tH\x00R\acountry\x88\x01\x01\x12\x1f\n" +
	"\busername\x18\x04 \x01(\tH\x01R\busername\x88\x01\x01\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\tR\x06userIdB\n" +
	"\n" +
	"\b_countryB\v\n" +
	"\t_username\"i\n" +
	" GetProblemsDoneStatisticsRequest\x12\x1f\n" +
	"\busername\x18\x01 \x01(\tH\x00R\busername\x88\x01\x01\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userIdB\v\n" +
	"\t_username\"[\n" +
	"\x12GetUserRankRequest\x12\x1f\n" +
	"\busername\x18\x01 \x01(\tH\x00R\busername\x88\x01\x01\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userIdB\v\n" +
	"\t_username\"Y\n" +
	"!GetProblemsDoneStatisticsResponse\x124\n" +
	"\x04data\x18\x01 \x01(\v2 .problems.ProblemsDoneStatisticsR\x04data\"\x8a\x02\n" +
	"\x16ProblemsDoneStatistics\x12$\n" +
	"\x0emax_easy_count\x18\x01 \x01(\x05R\fmaxEasyCount\x12&\n" +
	"\x0fdone_easy_count\x18\x02 \x01(\x05R\rdoneEasyCount\x12(\n" +
	"\x10max_medium_count\x18\x03 \x01(\x05R\x0emaxMediumCount\x12*\n" +
	"\x11done_medium_count\x18\x04 \x01(\x05R\x0fdoneMediumCount\x12$\n" +
	"\x0emax_hard_count\x18\x05 \x01(\x05R\fmaxHardCount\x12&\n" +
	"\x0fdone_hard_count\x18\x06 \x01(\x05R\rdoneHardCount\"u\n" +
	"\x13GetUserRankResponse\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12!\n" +
	"\fcountry_rank\x18\x02 \x01(\x03R\vcountryRank\x12\x1f\n" +
	"\vglobal_rank\x18\x03 \x01(\x03R\n" +
	"globalRank\";\n" +
	"\tTimestamp\x12\x18\n" +
	"\aseconds\x18\x01 \x01(\x03R\aseconds\x12\x14\n" +
	"\x05nanos\x18\x02 \x01(\x05R\x05nanos\"L\n" +
	"\bTestCase\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05input\x18\x02 \x01(\tR\x05input\x12\x1a\n" +
	"\bexpected\x18\x03 \x01(\tR\bexpected\"]\n" +
	"\tTestCases\x12$\n" +
	"\x03run\x18\x01 \x03(\v2\x12.problems.TestCaseR\x03run\x12*\n" +
	"\x06submit\x18\x02 \x03(\v2\x12.problems.TestCaseR\x06submit\"7\n" +
	"\x0fTestCaseRunOnly\x12$\n" +
	"\x03run\x18\x01 \x03(\v2\x12.problems.TestCaseR\x03run\"b\n" +
	"\x0eValidationCode\x12 \n" +
	"\vplaceholder\x18\x01 \x01(\tR\vplaceholder\x12\x12\n" +
	"\x04code\x18\x02 \x01(\tR\x04code\x12\x1a\n" +
	"\btemplate\x18\x03 \x01(\tR\btemplate\"\x82\x01\n" +
	"\x14CreateProblemRequest\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\tR\n" +
	"difficulty\"\xd9\x01\n" +
	"\x14UpdateProblemRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x19\n" +
	"\x05title\x18\x02 \x01(\tH\x00R\x05title\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x03 \x01(\tH\x01R\vdescription\x88\x01\x01\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12#\n" +
	"\n" +
	"difficulty\x18\x05 \x01(\tH\x02R\n" +
	"difficulty\x88\x01\x01B\b\n" +
	"\x06_titleB\x0e\n" +
	"\f_descriptionB\r\n" +
	"\v_difficulty\"5\n" +
	"\x14DeleteProblemRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\"2\n" +
	"\x11GetProblemRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\"\x9d\x01\n" +
	"\x13ListProblemsRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\tR\n" +
	"difficulty\x12!\n" +
	"\fsearch_query\x18\x05 \x01(\tR\vsearchQuery\"g\n" +
	"\x13AddTestCasesRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x121\n" +
	"\ttestcases\x18\x02 \x01(\v2\x13.problems.TestCasesR\ttestcases\"\x99\x01\n" +
	"\x19AddLanguageSupportRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12A\n" +
	"\x0fvalidation_code\x18\x03 \x01(\v2\x18.problems.ValidationCodeR\x0evalidationCode\"\x9c\x01\n" +
	"\x1cUpdateLanguageSupportRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12A\n" +
	"\x0fvalidation_code\x18\x03 \x01(\v2\x18.problems.ValidationCodeR\x0evalidationCode\"Y\n" +
	"\x1cRemoveLanguageSupportRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\"\xa3\x05\n" +
	"\aProblem\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x122\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x13.problems.TimestampR\tcreatedAt\x122\n" +
	"\n" +
	"updated_at\x18\x03 \x01(\v2\x13.problems.TimestampR\tupdatedAt\x127\n" +
	"\n" +
	"deleted_at\x18\x04 \x01(\v2\x13.problems.TimestampH\x00R\tdeletedAt\x88\x01\x01\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\a \x03(\tR\x04tags\x121\n" +
	"\ttestcases\x18\b \x01(\v2\x13.problems.TestCasesR\ttestcases\x12\x1e\n" +
	"\n" +
	"difficulty\x18\t \x01(\tR\n" +
	"difficulty\x12/\n" +
	"\x13supported_languages\x18\n" +
	" \x03(\tR\x12supportedLanguages\x12H\n" +
	"\rvalidate_code\x18\v \x03(\v2#.problems.Problem.ValidateCodeEntryR\fvalidateCode\x12\x1c\n" +
	"\tvalidated\x18\f \x01(\bR\tvalidated\x126\n" +
	"\fvalidated_at\x18\r \x01(\v2\x13.problems.TimestampR\vvalidatedAt\x1aY\n" +
	"\x11ValidateCodeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.problems.ValidationCodeR\x05value:\x028\x01B\r\n" +
	"\v_deleted_at\"\xa9\x02\n" +
	"\x0fProblemMetadata\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12<\n" +
	"\ftestcase_run\x18\x05 \x01(\v2\x19.problems.TestCaseRunOnlyR\vtestcaseRun\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x06 \x01(\tR\n" +
	"difficulty\x12/\n" +
	"\x13supported_languages\x18\a \x03(\tR\x12supportedLanguages\x12\x1c\n" +
	"\tvalidated\x18\b \x01(\bR\tvalidated\"\x89\x01\n" +
	"\x15CreateProblemResponse\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x04 \x01(\tR\terrorType\"j\n" +
	"\x15UpdateProblemResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"j\n" +
	"\x15DeleteProblemResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"`\n" +
	"\x12GetProblemResponse\x12+\n" +
	"\aproblem\x18\x01 \x01(\v2\x11.problems.ProblemR\aproblem\x12\x1d\n" +
	"\n" +
	"error_type\x18\x02 \x01(\tR\terrorType\"\xb6\x01\n" +
	"\x14ListProblemsResponse\x12-\n" +
	"\bproblems\x18\x01 \x03(\v2\x11.problems.ProblemR\bproblems\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"error_type\x18\x05 \x01(\tR\terrorType\"\x8a\x01\n" +
	"\x14AddTestCasesResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vadded_count\x18\x03 \x01(\x05R\n" +
	"addedCount\x12\x1d\n" +
	"\n" +
	"error_type\x18\x04 \x01(\tR\terrorType\"o\n" +
	"\x1aAddLanguageSupportResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"r\n" +
	"\x1dUpdateLanguageSupportResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"r\n" +
	"\x1dRemoveLanguageSupportResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"\x7f\n" +
	"\x15DeleteTestCaseRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1f\n" +
	"\vtestcase_id\x18\x02 \x01(\tR\n" +
	"testcaseId\x12&\n" +
	"\x0fis_run_testcase\x18\x03 \x01(\bR\risRunTestcase\"k\n" +
	"\x16DeleteTestCaseResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\";\n" +
	"\x1aGetLanguageSupportsRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\"\xda\x02\n" +
	"\x1bGetLanguageSupportsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12/\n" +
	"\x13supported_languages\x18\x03 \x03(\tR\x12supportedLanguages\x12\\\n" +
	"\rvalidate_code\x18\x04 \x03(\v27.problems.GetLanguageSupportsResponse.ValidateCodeEntryR\fvalidateCode\x12\x1d\n" +
	"\n" +
	"error_type\x18\x05 \x01(\tR\terrorType\x1aY\n" +
	"\x11ValidateCodeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.problems.ValidationCodeR\x05value:\x028\x01\"A\n" +
	" FullValidationByProblemIDRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\"v\n" +
	"!FullValidationByProblemIDResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"\xd7\x01\n" +
	"\x11RunProblemRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1b\n" +
	"\tuser_code\x18\x02 \x01(\tR\buserCode\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\tR\blanguage\x12&\n" +
	"\x0fis_run_testcase\x18\x04 \x01(\bR\risRunTestcase\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\tR\x06userId\x12\x1d\n" +
	"\acountry\x18\x06 \x01(\tH\x00R\acountry\x88\x01\x01B\n" +
	"\n" +
	"\b_country\"\xca\x01\n" +
	"\x12RunProblemResponse\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12&\n" +
	"\x0fis_run_testcase\x18\x03 \x01(\bR\risRunTestcase\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x06 \x01(\tR\terrorType\"\xa6\x03\n" +
	"\n" +
	"Submission\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x02 \x01(\tR\tproblemId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12!\n" +
	"\fchallenge_id\x18\x04 \x01(\tR\vchallengeId\x126\n" +
	"\fsubmitted_at\x18\x05 \x01(\v2\x13.problems.TimestampR\vsubmittedAt\x12\x14\n" +
	"\x05score\x18\x06 \x01(\x05R\x05score\x12\x16\n" +
	"\x06status\x18\a \x01(\tR\x06status\x12\x16\n" +
	"\x06output\x18\b \x01(\tR\x06output\x12\x1a\n" +
	"\blanguage\x18\t \x01(\tR\blanguage\x12%\n" +
	"\x0eexecution_time\x18\n" +
	" \x01(\x02R\rexecutionTime\x12\x1e\n" +
	"\n" +
	"difficulty\x18\v \x01(\tR\n" +
	"difficulty\x12\x19\n" +
	"\bis_first\x18\f \x01(\bR\aisFirst\x12\x14\n" +
	"\x05title\x18\r \x01(\tR\x05title\x12\x1b\n" +
	"\tuser_code\x18\x0e \x01(\tR\buserCode\"\x8d\x01\n" +
	"\x15GetSubmissionsRequest\x12\"\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tH\x00R\tproblemId\x88\x01\x01\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userIdB\r\n" +
	"\v_problem_id\"\xa3\x01\n" +
	"\x16GetSubmissionsResponse\x126\n" +
	"\vsubmissions\x18\x01 \x03(\v2\x14.problems.SubmissionR\vsubmissions\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x04 \x01(\tR\terrorType\"\\\n" +
	"\x19GetProblemByIdSlugRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x17\n" +
	"\x04slug\x18\x02 \x01(\tH\x00R\x04slug\x88\x01\x01B\a\n" +
	"\x05_slug\"}\n" +
	"\x1aGetProblemByIdSlugResponse\x12E\n" +
	"\x0eproblemmetdata\x18\x01 \x01(\v2\x1d.problems.ProblemMetadataLiteR\x0eproblemmetdata\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xa3\x01\n" +
	"\x19GetProblemByIdListRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\tR\n" +
	"difficulty\x12!\n" +
	"\fsearch_query\x18\x05 \x01(\tR\vsearchQuery\"}\n" +
	"\x1aGetProblemByIdListResponse\x12E\n" +
	"\x0eproblemmetdata\x18\x01 \x03(\v2\x1d.problems.ProblemMetadataLiteR\x0eproblemmetdata\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xd0\x03\n" +
	"\x13ProblemMetadataLite\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12<\n" +
	"\ftestcase_run\x18\x05 \x01(\v2\x19.problems.TestCaseRunOnlyR\vtestcaseRun\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x06 \x01(\tR\n" +
	"difficulty\x12/\n" +
	"\x13supported_languages\x18\a \x03(\tR\x12supportedLanguages\x12\x1c\n" +
	"\tvalidated\x18\b \x01(\bR\tvalidated\x12]\n" +
	"\x10placeholder_maps\x18\t \x03(\v22.problems.ProblemMetadataLite.PlaceholderMapsEntryR\x0fplaceholderMaps\x1aB\n" +
	"\x14PlaceholderMapsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\x9c\x0e\n" +
	"\x0fProblemsService\x12P\n" +
	"\rCreateProblem\x12\x1e.problems.CreateProblemRequest\x1a\x1f.problems.CreateProblemResponse\x12P\n" +
	"\rUpdateProblem\x12\x1e.problems.UpdateProblemRequest\x1a\x1f.problems.UpdateProblemResponse\x12P\n" +
	"\rDeleteProblem\x12\x1e.problems.DeleteProblemRequest\x1a\x1f.problems.DeleteProblemResponse\x12G\n" +
	"\n" +
	"GetProblem\x12\x1b.problems.GetProblemRequest\x1a\x1c.problems.GetProblemResponse\x12M\n" +
	"\fListProblems\x12\x1d.problems.ListProblemsRequest\x1a\x1e.problems.ListProblemsResponse\x12_\n" +
	"\x12GetProblemByIDSlug\x12#.problems.GetProblemByIdSlugRequest\x1a$.problems.GetProblemByIdSlugResponse\x12_\n" +
	"\x12GetProblemByIDList\x12#.problems.GetProblemByIdListRequest\x1a$.problems.GetProblemByIdListResponse\x12M\n" +
	"\fAddTestCases\x12\x1d.problems.AddTestCasesRequest\x1a\x1e.problems.AddTestCasesResponse\x12S\n" +
	"\x0eDeleteTestCase\x12\x1f.problems.DeleteTestCaseRequest\x1a .problems.DeleteTestCaseResponse\x12b\n" +
	"\x13GetLanguageSupports\x12$.problems.GetLanguageSupportsRequest\x1a%.problems.GetLanguageSupportsResponse\x12_\n" +
	"\x12AddLanguageSupport\x12#.problems.AddLanguageSupportRequest\x1a$.problems.AddLanguageSupportResponse\x12h\n" +
	"\x15UpdateLanguageSupport\x12&.problems.UpdateLanguageSupportRequest\x1a'.problems.UpdateLanguageSupportResponse\x12h\n" +
	"\x15RemoveLanguageSupport\x12&.problems.RemoveLanguageSupportRequest\x1a'.problems.RemoveLanguageSupportResponse\x12t\n" +
	"\x19FullValidationByProblemID\x12*.problems.FullValidationByProblemIDRequest\x1a+.problems.FullValidationByProblemIDResponse\x12O\n" +
	"\x12RunUserCodeProblem\x12\x1b.problems.RunProblemRequest\x1a\x1c.problems.RunProblemResponse\x12f\n" +
	"!GetSubmissionsByOptionalProblemID\x12\x1f.problems.GetSubmissionsRequest\x1a .problems.GetSubmissionsResponse\x12\x80\x01\n" +
	"\x1dGetLeaderBoardOptionalCountry\x12..problems.GetLeaderBoardOptionalCountryRequest\x1a/.problems.GetLeaderBoardOptionalCountryResponse\x12t\n" +
	"\x19GetProblemsDoneStatistics\x12*.problems.GetProblemsDoneStatisticsRequest\x1a+.problems.GetProblemsDoneStatisticsResponse\x12T\n" +
	"\x15GetIndividualUserRank\x12\x1c.problems.GetUserRankRequest\x1a\x1d.problems.GetUserRankResponseB\tZ\a./protob\x06proto3"

var (
	file_ProblemsService_problemsservice_proto_rawDescOnce sync.Once
	file_ProblemsService_problemsservice_proto_rawDescData []byte
)

func file_ProblemsService_problemsservice_proto_rawDescGZIP() []byte {
	file_ProblemsService_problemsservice_proto_rawDescOnce.Do(func() {
		file_ProblemsService_problemsservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ProblemsService_problemsservice_proto_rawDesc), len(file_ProblemsService_problemsservice_proto_rawDesc)))
	})
	return file_ProblemsService_problemsservice_proto_rawDescData
}

var file_ProblemsService_problemsservice_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_ProblemsService_problemsservice_proto_goTypes = []any{
	(*GetLeaderBoardOptionalCountryResponse)(nil), // 0: problems.GetLeaderBoardOptionalCountryResponse
	(*LeaderboardSingle)(nil),                     // 1: problems.LeaderboardSingle
	(*GetLeaderBoardOptionalCountryRequest)(nil),  // 2: problems.GetLeaderBoardOptionalCountryRequest
	(*GetProblemsDoneStatisticsRequest)(nil),      // 3: problems.GetProblemsDoneStatisticsRequest
	(*GetUserRankRequest)(nil),                    // 4: problems.GetUserRankRequest
	(*GetProblemsDoneStatisticsResponse)(nil),     // 5: problems.GetProblemsDoneStatisticsResponse
	(*ProblemsDoneStatistics)(nil),                // 6: problems.ProblemsDoneStatistics
	(*GetUserRankResponse)(nil),                   // 7: problems.GetUserRankResponse
	(*Timestamp)(nil),                             // 8: problems.Timestamp
	(*TestCase)(nil),                              // 9: problems.TestCase
	(*TestCases)(nil),                             // 10: problems.TestCases
	(*TestCaseRunOnly)(nil),                       // 11: problems.TestCaseRunOnly
	(*ValidationCode)(nil),                        // 12: problems.ValidationCode
	(*CreateProblemRequest)(nil),                  // 13: problems.CreateProblemRequest
	(*UpdateProblemRequest)(nil),                  // 14: problems.UpdateProblemRequest
	(*DeleteProblemRequest)(nil),                  // 15: problems.DeleteProblemRequest
	(*GetProblemRequest)(nil),                     // 16: problems.GetProblemRequest
	(*ListProblemsRequest)(nil),                   // 17: problems.ListProblemsRequest
	(*AddTestCasesRequest)(nil),                   // 18: problems.AddTestCasesRequest
	(*AddLanguageSupportRequest)(nil),             // 19: problems.AddLanguageSupportRequest
	(*UpdateLanguageSupportRequest)(nil),          // 20: problems.UpdateLanguageSupportRequest
	(*RemoveLanguageSupportRequest)(nil),          // 21: problems.RemoveLanguageSupportRequest
	(*Problem)(nil),                               // 22: problems.Problem
	(*ProblemMetadata)(nil),                       // 23: problems.ProblemMetadata
	(*CreateProblemResponse)(nil),                 // 24: problems.CreateProblemResponse
	(*UpdateProblemResponse)(nil),                 // 25: problems.UpdateProblemResponse
	(*DeleteProblemResponse)(nil),                 // 26: problems.DeleteProblemResponse
	(*GetProblemResponse)(nil),                    // 27: problems.GetProblemResponse
	(*ListProblemsResponse)(nil),                  // 28: problems.ListProblemsResponse
	(*AddTestCasesResponse)(nil),                  // 29: problems.AddTestCasesResponse
	(*AddLanguageSupportResponse)(nil),            // 30: problems.AddLanguageSupportResponse
	(*UpdateLanguageSupportResponse)(nil),         // 31: problems.UpdateLanguageSupportResponse
	(*RemoveLanguageSupportResponse)(nil),         // 32: problems.RemoveLanguageSupportResponse
	(*DeleteTestCaseRequest)(nil),                 // 33: problems.DeleteTestCaseRequest
	(*DeleteTestCaseResponse)(nil),                // 34: problems.DeleteTestCaseResponse
	(*GetLanguageSupportsRequest)(nil),            // 35: problems.GetLanguageSupportsRequest
	(*GetLanguageSupportsResponse)(nil),           // 36: problems.GetLanguageSupportsResponse
	(*FullValidationByProblemIDRequest)(nil),      // 37: problems.FullValidationByProblemIDRequest
	(*FullValidationByProblemIDResponse)(nil),     // 38: problems.FullValidationByProblemIDResponse
	(*RunProblemRequest)(nil),                     // 39: problems.RunProblemRequest
	(*RunProblemResponse)(nil),                    // 40: problems.RunProblemResponse
	(*Submission)(nil),                            // 41: problems.Submission
	(*GetSubmissionsRequest)(nil),                 // 42: problems.GetSubmissionsRequest
	(*GetSubmissionsResponse)(nil),                // 43: problems.GetSubmissionsResponse
	(*GetProblemByIdSlugRequest)(nil),             // 44: problems.GetProblemByIdSlugRequest
	(*GetProblemByIdSlugResponse)(nil),            // 45: problems.GetProblemByIdSlugResponse
	(*GetProblemByIdListRequest)(nil),             // 46: problems.GetProblemByIdListRequest
	(*GetProblemByIdListResponse)(nil),            // 47: problems.GetProblemByIdListResponse
	(*ProblemMetadataLite)(nil),                   // 48: problems.ProblemMetadataLite
	nil,                                           // 49: problems.Problem.ValidateCodeEntry
	nil,                                           // 50: problems.GetLanguageSupportsResponse.ValidateCodeEntry
	nil,                                           // 51: problems.ProblemMetadataLite.PlaceholderMapsEntry
}
var file_ProblemsService_problemsservice_proto_depIdxs = []int32{
	1,  // 0: problems.GetLeaderBoardOptionalCountryResponse.data:type_name -> problems.LeaderboardSingle
	6,  // 1: problems.GetProblemsDoneStatisticsResponse.data:type_name -> problems.ProblemsDoneStatistics
	9,  // 2: problems.TestCases.run:type_name -> problems.TestCase
	9,  // 3: problems.TestCases.submit:type_name -> problems.TestCase
	9,  // 4: problems.TestCaseRunOnly.run:type_name -> problems.TestCase
	10, // 5: problems.AddTestCasesRequest.testcases:type_name -> problems.TestCases
	12, // 6: problems.AddLanguageSupportRequest.validation_code:type_name -> problems.ValidationCode
	12, // 7: problems.UpdateLanguageSupportRequest.validation_code:type_name -> problems.ValidationCode
	8,  // 8: problems.Problem.created_at:type_name -> problems.Timestamp
	8,  // 9: problems.Problem.updated_at:type_name -> problems.Timestamp
	8,  // 10: problems.Problem.deleted_at:type_name -> problems.Timestamp
	10, // 11: problems.Problem.testcases:type_name -> problems.TestCases
	49, // 12: problems.Problem.validate_code:type_name -> problems.Problem.ValidateCodeEntry
	8,  // 13: problems.Problem.validated_at:type_name -> problems.Timestamp
	11, // 14: problems.ProblemMetadata.testcase_run:type_name -> problems.TestCaseRunOnly
	22, // 15: problems.GetProblemResponse.problem:type_name -> problems.Problem
	22, // 16: problems.ListProblemsResponse.problems:type_name -> problems.Problem
	50, // 17: problems.GetLanguageSupportsResponse.validate_code:type_name -> problems.GetLanguageSupportsResponse.ValidateCodeEntry
	8,  // 18: problems.Submission.submitted_at:type_name -> problems.Timestamp
	41, // 19: problems.GetSubmissionsResponse.submissions:type_name -> problems.Submission
	48, // 20: problems.GetProblemByIdSlugResponse.problemmetdata:type_name -> problems.ProblemMetadataLite
	48, // 21: problems.GetProblemByIdListResponse.problemmetdata:type_name -> problems.ProblemMetadataLite
	11, // 22: problems.ProblemMetadataLite.testcase_run:type_name -> problems.TestCaseRunOnly
	51, // 23: problems.ProblemMetadataLite.placeholder_maps:type_name -> problems.ProblemMetadataLite.PlaceholderMapsEntry
	12, // 24: problems.Problem.ValidateCodeEntry.value:type_name -> problems.ValidationCode
	12, // 25: problems.GetLanguageSupportsResponse.ValidateCodeEntry.value:type_name -> problems.ValidationCode
	13, // 26: problems.ProblemsService.CreateProblem:input_type -> problems.CreateProblemRequest
	14, // 27: problems.ProblemsService.UpdateProblem:input_type -> problems.UpdateProblemRequest
	15, // 28: problems.ProblemsService.DeleteProblem:input_type -> problems.DeleteProblemRequest
	16, // 29: problems.ProblemsService.GetProblem:input_type -> problems.GetProblemRequest
	17, // 30: problems.ProblemsService.ListProblems:input_type -> problems.ListProblemsRequest
	44, // 31: problems.ProblemsService.GetProblemByIDSlug:input_type -> problems.GetProblemByIdSlugRequest
	46, // 32: problems.ProblemsService.GetProblemByIDList:input_type -> problems.GetProblemByIdListRequest
	18, // 33: problems.ProblemsService.AddTestCases:input_type -> problems.AddTestCasesRequest
	33, // 34: problems.ProblemsService.DeleteTestCase:input_type -> problems.DeleteTestCaseRequest
	35, // 35: problems.ProblemsService.GetLanguageSupports:input_type -> problems.GetLanguageSupportsRequest
	19, // 36: problems.ProblemsService.AddLanguageSupport:input_type -> problems.AddLanguageSupportRequest
	20, // 37: problems.ProblemsService.UpdateLanguageSupport:input_type -> problems.UpdateLanguageSupportRequest
	21, // 38: problems.ProblemsService.RemoveLanguageSupport:input_type -> problems.RemoveLanguageSupportRequest
	37, // 39: problems.ProblemsService.FullValidationByProblemID:input_type -> problems.FullValidationByProblemIDRequest
	39, // 40: problems.ProblemsService.RunUserCodeProblem:input_type -> problems.RunProblemRequest
	42, // 41: problems.ProblemsService.GetSubmissionsByOptionalProblemID:input_type -> problems.GetSubmissionsRequest
	2,  // 42: problems.ProblemsService.GetLeaderBoardOptionalCountry:input_type -> problems.GetLeaderBoardOptionalCountryRequest
	3,  // 43: problems.ProblemsService.GetProblemsDoneStatistics:input_type -> problems.GetProblemsDoneStatisticsRequest
	4,  // 44: problems.ProblemsService.GetIndividualUserRank:input_type -> problems.GetUserRankRequest
	24, // 45: problems.ProblemsService.CreateProblem:output_type -> problems.CreateProblemResponse
	25, // 46: problems.ProblemsService.UpdateProblem:output_type -> problems.UpdateProblemResponse
	26, // 47: problems.ProblemsService.DeleteProblem:output_type -> problems.DeleteProblemResponse
	27, // 48: problems.ProblemsService.GetProblem:output_type -> problems.GetProblemResponse
	28, // 49: problems.ProblemsService.ListProblems:output_type -> problems.ListProblemsResponse
	45, // 50: problems.ProblemsService.GetProblemByIDSlug:output_type -> problems.GetProblemByIdSlugResponse
	47, // 51: problems.ProblemsService.GetProblemByIDList:output_type -> problems.GetProblemByIdListResponse
	29, // 52: problems.ProblemsService.AddTestCases:output_type -> problems.AddTestCasesResponse
	34, // 53: problems.ProblemsService.DeleteTestCase:output_type -> problems.DeleteTestCaseResponse
	36, // 54: problems.ProblemsService.GetLanguageSupports:output_type -> problems.GetLanguageSupportsResponse
	30, // 55: problems.ProblemsService.AddLanguageSupport:output_type -> problems.AddLanguageSupportResponse
	31, // 56: problems.ProblemsService.UpdateLanguageSupport:output_type -> problems.UpdateLanguageSupportResponse
	32, // 57: problems.ProblemsService.RemoveLanguageSupport:output_type -> problems.RemoveLanguageSupportResponse
	38, // 58: problems.ProblemsService.FullValidationByProblemID:output_type -> problems.FullValidationByProblemIDResponse
	40, // 59: problems.ProblemsService.RunUserCodeProblem:output_type -> problems.RunProblemResponse
	43, // 60: problems.ProblemsService.GetSubmissionsByOptionalProblemID:output_type -> problems.GetSubmissionsResponse
	0,  // 61: problems.ProblemsService.GetLeaderBoardOptionalCountry:output_type -> problems.GetLeaderBoardOptionalCountryResponse
	5,  // 62: problems.ProblemsService.GetProblemsDoneStatistics:output_type -> problems.GetProblemsDoneStatisticsResponse
	7,  // 63: problems.ProblemsService.GetIndividualUserRank:output_type -> problems.GetUserRankResponse
	45, // [45:64] is the sub-list for method output_type
	26, // [26:45] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_ProblemsService_problemsservice_proto_init() }
func file_ProblemsService_problemsservice_proto_init() {
	if File_ProblemsService_problemsservice_proto != nil {
		return
	}
	file_ProblemsService_problemsservice_proto_msgTypes[0].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[1].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[2].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[3].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[4].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[14].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[22].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[39].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[42].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[44].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ProblemsService_problemsservice_proto_rawDesc), len(file_ProblemsService_problemsservice_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ProblemsService_problemsservice_proto_goTypes,
		DependencyIndexes: file_ProblemsService_problemsservice_proto_depIdxs,
		MessageInfos:      file_ProblemsService_problemsservice_proto_msgTypes,
	}.Build()
	File_ProblemsService_problemsservice_proto = out.File
	file_ProblemsService_problemsservice_proto_goTypes = nil
	file_ProblemsService_problemsservice_proto_depIdxs = nil
}
