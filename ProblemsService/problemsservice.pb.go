// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.6
// source: ProblemsService/problemsservice.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RandomProblemIDsGenWithDifficultyRatioRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Qnratio       *ProblemDifficultyRatio `protobuf:"bytes,1,opt,name=qnratio,proto3" json:"qnratio,omitempty"`
	TraceID       string                  `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RandomProblemIDsGenWithDifficultyRatioRequest) Reset() {
	*x = RandomProblemIDsGenWithDifficultyRatioRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandomProblemIDsGenWithDifficultyRatioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomProblemIDsGenWithDifficultyRatioRequest) ProtoMessage() {}

func (x *RandomProblemIDsGenWithDifficultyRatioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomProblemIDsGenWithDifficultyRatioRequest.ProtoReflect.Descriptor instead.
func (*RandomProblemIDsGenWithDifficultyRatioRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{0}
}

func (x *RandomProblemIDsGenWithDifficultyRatioRequest) GetQnratio() *ProblemDifficultyRatio {
	if x != nil {
		return x.Qnratio
	}
	return nil
}

func (x *RandomProblemIDsGenWithDifficultyRatioRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type ProblemDifficultyRatio struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Easy          int32                  `protobuf:"varint,1,opt,name=easy,proto3" json:"easy,omitempty"`
	Medium        int32                  `protobuf:"varint,2,opt,name=medium,proto3" json:"medium,omitempty"`
	Hard          int32                  `protobuf:"varint,3,opt,name=hard,proto3" json:"hard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemDifficultyRatio) Reset() {
	*x = ProblemDifficultyRatio{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemDifficultyRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemDifficultyRatio) ProtoMessage() {}

func (x *ProblemDifficultyRatio) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemDifficultyRatio.ProtoReflect.Descriptor instead.
func (*ProblemDifficultyRatio) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{1}
}

func (x *ProblemDifficultyRatio) GetEasy() int32 {
	if x != nil {
		return x.Easy
	}
	return 0
}

func (x *ProblemDifficultyRatio) GetMedium() int32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *ProblemDifficultyRatio) GetHard() int32 {
	if x != nil {
		return x.Hard
	}
	return 0
}

type RandomProblemIDsGenWithDifficultyRatioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemIds    []string               `protobuf:"bytes,1,rep,name=problem_ids,json=problemIds,proto3" json:"problem_ids,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RandomProblemIDsGenWithDifficultyRatioResponse) Reset() {
	*x = RandomProblemIDsGenWithDifficultyRatioResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandomProblemIDsGenWithDifficultyRatioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomProblemIDsGenWithDifficultyRatioResponse) ProtoMessage() {}

func (x *RandomProblemIDsGenWithDifficultyRatioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomProblemIDsGenWithDifficultyRatioResponse.ProtoReflect.Descriptor instead.
func (*RandomProblemIDsGenWithDifficultyRatioResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{2}
}

func (x *RandomProblemIDsGenWithDifficultyRatioResponse) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

func (x *RandomProblemIDsGenWithDifficultyRatioResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RandomProblemIDsGenWithDifficultyRatioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RandomProblemIDsGenWithDifficultyRatioResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type CheckProblemExistenceBulkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemIds    []string               `protobuf:"bytes,1,rep,name=problem_ids,json=problemIds,proto3" json:"problem_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckProblemExistenceBulkRequest) Reset() {
	*x = CheckProblemExistenceBulkRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckProblemExistenceBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProblemExistenceBulkRequest) ProtoMessage() {}

func (x *CheckProblemExistenceBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProblemExistenceBulkRequest.ProtoReflect.Descriptor instead.
func (*CheckProblemExistenceBulkRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{3}
}

func (x *CheckProblemExistenceBulkRequest) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

type CheckProblemExistenceBulkResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ProblemExistence map[string]bool        `protobuf:"bytes,1,rep,name=problem_existence,json=problemExistence,proto3" json:"problem_existence,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // problem_id -> exists
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CheckProblemExistenceBulkResponse) Reset() {
	*x = CheckProblemExistenceBulkResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckProblemExistenceBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProblemExistenceBulkResponse) ProtoMessage() {}

func (x *CheckProblemExistenceBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProblemExistenceBulkResponse.ProtoReflect.Descriptor instead.
func (*CheckProblemExistenceBulkResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{4}
}

func (x *CheckProblemExistenceBulkResponse) GetProblemExistence() map[string]bool {
	if x != nil {
		return x.ProblemExistence
	}
	return nil
}

type ProblemIDsDoneByUserIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemIDsDoneByUserIDRequest) Reset() {
	*x = ProblemIDsDoneByUserIDRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemIDsDoneByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemIDsDoneByUserIDRequest) ProtoMessage() {}

func (x *ProblemIDsDoneByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemIDsDoneByUserIDRequest.ProtoReflect.Descriptor instead.
func (*ProblemIDsDoneByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{5}
}

func (x *ProblemIDsDoneByUserIDRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ProblemIDsDoneByUserIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemIds    []string               `protobuf:"bytes,1,rep,name=problem_ids,json=problemIds,proto3" json:"problem_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemIDsDoneByUserIDResponse) Reset() {
	*x = ProblemIDsDoneByUserIDResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemIDsDoneByUserIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemIDsDoneByUserIDResponse) ProtoMessage() {}

func (x *ProblemIDsDoneByUserIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemIDsDoneByUserIDResponse.ProtoReflect.Descriptor instead.
func (*ProblemIDsDoneByUserIDResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{6}
}

func (x *ProblemIDsDoneByUserIDResponse) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

type GetSubmissionsByIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubmissionId  string                 `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionsByIDRequest) Reset() {
	*x = GetSubmissionsByIDRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsByIDRequest) ProtoMessage() {}

func (x *GetSubmissionsByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsByIDRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionsByIDRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{7}
}

func (x *GetSubmissionsByIDRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *GetSubmissionsByIDRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetSubmissionsByIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionsByIDResponse) Reset() {
	*x = GetSubmissionsByIDResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsByIDResponse) ProtoMessage() {}

func (x *GetSubmissionsByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsByIDResponse.ProtoReflect.Descriptor instead.
func (*GetSubmissionsByIDResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{8}
}

type ForceChangeUserEntityInSubmissionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Entity        string                 `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForceChangeUserEntityInSubmissionRequest) Reset() {
	*x = ForceChangeUserEntityInSubmissionRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceChangeUserEntityInSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceChangeUserEntityInSubmissionRequest) ProtoMessage() {}

func (x *ForceChangeUserEntityInSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceChangeUserEntityInSubmissionRequest.ProtoReflect.Descriptor instead.
func (*ForceChangeUserEntityInSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{9}
}

func (x *ForceChangeUserEntityInSubmissionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ForceChangeUserEntityInSubmissionRequest) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

type ForceChangeUserEntityInSubmissionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForceChangeUserEntityInSubmissionResponse) Reset() {
	*x = ForceChangeUserEntityInSubmissionResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceChangeUserEntityInSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceChangeUserEntityInSubmissionResponse) ProtoMessage() {}

func (x *ForceChangeUserEntityInSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceChangeUserEntityInSubmissionResponse.ProtoReflect.Descriptor instead.
func (*ForceChangeUserEntityInSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{10}
}

type GetBulkProblemMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemIds    []string               `protobuf:"bytes,1,rep,name=problem_ids,json=problemIds,proto3" json:"problem_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBulkProblemMetadataRequest) Reset() {
	*x = GetBulkProblemMetadataRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBulkProblemMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkProblemMetadataRequest) ProtoMessage() {}

func (x *GetBulkProblemMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkProblemMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetBulkProblemMetadataRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{11}
}

func (x *GetBulkProblemMetadataRequest) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

type GetBulkProblemMetadataResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BulkProblemMetadata []*BulkProblemMetadata `protobuf:"bytes,1,rep,name=BulkProblemMetadata,proto3" json:"BulkProblemMetadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetBulkProblemMetadataResponse) Reset() {
	*x = GetBulkProblemMetadataResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBulkProblemMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkProblemMetadataResponse) ProtoMessage() {}

func (x *GetBulkProblemMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkProblemMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetBulkProblemMetadataResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{12}
}

func (x *GetBulkProblemMetadataResponse) GetBulkProblemMetadata() []*BulkProblemMetadata {
	if x != nil {
		return x.BulkProblemMetadata
	}
	return nil
}

type BulkProblemMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Difficulty    string                 `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulkProblemMetadata) Reset() {
	*x = BulkProblemMetadata{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkProblemMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkProblemMetadata) ProtoMessage() {}

func (x *BulkProblemMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkProblemMetadata.ProtoReflect.Descriptor instead.
func (*BulkProblemMetadata) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{13}
}

func (x *BulkProblemMetadata) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *BulkProblemMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BulkProblemMetadata) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *BulkProblemMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetChallengeHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsPrivate     *bool                  `protobuf:"varint,2,opt,name=is_private,json=isPrivate,proto3,oneof" json:"is_private,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TraceID       string                 `protobuf:"bytes,5,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChallengeHistoryRequest) Reset() {
	*x = GetChallengeHistoryRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChallengeHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeHistoryRequest) ProtoMessage() {}

func (x *GetChallengeHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetChallengeHistoryRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{14}
}

func (x *GetChallengeHistoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetChallengeHistoryRequest) GetIsPrivate() bool {
	if x != nil && x.IsPrivate != nil {
		return *x.IsPrivate
	}
	return false
}

func (x *GetChallengeHistoryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetChallengeHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetChallengeHistoryRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetChallengeHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Challenges    []*Challenge           `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChallengeHistoryResponse) Reset() {
	*x = GetChallengeHistoryResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChallengeHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeHistoryResponse) ProtoMessage() {}

func (x *GetChallengeHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetChallengeHistoryResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{15}
}

func (x *GetChallengeHistoryResponse) GetChallenges() []*Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *GetChallengeHistoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetChallengeHistoryResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetChallengeHistoryResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Messages
type Challenge struct {
	state               protoimpl.MessageState          `protogen:"open.v1"`
	Id                  string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title               string                          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	CreatorId           string                          `protobuf:"bytes,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Difficulty          string                          `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	IsPrivate           bool                            `protobuf:"varint,5,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	Status              string                          `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Password            *string                         `protobuf:"bytes,7,opt,name=password,proto3,oneof" json:"password,omitempty"` // Only for private challenges
	ProblemIds          []string                        `protobuf:"bytes,8,rep,name=problem_ids,json=problemIds,proto3" json:"problem_ids,omitempty"`
	TimeLimit           int32                           `protobuf:"varint,9,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	CreatedAt           int64                           `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	IsActive            bool                            `protobuf:"varint,11,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ParticipantIds      []string                        `protobuf:"bytes,12,rep,name=participant_ids,json=participantIds,proto3" json:"participant_ids,omitempty"`
	UserProblemMetadata map[string]*ProblemMetadataList `protobuf:"bytes,13,rep,name=user_problem_metadata,json=userProblemMetadata,proto3" json:"user_problem_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StartTime           int64                           `protobuf:"varint,14,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             int64                           `protobuf:"varint,15,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{16}
}

func (x *Challenge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Challenge) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Challenge) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Challenge) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *Challenge) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *Challenge) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Challenge) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *Challenge) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

func (x *Challenge) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *Challenge) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Challenge) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Challenge) GetParticipantIds() []string {
	if x != nil {
		return x.ParticipantIds
	}
	return nil
}

func (x *Challenge) GetUserProblemMetadata() map[string]*ProblemMetadataList {
	if x != nil {
		return x.UserProblemMetadata
	}
	return nil
}

func (x *Challenge) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Challenge) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type ProblemMetadata struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProblemId          string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Title              string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tags               []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	TestcaseRun        *TestCaseRunOnly       `protobuf:"bytes,5,opt,name=testcase_run,json=testcaseRun,proto3" json:"testcase_run,omitempty"`
	Difficulty         string                 `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SupportedLanguages []string               `protobuf:"bytes,7,rep,name=supported_languages,json=supportedLanguages,proto3" json:"supported_languages,omitempty"`
	Validated          bool                   `protobuf:"varint,8,opt,name=validated,proto3" json:"validated,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProblemMetadata) Reset() {
	*x = ProblemMetadata{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemMetadata) ProtoMessage() {}

func (x *ProblemMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemMetadata.ProtoReflect.Descriptor instead.
func (*ProblemMetadata) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{17}
}

func (x *ProblemMetadata) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ProblemMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProblemMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProblemMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProblemMetadata) GetTestcaseRun() *TestCaseRunOnly {
	if x != nil {
		return x.TestcaseRun
	}
	return nil
}

func (x *ProblemMetadata) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ProblemMetadata) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *ProblemMetadata) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

type ChallengeProblemMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Score         int32                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	TimeTaken     int64                  `protobuf:"varint,3,opt,name=time_taken,json=timeTaken,proto3" json:"time_taken,omitempty"`
	CompletedAt   int64                  `protobuf:"varint,4,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChallengeProblemMetadata) Reset() {
	*x = ChallengeProblemMetadata{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeProblemMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeProblemMetadata) ProtoMessage() {}

func (x *ChallengeProblemMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeProblemMetadata.ProtoReflect.Descriptor instead.
func (*ChallengeProblemMetadata) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{18}
}

func (x *ChallengeProblemMetadata) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ChallengeProblemMetadata) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ChallengeProblemMetadata) GetTimeTaken() int64 {
	if x != nil {
		return x.TimeTaken
	}
	return 0
}

func (x *ChallengeProblemMetadata) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

type ProblemMetadataList struct {
	state                    protoimpl.MessageState      `protogen:"open.v1"`
	ChallengeProblemMetadata []*ChallengeProblemMetadata `protobuf:"bytes,1,rep,name=challenge_problem_metadata,json=challengeProblemMetadata,proto3" json:"challenge_problem_metadata,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ProblemMetadataList) Reset() {
	*x = ProblemMetadataList{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemMetadataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemMetadataList) ProtoMessage() {}

func (x *ProblemMetadataList) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemMetadataList.ProtoReflect.Descriptor instead.
func (*ProblemMetadataList) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{19}
}

func (x *ProblemMetadataList) GetChallengeProblemMetadata() []*ChallengeProblemMetadata {
	if x != nil {
		return x.ChallengeProblemMetadata
	}
	return nil
}

type LeaderboardEntry struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserId            string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProblemsCompleted int32                  `protobuf:"varint,2,opt,name=problems_completed,json=problemsCompleted,proto3" json:"problems_completed,omitempty"`
	TotalScore        int32                  `protobuf:"varint,3,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	Rank              int32                  `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LeaderboardEntry) Reset() {
	*x = LeaderboardEntry{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardEntry) ProtoMessage() {}

func (x *LeaderboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardEntry.ProtoReflect.Descriptor instead.
func (*LeaderboardEntry) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{20}
}

func (x *LeaderboardEntry) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LeaderboardEntry) GetProblemsCompleted() int32 {
	if x != nil {
		return x.ProblemsCompleted
	}
	return 0
}

func (x *LeaderboardEntry) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *LeaderboardEntry) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type UserStats struct {
	state               protoimpl.MessageState    `protogen:"open.v1"`
	UserId              string                    `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProblemsCompleted   int32                     `protobuf:"varint,2,opt,name=problems_completed,json=problemsCompleted,proto3" json:"problems_completed,omitempty"`
	TotalTimeTaken      int64                     `protobuf:"varint,3,opt,name=total_time_taken,json=totalTimeTaken,proto3" json:"total_time_taken,omitempty"`
	ChallengesCompleted int32                     `protobuf:"varint,4,opt,name=challenges_completed,json=challengesCompleted,proto3" json:"challenges_completed,omitempty"`
	Score               float64                   `protobuf:"fixed64,5,opt,name=score,proto3" json:"score,omitempty"`
	ChallengeStats      map[string]*ChallengeStat `protobuf:"bytes,6,rep,name=challenge_stats,json=challengeStats,proto3" json:"challenge_stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UserStats) Reset() {
	*x = UserStats{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStats) ProtoMessage() {}

func (x *UserStats) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStats.ProtoReflect.Descriptor instead.
func (*UserStats) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{21}
}

func (x *UserStats) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStats) GetProblemsCompleted() int32 {
	if x != nil {
		return x.ProblemsCompleted
	}
	return 0
}

func (x *UserStats) GetTotalTimeTaken() int64 {
	if x != nil {
		return x.TotalTimeTaken
	}
	return 0
}

func (x *UserStats) GetChallengesCompleted() int32 {
	if x != nil {
		return x.ChallengesCompleted
	}
	return 0
}

func (x *UserStats) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserStats) GetChallengeStats() map[string]*ChallengeStat {
	if x != nil {
		return x.ChallengeStats
	}
	return nil
}

type ChallengeStat struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Rank              int32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	ProblemsCompleted int32                  `protobuf:"varint,2,opt,name=problems_completed,json=problemsCompleted,proto3" json:"problems_completed,omitempty"`
	TotalScore        int32                  `protobuf:"varint,3,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ChallengeStat) Reset() {
	*x = ChallengeStat{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeStat) ProtoMessage() {}

func (x *ChallengeStat) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeStat.ProtoReflect.Descriptor instead.
func (*ChallengeStat) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{22}
}

func (x *ChallengeStat) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ChallengeStat) GetProblemsCompleted() int32 {
	if x != nil {
		return x.ProblemsCompleted
	}
	return 0
}

func (x *ChallengeStat) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

// Request/Response Messages
type CreateChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	CreatorId     string                 `protobuf:"bytes,2,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Difficulty    string                 `protobuf:"bytes,3,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	IsPrivate     bool                   `protobuf:"varint,4,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	ProblemIds    []string               `protobuf:"bytes,5,rep,name=problem_ids,json=problemIds,proto3" json:"problem_ids,omitempty"`
	TimeLimit     int32                  `protobuf:"varint,6,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	ExpectedStart int64                  `protobuf:"varint,7,opt,name=expected_start,json=expectedStart,proto3" json:"expected_start,omitempty"`
	TraceID       string                 `protobuf:"bytes,8,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChallengeRequest) Reset() {
	*x = CreateChallengeRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChallengeRequest) ProtoMessage() {}

func (x *CreateChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChallengeRequest.ProtoReflect.Descriptor instead.
func (*CreateChallengeRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{23}
}

func (x *CreateChallengeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateChallengeRequest) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *CreateChallengeRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *CreateChallengeRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *CreateChallengeRequest) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

func (x *CreateChallengeRequest) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *CreateChallengeRequest) GetExpectedStart() int64 {
	if x != nil {
		return x.ExpectedStart
	}
	return 0
}

func (x *CreateChallengeRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type CreateChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // Only for private challenges
	JoinUrl       string                 `protobuf:"bytes,3,opt,name=join_url,json=joinUrl,proto3" json:"join_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChallengeResponse) Reset() {
	*x = CreateChallengeResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChallengeResponse) ProtoMessage() {}

func (x *CreateChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChallengeResponse.ProtoReflect.Descriptor instead.
func (*CreateChallengeResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{24}
}

func (x *CreateChallengeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateChallengeResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateChallengeResponse) GetJoinUrl() string {
	if x != nil {
		return x.JoinUrl
	}
	return ""
}

type GetChallengeDetailsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // For user-specific metadata
	TraceID       string                 `protobuf:"bytes,4,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChallengeDetailsRequest) Reset() {
	*x = GetChallengeDetailsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChallengeDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeDetailsRequest) ProtoMessage() {}

func (x *GetChallengeDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetChallengeDetailsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{25}
}

func (x *GetChallengeDetailsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetChallengeDetailsRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GetChallengeDetailsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetChallengeDetailsRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetChallengeDetailsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Challenge     *Challenge             `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Leaderboard   []*LeaderboardEntry    `protobuf:"bytes,2,rep,name=leaderboard,proto3" json:"leaderboard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChallengeDetailsResponse) Reset() {
	*x = GetChallengeDetailsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChallengeDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeDetailsResponse) ProtoMessage() {}

func (x *GetChallengeDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetChallengeDetailsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{26}
}

func (x *GetChallengeDetailsResponse) GetChallenge() *Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *GetChallengeDetailsResponse) GetLeaderboard() []*LeaderboardEntry {
	if x != nil {
		return x.Leaderboard
	}
	return nil
}

type GetPublicChallengesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Difficulty    string                 `protobuf:"bytes,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	IsActive      bool                   `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	UserId        string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,6,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPublicChallengesRequest) Reset() {
	*x = GetPublicChallengesRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicChallengesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicChallengesRequest) ProtoMessage() {}

func (x *GetPublicChallengesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicChallengesRequest.ProtoReflect.Descriptor instead.
func (*GetPublicChallengesRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{27}
}

func (x *GetPublicChallengesRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *GetPublicChallengesRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GetPublicChallengesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetPublicChallengesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPublicChallengesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetPublicChallengesRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetPublicChallengesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Challenges    []*Challenge           `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPublicChallengesResponse) Reset() {
	*x = GetPublicChallengesResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicChallengesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicChallengesResponse) ProtoMessage() {}

func (x *GetPublicChallengesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicChallengesResponse.ProtoReflect.Descriptor instead.
func (*GetPublicChallengesResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{28}
}

func (x *GetPublicChallengesResponse) GetChallenges() []*Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type JoinChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChallengeId   string                 `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Password      *string                `protobuf:"bytes,3,opt,name=password,proto3,oneof" json:"password,omitempty"` // Required for private challenges
	TraceID       string                 `protobuf:"bytes,4,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinChallengeRequest) Reset() {
	*x = JoinChallengeRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChallengeRequest) ProtoMessage() {}

func (x *JoinChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChallengeRequest.ProtoReflect.Descriptor instead.
func (*JoinChallengeRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{29}
}

func (x *JoinChallengeRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *JoinChallengeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JoinChallengeRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *JoinChallengeRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type JoinChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChallengeId   string                 `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinChallengeResponse) Reset() {
	*x = JoinChallengeResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChallengeResponse) ProtoMessage() {}

func (x *JoinChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChallengeResponse.ProtoReflect.Descriptor instead.
func (*JoinChallengeResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{30}
}

func (x *JoinChallengeResponse) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *JoinChallengeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinChallengeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StartChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChallengeId   string                 `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,3,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartChallengeRequest) Reset() {
	*x = StartChallengeRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChallengeRequest) ProtoMessage() {}

func (x *StartChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChallengeRequest.ProtoReflect.Descriptor instead.
func (*StartChallengeRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{31}
}

func (x *StartChallengeRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *StartChallengeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StartChallengeRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type StartChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	StartTime     int64                  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartChallengeResponse) Reset() {
	*x = StartChallengeResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChallengeResponse) ProtoMessage() {}

func (x *StartChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChallengeResponse.ProtoReflect.Descriptor instead.
func (*StartChallengeResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{32}
}

func (x *StartChallengeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartChallengeResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type EndChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChallengeId   string                 `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,3,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndChallengeRequest) Reset() {
	*x = EndChallengeRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndChallengeRequest) ProtoMessage() {}

func (x *EndChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndChallengeRequest.ProtoReflect.Descriptor instead.
func (*EndChallengeRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{33}
}

func (x *EndChallengeRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *EndChallengeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EndChallengeRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type EndChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Leaderboard   []*LeaderboardEntry    `protobuf:"bytes,2,rep,name=leaderboard,proto3" json:"leaderboard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndChallengeResponse) Reset() {
	*x = EndChallengeResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndChallengeResponse) ProtoMessage() {}

func (x *EndChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndChallengeResponse.ProtoReflect.Descriptor instead.
func (*EndChallengeResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{34}
}

func (x *EndChallengeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EndChallengeResponse) GetLeaderboard() []*LeaderboardEntry {
	if x != nil {
		return x.Leaderboard
	}
	return nil
}

type GetSubmissionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubmissionId  string                 `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionStatusRequest) Reset() {
	*x = GetSubmissionStatusRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionStatusRequest) ProtoMessage() {}

func (x *GetSubmissionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionStatusRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{35}
}

func (x *GetSubmissionStatusRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *GetSubmissionStatusRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetSubmissionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Submission    *Submission            `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionStatusResponse) Reset() {
	*x = GetSubmissionStatusResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionStatusResponse) ProtoMessage() {}

func (x *GetSubmissionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionStatusResponse.ProtoReflect.Descriptor instead.
func (*GetSubmissionStatusResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{36}
}

func (x *GetSubmissionStatusResponse) GetSubmission() *Submission {
	if x != nil {
		return x.Submission
	}
	return nil
}

type GetChallengeSubmissionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChallengeId   string                 `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChallengeSubmissionsRequest) Reset() {
	*x = GetChallengeSubmissionsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChallengeSubmissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeSubmissionsRequest) ProtoMessage() {}

func (x *GetChallengeSubmissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeSubmissionsRequest.ProtoReflect.Descriptor instead.
func (*GetChallengeSubmissionsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{37}
}

func (x *GetChallengeSubmissionsRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *GetChallengeSubmissionsRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetChallengeSubmissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Submissions   []*Submission          `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChallengeSubmissionsResponse) Reset() {
	*x = GetChallengeSubmissionsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChallengeSubmissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeSubmissionsResponse) ProtoMessage() {}

func (x *GetChallengeSubmissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeSubmissionsResponse.ProtoReflect.Descriptor instead.
func (*GetChallengeSubmissionsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{38}
}

func (x *GetChallengeSubmissionsResponse) GetSubmissions() []*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

type GetUserStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserStatsRequest) Reset() {
	*x = GetUserStatsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserStatsRequest) ProtoMessage() {}

func (x *GetUserStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserStatsRequest.ProtoReflect.Descriptor instead.
func (*GetUserStatsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{39}
}

func (x *GetUserStatsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserStatsRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetUserStatsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stats         *UserStats             `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserStatsResponse) Reset() {
	*x = GetUserStatsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserStatsResponse) ProtoMessage() {}

func (x *GetUserStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserStatsResponse.ProtoReflect.Descriptor instead.
func (*GetUserStatsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{40}
}

func (x *GetUserStatsResponse) GetStats() *UserStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type GetChallengeUserStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChallengeId   string                 `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,3,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChallengeUserStatsRequest) Reset() {
	*x = GetChallengeUserStatsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChallengeUserStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeUserStatsRequest) ProtoMessage() {}

func (x *GetChallengeUserStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeUserStatsRequest.ProtoReflect.Descriptor instead.
func (*GetChallengeUserStatsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{41}
}

func (x *GetChallengeUserStatsRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *GetChallengeUserStatsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetChallengeUserStatsRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetChallengeUserStatsResponse struct {
	state                    protoimpl.MessageState      `protogen:"open.v1"`
	UserId                   string                      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProblemsCompleted        int32                       `protobuf:"varint,2,opt,name=problems_completed,json=problemsCompleted,proto3" json:"problems_completed,omitempty"`
	TotalScore               int32                       `protobuf:"varint,3,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	Rank                     int32                       `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	ChallengeProblemMetadata []*ChallengeProblemMetadata `protobuf:"bytes,5,rep,name=challenge_problem_metadata,json=challengeProblemMetadata,proto3" json:"challenge_problem_metadata,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetChallengeUserStatsResponse) Reset() {
	*x = GetChallengeUserStatsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChallengeUserStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeUserStatsResponse) ProtoMessage() {}

func (x *GetChallengeUserStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeUserStatsResponse.ProtoReflect.Descriptor instead.
func (*GetChallengeUserStatsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{42}
}

func (x *GetChallengeUserStatsResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetChallengeUserStatsResponse) GetProblemsCompleted() int32 {
	if x != nil {
		return x.ProblemsCompleted
	}
	return 0
}

func (x *GetChallengeUserStatsResponse) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *GetChallengeUserStatsResponse) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetChallengeUserStatsResponse) GetChallengeProblemMetadata() []*ChallengeProblemMetadata {
	if x != nil {
		return x.ChallengeProblemMetadata
	}
	return nil
}

type GetTopKGlobalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	K             int32                  `protobuf:"varint,1,opt,name=k,proto3" json:"k,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopKGlobalRequest) Reset() {
	*x = GetTopKGlobalRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopKGlobalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopKGlobalRequest) ProtoMessage() {}

func (x *GetTopKGlobalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopKGlobalRequest.ProtoReflect.Descriptor instead.
func (*GetTopKGlobalRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{43}
}

func (x *GetTopKGlobalRequest) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *GetTopKGlobalRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetTopKGlobalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*UserScore           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopKGlobalResponse) Reset() {
	*x = GetTopKGlobalResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopKGlobalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopKGlobalResponse) ProtoMessage() {}

func (x *GetTopKGlobalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopKGlobalResponse.ProtoReflect.Descriptor instead.
func (*GetTopKGlobalResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{44}
}

func (x *GetTopKGlobalResponse) GetUsers() []*UserScore {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetTopKEntityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        string                 `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopKEntityRequest) Reset() {
	*x = GetTopKEntityRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopKEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopKEntityRequest) ProtoMessage() {}

func (x *GetTopKEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopKEntityRequest.ProtoReflect.Descriptor instead.
func (*GetTopKEntityRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{45}
}

func (x *GetTopKEntityRequest) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *GetTopKEntityRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetTopKEntityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*UserScore           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopKEntityResponse) Reset() {
	*x = GetTopKEntityResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopKEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopKEntityResponse) ProtoMessage() {}

func (x *GetTopKEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopKEntityResponse.ProtoReflect.Descriptor instead.
func (*GetTopKEntityResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{46}
}

func (x *GetTopKEntityResponse) GetUsers() []*UserScore {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetUserRankRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRankRequest) Reset() {
	*x = GetUserRankRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRankRequest) ProtoMessage() {}

func (x *GetUserRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRankRequest.ProtoReflect.Descriptor instead.
func (*GetUserRankRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{47}
}

func (x *GetUserRankRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserRankRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetUserRankResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GlobalRank    int32                  `protobuf:"varint,1,opt,name=global_rank,json=globalRank,proto3" json:"global_rank,omitempty"`
	EntityRank    int32                  `protobuf:"varint,2,opt,name=entity_rank,json=entityRank,proto3" json:"entity_rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRankResponse) Reset() {
	*x = GetUserRankResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRankResponse) ProtoMessage() {}

func (x *GetUserRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRankResponse.ProtoReflect.Descriptor instead.
func (*GetUserRankResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{48}
}

func (x *GetUserRankResponse) GetGlobalRank() int32 {
	if x != nil {
		return x.GlobalRank
	}
	return 0
}

func (x *GetUserRankResponse) GetEntityRank() int32 {
	if x != nil {
		return x.EntityRank
	}
	return 0
}

type GetLeaderboardDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderboardDataRequest) Reset() {
	*x = GetLeaderboardDataRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderboardDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardDataRequest) ProtoMessage() {}

func (x *GetLeaderboardDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardDataRequest.ProtoReflect.Descriptor instead.
func (*GetLeaderboardDataRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{49}
}

func (x *GetLeaderboardDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetLeaderboardDataRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetLeaderboardDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score         float64                `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Entity        string                 `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
	GlobalRank    int32                  `protobuf:"varint,4,opt,name=global_rank,json=globalRank,proto3" json:"global_rank,omitempty"`
	EntityRank    int32                  `protobuf:"varint,5,opt,name=entity_rank,json=entityRank,proto3" json:"entity_rank,omitempty"`
	TopKGlobal    []*UserScore           `protobuf:"bytes,6,rep,name=top_k_global,json=topKGlobal,proto3" json:"top_k_global,omitempty"`
	TopKEntity    []*UserScore           `protobuf:"bytes,7,rep,name=top_k_entity,json=topKEntity,proto3" json:"top_k_entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderboardDataResponse) Reset() {
	*x = GetLeaderboardDataResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderboardDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardDataResponse) ProtoMessage() {}

func (x *GetLeaderboardDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardDataResponse.ProtoReflect.Descriptor instead.
func (*GetLeaderboardDataResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{50}
}

func (x *GetLeaderboardDataResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetLeaderboardDataResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetLeaderboardDataResponse) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *GetLeaderboardDataResponse) GetGlobalRank() int32 {
	if x != nil {
		return x.GlobalRank
	}
	return 0
}

func (x *GetLeaderboardDataResponse) GetEntityRank() int32 {
	if x != nil {
		return x.EntityRank
	}
	return 0
}

func (x *GetLeaderboardDataResponse) GetTopKGlobal() []*UserScore {
	if x != nil {
		return x.TopKGlobal
	}
	return nil
}

func (x *GetLeaderboardDataResponse) GetTopKEntity() []*UserScore {
	if x != nil {
		return x.TopKEntity
	}
	return nil
}

type UserScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score         float64                `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Entity        string                 `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserScore) Reset() {
	*x = UserScore{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScore) ProtoMessage() {}

func (x *UserScore) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScore.ProtoReflect.Descriptor instead.
func (*UserScore) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{51}
}

func (x *UserScore) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserScore) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserScore) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

type GetMonthlyActivityHeatmapRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Month         int32                  `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"` // 1 to 12
	Year          int32                  `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	TraceID       string                 `protobuf:"bytes,4,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonthlyActivityHeatmapRequest) Reset() {
	*x = GetMonthlyActivityHeatmapRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonthlyActivityHeatmapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyActivityHeatmapRequest) ProtoMessage() {}

func (x *GetMonthlyActivityHeatmapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyActivityHeatmapRequest.ProtoReflect.Descriptor instead.
func (*GetMonthlyActivityHeatmapRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{52}
}

func (x *GetMonthlyActivityHeatmapRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetMonthlyActivityHeatmapRequest) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *GetMonthlyActivityHeatmapRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetMonthlyActivityHeatmapRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type ActivityDay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          string                 `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // format: YYYY-MM-DD
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	IsActive      bool                   `protobuf:"varint,3,opt,name=isActive,proto3" json:"isActive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityDay) Reset() {
	*x = ActivityDay{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDay) ProtoMessage() {}

func (x *ActivityDay) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDay.ProtoReflect.Descriptor instead.
func (*ActivityDay) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{53}
}

func (x *ActivityDay) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ActivityDay) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ActivityDay) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type GetMonthlyActivityHeatmapResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*ActivityDay         `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMonthlyActivityHeatmapResponse) Reset() {
	*x = GetMonthlyActivityHeatmapResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonthlyActivityHeatmapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyActivityHeatmapResponse) ProtoMessage() {}

func (x *GetMonthlyActivityHeatmapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyActivityHeatmapResponse.ProtoReflect.Descriptor instead.
func (*GetMonthlyActivityHeatmapResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{54}
}

func (x *GetMonthlyActivityHeatmapResponse) GetData() []*ActivityDay {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetLeaderBoardOptionalCountryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int64                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Country       *string                `protobuf:"bytes,3,opt,name=country,proto3,oneof" json:"country,omitempty"`
	Username      *string                `protobuf:"bytes,4,opt,name=username,proto3,oneof" json:"username,omitempty"`
	UserId        string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,6,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderBoardOptionalCountryRequest) Reset() {
	*x = GetLeaderBoardOptionalCountryRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderBoardOptionalCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderBoardOptionalCountryRequest) ProtoMessage() {}

func (x *GetLeaderBoardOptionalCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderBoardOptionalCountryRequest.ProtoReflect.Descriptor instead.
func (*GetLeaderBoardOptionalCountryRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{55}
}

func (x *GetLeaderBoardOptionalCountryRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetLeaderBoardOptionalCountryRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetLeaderBoardOptionalCountryRequest) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *GetLeaderBoardOptionalCountryRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *GetLeaderBoardOptionalCountryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetLeaderBoardOptionalCountryRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetLeaderBoardOptionalCountryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *LeaderboardSingle     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	FilterType    *string                `protobuf:"bytes,2,opt,name=filter_type,json=filterType,proto3,oneof" json:"filter_type,omitempty"` // country or global
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderBoardOptionalCountryResponse) Reset() {
	*x = GetLeaderBoardOptionalCountryResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderBoardOptionalCountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderBoardOptionalCountryResponse) ProtoMessage() {}

func (x *GetLeaderBoardOptionalCountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderBoardOptionalCountryResponse.ProtoReflect.Descriptor instead.
func (*GetLeaderBoardOptionalCountryResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{56}
}

func (x *GetLeaderBoardOptionalCountryResponse) GetData() *LeaderboardSingle {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetLeaderBoardOptionalCountryResponse) GetFilterType() string {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return ""
}

type LeaderboardSingle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	CountryRank   *int64                 `protobuf:"varint,2,opt,name=country_rank,json=countryRank,proto3,oneof" json:"country_rank,omitempty"`
	GlobalRank    int64                  `protobuf:"varint,3,opt,name=global_rank,json=globalRank,proto3" json:"global_rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderboardSingle) Reset() {
	*x = LeaderboardSingle{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardSingle) ProtoMessage() {}

func (x *LeaderboardSingle) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardSingle.ProtoReflect.Descriptor instead.
func (*LeaderboardSingle) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{57}
}

func (x *LeaderboardSingle) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LeaderboardSingle) GetCountryRank() int64 {
	if x != nil && x.CountryRank != nil {
		return *x.CountryRank
	}
	return 0
}

func (x *LeaderboardSingle) GetGlobalRank() int64 {
	if x != nil {
		return x.GlobalRank
	}
	return 0
}

type GetProblemsDoneStatisticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      *string                `protobuf:"bytes,1,opt,name=username,proto3,oneof" json:"username,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,3,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemsDoneStatisticsRequest) Reset() {
	*x = GetProblemsDoneStatisticsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemsDoneStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsDoneStatisticsRequest) ProtoMessage() {}

func (x *GetProblemsDoneStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsDoneStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetProblemsDoneStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{58}
}

func (x *GetProblemsDoneStatisticsRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *GetProblemsDoneStatisticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetProblemsDoneStatisticsRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetProblemsDoneStatisticsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Data          *ProblemsDoneStatistics `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemsDoneStatisticsResponse) Reset() {
	*x = GetProblemsDoneStatisticsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemsDoneStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemsDoneStatisticsResponse) ProtoMessage() {}

func (x *GetProblemsDoneStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemsDoneStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetProblemsDoneStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{59}
}

func (x *GetProblemsDoneStatisticsResponse) GetData() *ProblemsDoneStatistics {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProblemsDoneStatistics struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MaxEasyCount    int32                  `protobuf:"varint,1,opt,name=max_easy_count,json=maxEasyCount,proto3" json:"max_easy_count,omitempty"`
	DoneEasyCount   int32                  `protobuf:"varint,2,opt,name=done_easy_count,json=doneEasyCount,proto3" json:"done_easy_count,omitempty"`
	MaxMediumCount  int32                  `protobuf:"varint,3,opt,name=max_medium_count,json=maxMediumCount,proto3" json:"max_medium_count,omitempty"`
	DoneMediumCount int32                  `protobuf:"varint,4,opt,name=done_medium_count,json=doneMediumCount,proto3" json:"done_medium_count,omitempty"`
	MaxHardCount    int32                  `protobuf:"varint,5,opt,name=max_hard_count,json=maxHardCount,proto3" json:"max_hard_count,omitempty"`
	DoneHardCount   int32                  `protobuf:"varint,6,opt,name=done_hard_count,json=doneHardCount,proto3" json:"done_hard_count,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProblemsDoneStatistics) Reset() {
	*x = ProblemsDoneStatistics{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemsDoneStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemsDoneStatistics) ProtoMessage() {}

func (x *ProblemsDoneStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemsDoneStatistics.ProtoReflect.Descriptor instead.
func (*ProblemsDoneStatistics) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{60}
}

func (x *ProblemsDoneStatistics) GetMaxEasyCount() int32 {
	if x != nil {
		return x.MaxEasyCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetDoneEasyCount() int32 {
	if x != nil {
		return x.DoneEasyCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetMaxMediumCount() int32 {
	if x != nil {
		return x.MaxMediumCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetDoneMediumCount() int32 {
	if x != nil {
		return x.DoneMediumCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetMaxHardCount() int32 {
	if x != nil {
		return x.MaxHardCount
	}
	return 0
}

func (x *ProblemsDoneStatistics) GetDoneHardCount() int32 {
	if x != nil {
		return x.DoneHardCount
	}
	return 0
}

type Timestamp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seconds       int64                  `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos         int32                  `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{61}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type TestCase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Input         string                 `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Expected      string                 `protobuf:"bytes,3,opt,name=expected,proto3" json:"expected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{62}
}

func (x *TestCase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestCase) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TestCase) GetExpected() string {
	if x != nil {
		return x.Expected
	}
	return ""
}

type TestCases struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           []*TestCase            `protobuf:"bytes,1,rep,name=run,proto3" json:"run,omitempty"`
	Submit        []*TestCase            `protobuf:"bytes,2,rep,name=submit,proto3" json:"submit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCases) Reset() {
	*x = TestCases{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCases) ProtoMessage() {}

func (x *TestCases) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCases.ProtoReflect.Descriptor instead.
func (*TestCases) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{63}
}

func (x *TestCases) GetRun() []*TestCase {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *TestCases) GetSubmit() []*TestCase {
	if x != nil {
		return x.Submit
	}
	return nil
}

type TestCaseRunOnly struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           []*TestCase            `protobuf:"bytes,1,rep,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCaseRunOnly) Reset() {
	*x = TestCaseRunOnly{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCaseRunOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseRunOnly) ProtoMessage() {}

func (x *TestCaseRunOnly) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseRunOnly.ProtoReflect.Descriptor instead.
func (*TestCaseRunOnly) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{64}
}

func (x *TestCaseRunOnly) GetRun() []*TestCase {
	if x != nil {
		return x.Run
	}
	return nil
}

type ValidationCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Placeholder   string                 `protobuf:"bytes,1,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Template      string                 `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationCode) Reset() {
	*x = ValidationCode{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationCode) ProtoMessage() {}

func (x *ValidationCode) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationCode.ProtoReflect.Descriptor instead.
func (*ValidationCode) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{65}
}

func (x *ValidationCode) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *ValidationCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ValidationCode) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

type CreateProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    string                 `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	TraceID       string                 `protobuf:"bytes,5,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProblemRequest) Reset() {
	*x = CreateProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemRequest) ProtoMessage() {}

func (x *CreateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{66}
}

func (x *CreateProblemRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateProblemRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateProblemRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateProblemRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *CreateProblemRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type UpdateProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Title         *string                `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    *string                `protobuf:"bytes,5,opt,name=difficulty,proto3,oneof" json:"difficulty,omitempty"`
	Visible       *bool                  `protobuf:"varint,6,opt,name=visible,proto3,oneof" json:"visible,omitempty"`
	TraceID       string                 `protobuf:"bytes,7,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemRequest) Reset() {
	*x = UpdateProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemRequest) ProtoMessage() {}

func (x *UpdateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateProblemRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateProblemRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateProblemRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateProblemRequest) GetDifficulty() string {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return ""
}

func (x *UpdateProblemRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *UpdateProblemRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type DeleteProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProblemRequest) Reset() {
	*x = DeleteProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemRequest) ProtoMessage() {}

func (x *DeleteProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{68}
}

func (x *DeleteProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteProblemRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemRequest) Reset() {
	*x = GetProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemRequest) ProtoMessage() {}

func (x *GetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{69}
}

func (x *GetProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *GetProblemRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type ListProblemsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    string                 `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SearchQuery   string                 `protobuf:"bytes,5,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
	TraceID       string                 `protobuf:"bytes,6,opt,name=traceID,proto3" json:"traceID,omitempty"`
	IsAdmin       bool                   `protobuf:"varint,7,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProblemsRequest) Reset() {
	*x = ListProblemsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProblemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsRequest) ProtoMessage() {}

func (x *ListProblemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsRequest.ProtoReflect.Descriptor instead.
func (*ListProblemsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{70}
}

func (x *ListProblemsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProblemsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListProblemsRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ListProblemsRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *ListProblemsRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *ListProblemsRequest) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

type AddTestCasesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Testcases     *TestCases             `protobuf:"bytes,2,opt,name=testcases,proto3" json:"testcases,omitempty"`
	TraceID       string                 `protobuf:"bytes,3,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTestCasesRequest) Reset() {
	*x = AddTestCasesRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestCasesRequest) ProtoMessage() {}

func (x *AddTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestCasesRequest.ProtoReflect.Descriptor instead.
func (*AddTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{71}
}

func (x *AddTestCasesRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *AddTestCasesRequest) GetTestcases() *TestCases {
	if x != nil {
		return x.Testcases
	}
	return nil
}

func (x *AddTestCasesRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type AddLanguageSupportRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProblemId      string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language       string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	ValidationCode *ValidationCode        `protobuf:"bytes,3,opt,name=validation_code,json=validationCode,proto3" json:"validation_code,omitempty"`
	TraceID        string                 `protobuf:"bytes,4,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddLanguageSupportRequest) Reset() {
	*x = AddLanguageSupportRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLanguageSupportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLanguageSupportRequest) ProtoMessage() {}

func (x *AddLanguageSupportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLanguageSupportRequest.ProtoReflect.Descriptor instead.
func (*AddLanguageSupportRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{72}
}

func (x *AddLanguageSupportRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *AddLanguageSupportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AddLanguageSupportRequest) GetValidationCode() *ValidationCode {
	if x != nil {
		return x.ValidationCode
	}
	return nil
}

func (x *AddLanguageSupportRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type UpdateLanguageSupportRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProblemId      string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language       string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	ValidationCode *ValidationCode        `protobuf:"bytes,3,opt,name=validation_code,json=validationCode,proto3" json:"validation_code,omitempty"`
	TraceID        string                 `protobuf:"bytes,4,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateLanguageSupportRequest) Reset() {
	*x = UpdateLanguageSupportRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLanguageSupportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguageSupportRequest) ProtoMessage() {}

func (x *UpdateLanguageSupportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguageSupportRequest.ProtoReflect.Descriptor instead.
func (*UpdateLanguageSupportRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateLanguageSupportRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateLanguageSupportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UpdateLanguageSupportRequest) GetValidationCode() *ValidationCode {
	if x != nil {
		return x.ValidationCode
	}
	return nil
}

func (x *UpdateLanguageSupportRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type RemoveLanguageSupportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	TraceID       string                 `protobuf:"bytes,3,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveLanguageSupportRequest) Reset() {
	*x = RemoveLanguageSupportRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveLanguageSupportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLanguageSupportRequest) ProtoMessage() {}

func (x *RemoveLanguageSupportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLanguageSupportRequest.ProtoReflect.Descriptor instead.
func (*RemoveLanguageSupportRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{74}
}

func (x *RemoveLanguageSupportRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RemoveLanguageSupportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RemoveLanguageSupportRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type Problem struct {
	state              protoimpl.MessageState     `protogen:"open.v1"`
	ProblemId          string                     `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	CreatedAt          *Timestamp                 `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *Timestamp                 `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt          *Timestamp                 `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Title              string                     `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                     `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Tags               []string                   `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Testcases          *TestCases                 `protobuf:"bytes,8,opt,name=testcases,proto3" json:"testcases,omitempty"`
	Difficulty         string                     `protobuf:"bytes,9,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SupportedLanguages []string                   `protobuf:"bytes,10,rep,name=supported_languages,json=supportedLanguages,proto3" json:"supported_languages,omitempty"`
	ValidateCode       map[string]*ValidationCode `protobuf:"bytes,11,rep,name=validate_code,json=validateCode,proto3" json:"validate_code,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Validated          bool                       `protobuf:"varint,12,opt,name=validated,proto3" json:"validated,omitempty"`
	ValidatedAt        *Timestamp                 `protobuf:"bytes,13,opt,name=validated_at,json=validatedAt,proto3" json:"validated_at,omitempty"`
	Visible            bool                       `protobuf:"varint,14,opt,name=visible,proto3" json:"visible,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Problem) Reset() {
	*x = Problem{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{75}
}

func (x *Problem) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Problem) GetCreatedAt() *Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Problem) GetUpdatedAt() *Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Problem) GetDeletedAt() *Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Problem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Problem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Problem) GetTestcases() *TestCases {
	if x != nil {
		return x.Testcases
	}
	return nil
}

func (x *Problem) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *Problem) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *Problem) GetValidateCode() map[string]*ValidationCode {
	if x != nil {
		return x.ValidateCode
	}
	return nil
}

func (x *Problem) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *Problem) GetValidatedAt() *Timestamp {
	if x != nil {
		return x.ValidatedAt
	}
	return nil
}

func (x *Problem) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type CreateProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProblemResponse) Reset() {
	*x = CreateProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemResponse) ProtoMessage() {}

func (x *CreateProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemResponse.ProtoReflect.Descriptor instead.
func (*CreateProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{76}
}

func (x *CreateProblemResponse) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type UpdateProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemResponse) Reset() {
	*x = UpdateProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemResponse) ProtoMessage() {}

func (x *UpdateProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemResponse.ProtoReflect.Descriptor instead.
func (*UpdateProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type DeleteProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProblemResponse) Reset() {
	*x = DeleteProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemResponse) ProtoMessage() {}

func (x *DeleteProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemResponse.ProtoReflect.Descriptor instead.
func (*DeleteProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{78}
}

func (x *DeleteProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type GetProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Problem       *Problem               `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	ErrorType     string                 `protobuf:"bytes,2,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemResponse) Reset() {
	*x = GetProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemResponse) ProtoMessage() {}

func (x *GetProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemResponse.ProtoReflect.Descriptor instead.
func (*GetProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{79}
}

func (x *GetProblemResponse) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

func (x *GetProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type ListProblemsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Problems      []*Problem             `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ErrorType     string                 `protobuf:"bytes,5,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProblemsResponse) Reset() {
	*x = ListProblemsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProblemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsResponse) ProtoMessage() {}

func (x *ListProblemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsResponse.ProtoReflect.Descriptor instead.
func (*ListProblemsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{80}
}

func (x *ListProblemsResponse) GetProblems() []*Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *ListProblemsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListProblemsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProblemsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProblemsResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type AddTestCasesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AddedCount    int32                  `protobuf:"varint,3,opt,name=added_count,json=addedCount,proto3" json:"added_count,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTestCasesResponse) Reset() {
	*x = AddTestCasesResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestCasesResponse) ProtoMessage() {}

func (x *AddTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestCasesResponse.ProtoReflect.Descriptor instead.
func (*AddTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{81}
}

func (x *AddTestCasesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddTestCasesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddTestCasesResponse) GetAddedCount() int32 {
	if x != nil {
		return x.AddedCount
	}
	return 0
}

func (x *AddTestCasesResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type AddLanguageSupportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddLanguageSupportResponse) Reset() {
	*x = AddLanguageSupportResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLanguageSupportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLanguageSupportResponse) ProtoMessage() {}

func (x *AddLanguageSupportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLanguageSupportResponse.ProtoReflect.Descriptor instead.
func (*AddLanguageSupportResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{82}
}

func (x *AddLanguageSupportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddLanguageSupportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddLanguageSupportResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type UpdateLanguageSupportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLanguageSupportResponse) Reset() {
	*x = UpdateLanguageSupportResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLanguageSupportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguageSupportResponse) ProtoMessage() {}

func (x *UpdateLanguageSupportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguageSupportResponse.ProtoReflect.Descriptor instead.
func (*UpdateLanguageSupportResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{83}
}

func (x *UpdateLanguageSupportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateLanguageSupportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateLanguageSupportResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type RemoveLanguageSupportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveLanguageSupportResponse) Reset() {
	*x = RemoveLanguageSupportResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveLanguageSupportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLanguageSupportResponse) ProtoMessage() {}

func (x *RemoveLanguageSupportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLanguageSupportResponse.ProtoReflect.Descriptor instead.
func (*RemoveLanguageSupportResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{84}
}

func (x *RemoveLanguageSupportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveLanguageSupportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveLanguageSupportResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type DeleteTestCaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestcaseId    string                 `protobuf:"bytes,2,opt,name=testcase_id,json=testcaseId,proto3" json:"testcase_id,omitempty"`
	IsRunTestcase bool                   `protobuf:"varint,3,opt,name=is_run_testcase,json=isRunTestcase,proto3" json:"is_run_testcase,omitempty"`
	TraceID       string                 `protobuf:"bytes,4,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTestCaseRequest) Reset() {
	*x = DeleteTestCaseRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestCaseRequest) ProtoMessage() {}

func (x *DeleteTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{85}
}

func (x *DeleteTestCaseRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteTestCaseRequest) GetTestcaseId() string {
	if x != nil {
		return x.TestcaseId
	}
	return ""
}

func (x *DeleteTestCaseRequest) GetIsRunTestcase() bool {
	if x != nil {
		return x.IsRunTestcase
	}
	return false
}

func (x *DeleteTestCaseRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type DeleteTestCaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTestCaseResponse) Reset() {
	*x = DeleteTestCaseResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestCaseResponse) ProtoMessage() {}

func (x *DeleteTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestCaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{86}
}

func (x *DeleteTestCaseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTestCaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteTestCaseResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type GetLanguageSupportsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLanguageSupportsRequest) Reset() {
	*x = GetLanguageSupportsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageSupportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageSupportsRequest) ProtoMessage() {}

func (x *GetLanguageSupportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageSupportsRequest.ProtoReflect.Descriptor instead.
func (*GetLanguageSupportsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{87}
}

func (x *GetLanguageSupportsRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *GetLanguageSupportsRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetLanguageSupportsResponse struct {
	state              protoimpl.MessageState     `protogen:"open.v1"`
	Success            bool                       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message            string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SupportedLanguages []string                   `protobuf:"bytes,3,rep,name=supported_languages,json=supportedLanguages,proto3" json:"supported_languages,omitempty"`
	ValidateCode       map[string]*ValidationCode `protobuf:"bytes,4,rep,name=validate_code,json=validateCode,proto3" json:"validate_code,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ErrorType          string                     `protobuf:"bytes,5,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetLanguageSupportsResponse) Reset() {
	*x = GetLanguageSupportsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageSupportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageSupportsResponse) ProtoMessage() {}

func (x *GetLanguageSupportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageSupportsResponse.ProtoReflect.Descriptor instead.
func (*GetLanguageSupportsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{88}
}

func (x *GetLanguageSupportsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetLanguageSupportsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetLanguageSupportsResponse) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *GetLanguageSupportsResponse) GetValidateCode() map[string]*ValidationCode {
	if x != nil {
		return x.ValidateCode
	}
	return nil
}

func (x *GetLanguageSupportsResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type FullValidationByProblemIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullValidationByProblemIDRequest) Reset() {
	*x = FullValidationByProblemIDRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullValidationByProblemIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullValidationByProblemIDRequest) ProtoMessage() {}

func (x *FullValidationByProblemIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullValidationByProblemIDRequest.ProtoReflect.Descriptor instead.
func (*FullValidationByProblemIDRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{89}
}

func (x *FullValidationByProblemIDRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *FullValidationByProblemIDRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type FullValidationByProblemIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,3,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullValidationByProblemIDResponse) Reset() {
	*x = FullValidationByProblemIDResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullValidationByProblemIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullValidationByProblemIDResponse) ProtoMessage() {}

func (x *FullValidationByProblemIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullValidationByProblemIDResponse.ProtoReflect.Descriptor instead.
func (*FullValidationByProblemIDResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{90}
}

func (x *FullValidationByProblemIDResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FullValidationByProblemIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FullValidationByProblemIDResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type RunProblemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	UserCode      string                 `protobuf:"bytes,2,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
	Language      string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	IsRunTestcase bool                   `protobuf:"varint,4,opt,name=is_run_testcase,json=isRunTestcase,proto3" json:"is_run_testcase,omitempty"`
	UserId        string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Country       *string                `protobuf:"bytes,6,opt,name=country,proto3,oneof" json:"country,omitempty"`
	TraceID       string                 `protobuf:"bytes,7,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunProblemRequest) Reset() {
	*x = RunProblemRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunProblemRequest) ProtoMessage() {}

func (x *RunProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunProblemRequest.ProtoReflect.Descriptor instead.
func (*RunProblemRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{91}
}

func (x *RunProblemRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RunProblemRequest) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *RunProblemRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RunProblemRequest) GetIsRunTestcase() bool {
	if x != nil {
		return x.IsRunTestcase
	}
	return false
}

func (x *RunProblemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RunProblemRequest) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *RunProblemRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type RunProblemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	IsRunTestcase bool                   `protobuf:"varint,3,opt,name=is_run_testcase,json=isRunTestcase,proto3" json:"is_run_testcase,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,6,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunProblemResponse) Reset() {
	*x = RunProblemResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunProblemResponse) ProtoMessage() {}

func (x *RunProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunProblemResponse.ProtoReflect.Descriptor instead.
func (*RunProblemResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{92}
}

func (x *RunProblemResponse) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RunProblemResponse) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RunProblemResponse) GetIsRunTestcase() bool {
	if x != nil {
		return x.IsRunTestcase
	}
	return false
}

func (x *RunProblemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RunProblemResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RunProblemResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type Submission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemId     string                 `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChallengeId   string                 `protobuf:"bytes,4,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	SubmittedAt   *Timestamp             `protobuf:"bytes,5,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	Score         int32                  `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	Status        string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Output        string                 `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	Language      string                 `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`
	ExecutionTime float32                `protobuf:"fixed32,10,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	Difficulty    string                 `protobuf:"bytes,11,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	IsFirst       bool                   `protobuf:"varint,12,opt,name=is_first,json=isFirst,proto3" json:"is_first,omitempty"`
	Title         string                 `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
	UserCode      string                 `protobuf:"bytes,14,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Submission) Reset() {
	*x = Submission{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{93}
}

func (x *Submission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Submission) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Submission) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Submission) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *Submission) GetSubmittedAt() *Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Submission) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Submission) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Submission) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *Submission) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Submission) GetExecutionTime() float32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *Submission) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *Submission) GetIsFirst() bool {
	if x != nil {
		return x.IsFirst
	}
	return false
}

func (x *Submission) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Submission) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

type GetSubmissionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     *string                `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3,oneof" json:"problem_id,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceID       string                 `protobuf:"bytes,5,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionsRequest) Reset() {
	*x = GetSubmissionsRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsRequest) ProtoMessage() {}

func (x *GetSubmissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionsRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{94}
}

func (x *GetSubmissionsRequest) GetProblemId() string {
	if x != nil && x.ProblemId != nil {
		return *x.ProblemId
	}
	return ""
}

func (x *GetSubmissionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSubmissionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSubmissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSubmissionsRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetSubmissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Submissions   []*Submission          `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ErrorType     string                 `protobuf:"bytes,4,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubmissionsResponse) Reset() {
	*x = GetSubmissionsResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionsResponse) ProtoMessage() {}

func (x *GetSubmissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionsResponse.ProtoReflect.Descriptor instead.
func (*GetSubmissionsResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{95}
}

func (x *GetSubmissionsResponse) GetSubmissions() []*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *GetSubmissionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetSubmissionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSubmissionsResponse) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

type GetProblemByIdSlugRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Slug          *string                `protobuf:"bytes,2,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	TraceID       string                 `protobuf:"bytes,3,opt,name=traceID,proto3" json:"traceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemByIdSlugRequest) Reset() {
	*x = GetProblemByIdSlugRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemByIdSlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemByIdSlugRequest) ProtoMessage() {}

func (x *GetProblemByIdSlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemByIdSlugRequest.ProtoReflect.Descriptor instead.
func (*GetProblemByIdSlugRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{96}
}

func (x *GetProblemByIdSlugRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *GetProblemByIdSlugRequest) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *GetProblemByIdSlugRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GetProblemByIdSlugResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Problemmetdata *ProblemMetadataLite   `protobuf:"bytes,1,opt,name=problemmetdata,proto3" json:"problemmetdata,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetProblemByIdSlugResponse) Reset() {
	*x = GetProblemByIdSlugResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemByIdSlugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemByIdSlugResponse) ProtoMessage() {}

func (x *GetProblemByIdSlugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemByIdSlugResponse.ProtoReflect.Descriptor instead.
func (*GetProblemByIdSlugResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{97}
}

func (x *GetProblemByIdSlugResponse) GetProblemmetdata() *ProblemMetadataLite {
	if x != nil {
		return x.Problemmetdata
	}
	return nil
}

func (x *GetProblemByIdSlugResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetProblemMetadataListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Tags          []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Difficulty    string                 `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SearchQuery   string                 `protobuf:"bytes,5,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
	TraceID       string                 `protobuf:"bytes,6,opt,name=traceID,proto3" json:"traceID,omitempty"`
	IsAdmin       bool                   `protobuf:"varint,7,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProblemMetadataListRequest) Reset() {
	*x = GetProblemMetadataListRequest{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemMetadataListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemMetadataListRequest) ProtoMessage() {}

func (x *GetProblemMetadataListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemMetadataListRequest.ProtoReflect.Descriptor instead.
func (*GetProblemMetadataListRequest) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{98}
}

func (x *GetProblemMetadataListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetProblemMetadataListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProblemMetadataListRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetProblemMetadataListRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *GetProblemMetadataListRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *GetProblemMetadataListRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *GetProblemMetadataListRequest) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

type GetProblemMetadataListResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Problemmetdata []*ProblemMetadataLite `protobuf:"bytes,1,rep,name=problemmetdata,proto3" json:"problemmetdata,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetProblemMetadataListResponse) Reset() {
	*x = GetProblemMetadataListResponse{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemMetadataListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemMetadataListResponse) ProtoMessage() {}

func (x *GetProblemMetadataListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemMetadataListResponse.ProtoReflect.Descriptor instead.
func (*GetProblemMetadataListResponse) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{99}
}

func (x *GetProblemMetadataListResponse) GetProblemmetdata() []*ProblemMetadataLite {
	if x != nil {
		return x.Problemmetdata
	}
	return nil
}

func (x *GetProblemMetadataListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProblemMetadataLite struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProblemId          string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Title              string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tags               []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	TestcaseRun        *TestCaseRunOnly       `protobuf:"bytes,5,opt,name=testcase_run,json=testcaseRun,proto3" json:"testcase_run,omitempty"`
	Difficulty         string                 `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	SupportedLanguages []string               `protobuf:"bytes,7,rep,name=supported_languages,json=supportedLanguages,proto3" json:"supported_languages,omitempty"`
	Validated          bool                   `protobuf:"varint,8,opt,name=validated,proto3" json:"validated,omitempty"`
	PlaceholderMaps    map[string]string      `protobuf:"bytes,9,rep,name=placeholder_maps,json=placeholderMaps,proto3" json:"placeholder_maps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Visible            bool                   `protobuf:"varint,10,opt,name=visible,proto3" json:"visible,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProblemMetadataLite) Reset() {
	*x = ProblemMetadataLite{}
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemMetadataLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemMetadataLite) ProtoMessage() {}

func (x *ProblemMetadataLite) ProtoReflect() protoreflect.Message {
	mi := &file_ProblemsService_problemsservice_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemMetadataLite.ProtoReflect.Descriptor instead.
func (*ProblemMetadataLite) Descriptor() ([]byte, []int) {
	return file_ProblemsService_problemsservice_proto_rawDescGZIP(), []int{100}
}

func (x *ProblemMetadataLite) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ProblemMetadataLite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProblemMetadataLite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProblemMetadataLite) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProblemMetadataLite) GetTestcaseRun() *TestCaseRunOnly {
	if x != nil {
		return x.TestcaseRun
	}
	return nil
}

func (x *ProblemMetadataLite) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *ProblemMetadataLite) GetSupportedLanguages() []string {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *ProblemMetadataLite) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *ProblemMetadataLite) GetPlaceholderMaps() map[string]string {
	if x != nil {
		return x.PlaceholderMaps
	}
	return nil
}

func (x *ProblemMetadataLite) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

var File_ProblemsService_problemsservice_proto protoreflect.FileDescriptor

const file_ProblemsService_problemsservice_proto_rawDesc = "" +
	"\n" +
	"%ProblemsService/problemsservice.proto\x12\bproblems\"\x85\x01\n" +
	"-RandomProblemIDsGenWithDifficultyRatioRequest\x12:\n" +
	"\aqnratio\x18\x01 \x01(\v2 .problems.ProblemDifficultyRatioR\aqnratio\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"X\n" +
	"\x16ProblemDifficultyRatio\x12\x12\n" +
	"\x04easy\x18\x01 \x01(\x05R\x04easy\x12\x16\n" +
	"\x06medium\x18\x02 \x01(\x05R\x06medium\x12\x12\n" +
	"\x04hard\x18\x03 \x01(\x05R\x04hard\"\xa4\x01\n" +
	".RandomProblemIDsGenWithDifficultyRatioResponse\x12\x1f\n" +
	"\vproblem_ids\x18\x01 \x03(\tR\n" +
	"problemIds\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x04 \x01(\tR\terrorType\"C\n" +
	" CheckProblemExistenceBulkRequest\x12\x1f\n" +
	"\vproblem_ids\x18\x01 \x03(\tR\n" +
	"problemIds\"\xd8\x01\n" +
	"!CheckProblemExistenceBulkResponse\x12n\n" +
	"\x11problem_existence\x18\x01 \x03(\v2A.problems.CheckProblemExistenceBulkResponse.ProblemExistenceEntryR\x10problemExistence\x1aC\n" +
	"\x15ProblemExistenceEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"8\n" +
	"\x1dProblemIDsDoneByUserIDRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"A\n" +
	"\x1eProblemIDsDoneByUserIDResponse\x12\x1f\n" +
	"\vproblem_ids\x18\x01 \x03(\tR\n" +
	"problemIds\"Z\n" +
	"\x19GetSubmissionsByIDRequest\x12#\n" +
	"\rsubmission_id\x18\x01 \x01(\tR\fsubmissionId\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"\x1c\n" +
	"\x1aGetSubmissionsByIDResponse\"[\n" +
	"(ForceChangeUserEntityInSubmissionRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x16\n" +
	"\x06entity\x18\x02 \x01(\tR\x06entity\"+\n" +
	")ForceChangeUserEntityInSubmissionResponse\"@\n" +
	"\x1dGetBulkProblemMetadataRequest\x12\x1f\n" +
	"\vproblem_ids\x18\x01 \x03(\tR\n" +
	"problemIds\"q\n" +
	"\x1eGetBulkProblemMetadataResponse\x12O\n" +
	"\x13BulkProblemMetadata\x18\x01 \x03(\v2\x1d.problems.BulkProblemMetadataR\x13BulkProblemMetadata\"~\n" +
	"\x13BulkProblemMetadata\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x06 \x01(\tR\n" +
	"difficulty\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\"\xb3\x01\n" +
	"\x1aGetChallengeHistoryRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\"\n" +
	"\n" +
	"is_private\x18\x02 \x01(\bH\x00R\tisPrivate\x88\x01\x01\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x18\n" +
	"\atraceID\x18\x05 \x01(\tR\atraceIDB\r\n" +
	"\v_is_private\"\xa4\x01\n" +
	"\x1bGetChallengeHistoryResponse\x123\n" +
	"\n" +
	"challenges\x18\x01 \x03(\v2\x13.problems.ChallengeR\n" +
	"challenges\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"\xfd\x04\n" +
	"\tChallenge\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1d\n" +
	"\n" +
	"creator_id\x18\x03 \x01(\tR\tcreatorId\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\tR\n" +
	"difficulty\x12\x1d\n" +
	"\n" +
	"is_private\x18\x05 \x01(\bR\tisPrivate\x12\x16\n" +
	"\x06status\x18\x06 \x01(\tR\x06status\x12\x1f\n" +
	"\bpassword\x18\a \x01(\tH\x00R\bpassword\x88\x01\x01\x12\x1f\n" +
	"\vproblem_ids\x18\b \x03(\tR\n" +
	"problemIds\x12\x1d\n" +
	"\n" +
	"time_limit\x18\t \x01(\x05R\ttimeLimit\x12\x1d\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\x03R\tcreatedAt\x12\x1b\n" +
	"\tis_active\x18\v \x01(\bR\bisActive\x12'\n" +
	"\x0fparticipant_ids\x18\f \x03(\tR\x0eparticipantIds\x12`\n" +
	"\x15user_problem_metadata\x18\r \x03(\v2,.problems.Challenge.UserProblemMetadataEntryR\x13userProblemMetadata\x12\x1d\n" +
	"\n" +
	"start_time\x18\x0e \x01(\x03R\tstartTime\x12\x19\n" +
	"\bend_time\x18\x0f \x01(\x03R\aendTime\x1ae\n" +
	"\x18UserProblemMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x123\n" +
	"\x05value\x18\x02 \x01(\v2\x1d.problems.ProblemMetadataListR\x05value:\x028\x01B\v\n" +
	"\t_password\"\xa9\x02\n" +
	"\x0fProblemMetadata\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12<\n" +
	"\ftestcase_run\x18\x05 \x01(\v2\x19.problems.TestCaseRunOnlyR\vtestcaseRun\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x06 \x01(\tR\n" +
	"difficulty\x12/\n" +
	"\x13supported_languages\x18\a \x03(\tR\x12supportedLanguages\x12\x1c\n" +
	"\tvalidated\x18\b \x01(\bR\tvalidated\"\x91\x01\n" +
	"\x18ChallengeProblemMetadata\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x05R\x05score\x12\x1d\n" +
	"\n" +
	"time_taken\x18\x03 \x01(\x03R\ttimeTaken\x12!\n" +
	"\fcompleted_at\x18\x04 \x01(\x03R\vcompletedAt\"w\n" +
	"\x13ProblemMetadataList\x12`\n" +
	"\x1achallenge_problem_metadata\x18\x01 \x03(\v2\".problems.ChallengeProblemMetadataR\x18challengeProblemMetadata\"\x8f\x01\n" +
	"\x10LeaderboardEntry\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12-\n" +
	"\x12problems_completed\x18\x02 \x01(\x05R\x11problemsCompleted\x12\x1f\n" +
	"\vtotal_score\x18\x03 \x01(\x05R\n" +
	"totalScore\x12\x12\n" +
	"\x04rank\x18\x04 \x01(\x05R\x04rank\"\xf4\x02\n" +
	"\tUserStats\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12-\n" +
	"\x12problems_completed\x18\x02 \x01(\x05R\x11problemsCompleted\x12(\n" +
	"\x10total_time_taken\x18\x03 \x01(\x03R\x0etotalTimeTaken\x121\n" +
	"\x14challenges_completed\x18\x04 \x01(\x05R\x13challengesCompleted\x12\x14\n" +
	"\x05score\x18\x05 \x01(\x01R\x05score\x12P\n" +
	"\x0fchallenge_stats\x18\x06 \x03(\v2'.problems.UserStats.ChallengeStatsEntryR\x0echallengeStats\x1aZ\n" +
	"\x13ChallengeStatsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.problems.ChallengeStatR\x05value:\x028\x01\"s\n" +
	"\rChallengeStat\x12\x12\n" +
	"\x04rank\x18\x01 \x01(\x05R\x04rank\x12-\n" +
	"\x12problems_completed\x18\x02 \x01(\x05R\x11problemsCompleted\x12\x1f\n" +
	"\vtotal_score\x18\x03 \x01(\x05R\n" +
	"totalScore\"\x8d\x02\n" +
	"\x16CreateChallengeRequest\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12\x1d\n" +
	"\n" +
	"creator_id\x18\x02 \x01(\tR\tcreatorId\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x03 \x01(\tR\n" +
	"difficulty\x12\x1d\n" +
	"\n" +
	"is_private\x18\x04 \x01(\bR\tisPrivate\x12\x1f\n" +
	"\vproblem_ids\x18\x05 \x03(\tR\n" +
	"problemIds\x12\x1d\n" +
	"\n" +
	"time_limit\x18\x06 \x01(\x05R\ttimeLimit\x12%\n" +
	"\x0eexpected_start\x18\a \x01(\x03R\rexpectedStart\x12\x18\n" +
	"\atraceID\x18\b \x01(\tR\atraceID\"`\n" +
	"\x17CreateChallengeResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12\x19\n" +
	"\bjoin_url\x18\x03 \x01(\tR\ajoinUrl\"{\n" +
	"\x1aGetChallengeDetailsRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x04 \x01(\tR\atraceID\"\x8e\x01\n" +
	"\x1bGetChallengeDetailsResponse\x121\n" +
	"\tchallenge\x18\x01 \x01(\v2\x13.problems.ChallengeR\tchallenge\x12<\n" +
	"\vleaderboard\x18\x02 \x03(\v2\x1a.problems.LeaderboardEntryR\vleaderboard\"\xbd\x01\n" +
	"\x1aGetPublicChallengesRequest\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x01 \x01(\tR\n" +
	"difficulty\x12\x1b\n" +
	"\tis_active\x18\x02 \x01(\bR\bisActive\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x06 \x01(\tR\atraceID\"R\n" +
	"\x1bGetPublicChallengesResponse\x123\n" +
	"\n" +
	"challenges\x18\x01 \x03(\v2\x13.problems.ChallengeR\n" +
	"challenges\"\x9a\x01\n" +
	"\x14JoinChallengeRequest\x12!\n" +
	"\fchallenge_id\x18\x01 \x01(\tR\vchallengeId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1f\n" +
	"\bpassword\x18\x03 \x01(\tH\x00R\bpassword\x88\x01\x01\x12\x18\n" +
	"\atraceID\x18\x04 \x01(\tR\atraceIDB\v\n" +
	"\t_password\"n\n" +
	"\x15JoinChallengeResponse\x12!\n" +
	"\fchallenge_id\x18\x01 \x01(\tR\vchallengeId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"m\n" +
	"\x15StartChallengeRequest\x12!\n" +
	"\fchallenge_id\x18\x01 \x01(\tR\vchallengeId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x03 \x01(\tR\atraceID\"Q\n" +
	"\x16StartChallengeResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1d\n" +
	"\n" +
	"start_time\x18\x02 \x01(\x03R\tstartTime\"k\n" +
	"\x13EndChallengeRequest\x12!\n" +
	"\fchallenge_id\x18\x01 \x01(\tR\vchallengeId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x03 \x01(\tR\atraceID\"n\n" +
	"\x14EndChallengeResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12<\n" +
	"\vleaderboard\x18\x02 \x03(\v2\x1a.problems.LeaderboardEntryR\vleaderboard\"[\n" +
	"\x1aGetSubmissionStatusRequest\x12#\n" +
	"\rsubmission_id\x18\x01 \x01(\tR\fsubmissionId\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"S\n" +
	"\x1bGetSubmissionStatusResponse\x124\n" +
	"\n" +
	"submission\x18\x01 \x01(\v2\x14.problems.SubmissionR\n" +
	"submission\"]\n" +
	"\x1eGetChallengeSubmissionsRequest\x12!\n" +
	"\fchallenge_id\x18\x01 \x01(\tR\vchallengeId\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"Y\n" +
	"\x1fGetChallengeSubmissionsResponse\x126\n" +
	"\vsubmissions\x18\x01 \x03(\v2\x14.problems.SubmissionR\vsubmissions\"H\n" +
	"\x13GetUserStatsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"A\n" +
	"\x14GetUserStatsResponse\x12)\n" +
	"\x05stats\x18\x01 \x01(\v2\x13.problems.UserStatsR\x05stats\"t\n" +
	"\x1cGetChallengeUserStatsRequest\x12!\n" +
	"\fchallenge_id\x18\x01 \x01(\tR\vchallengeId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x03 \x01(\tR\atraceID\"\xfe\x01\n" +
	"\x1dGetChallengeUserStatsResponse\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12-\n" +
	"\x12problems_completed\x18\x02 \x01(\x05R\x11problemsCompleted\x12\x1f\n" +
	"\vtotal_score\x18\x03 \x01(\x05R\n" +
	"totalScore\x12\x12\n" +
	"\x04rank\x18\x04 \x01(\x05R\x04rank\x12`\n" +
	"\x1achallenge_problem_metadata\x18\x05 \x03(\v2\".problems.ChallengeProblemMetadataR\x18challengeProblemMetadata\">\n" +
	"\x14GetTopKGlobalRequest\x12\f\n" +
	"\x01k\x18\x01 \x01(\x05R\x01k\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"B\n" +
	"\x15GetTopKGlobalResponse\x12)\n" +
	"\x05users\x18\x01 \x03(\v2\x13.problems.UserScoreR\x05users\"H\n" +
	"\x14GetTopKEntityRequest\x12\x16\n" +
	"\x06entity\x18\x01 \x01(\tR\x06entity\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"B\n" +
	"\x15GetTopKEntityResponse\x12)\n" +
	"\x05users\x18\x01 \x03(\v2\x13.problems.UserScoreR\x05users\"G\n" +
	"\x12GetUserRankRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"W\n" +
	"\x13GetUserRankResponse\x12\x1f\n" +
	"\vglobal_rank\x18\x01 \x01(\x05R\n" +
	"globalRank\x12\x1f\n" +
	"\ventity_rank\x18\x02 \x01(\x05R\n" +
	"entityRank\"N\n" +
	"\x19GetLeaderboardDataRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"\x93\x02\n" +
	"\x1aGetLeaderboardDataResponse\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x01R\x05score\x12\x16\n" +
	"\x06entity\x18\x03 \x01(\tR\x06entity\x12\x1f\n" +
	"\vglobal_rank\x18\x04 \x01(\x05R\n" +
	"globalRank\x12\x1f\n" +
	"\ventity_rank\x18\x05 \x01(\x05R\n" +
	"entityRank\x125\n" +
	"\ftop_k_global\x18\x06 \x03(\v2\x13.problems.UserScoreR\n" +
	"topKGlobal\x125\n" +
	"\ftop_k_entity\x18\a \x03(\v2\x13.problems.UserScoreR\n" +
	"topKEntity\"R\n" +
	"\tUserScore\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x01R\x05score\x12\x16\n" +
	"\x06entity\x18\x03 \x01(\tR\x06entity\"~\n" +
	" GetMonthlyActivityHeatmapRequest\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\tR\x06userID\x12\x14\n" +
	"\x05month\x18\x02 \x01(\x05R\x05month\x12\x12\n" +
	"\x04year\x18\x03 \x01(\x05R\x04year\x12\x18\n" +
	"\atraceID\x18\x04 \x01(\tR\atraceID\"S\n" +
	"\vActivityDay\x12\x12\n" +
	"\x04date\x18\x01 \x01(\tR\x04date\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12\x1a\n" +
	"\bisActive\x18\x03 \x01(\bR\bisActive\"N\n" +
	"!GetMonthlyActivityHeatmapResponse\x12)\n" +
	"\x04data\x18\x01 \x03(\v2\x15.problems.ActivityDayR\x04data\"\xdc\x01\n" +
	"$GetLeaderBoardOptionalCountryRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x03R\x04page\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x03R\x05limit\x12\x1d\n" +
	"\acountry\x18\x03 \x01(\tH\x00R\acountry\x88\x01\x01\x12\x1f\n" +
	"\busername\x18\x04 \x01(\tH\x01R\busername\x88\x01\x01\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x06 \x01(\tR\atraceIDB\n" +
	"\n" +
	"\b_countryB\v\n" +
	"\t_username\"\x8e\x01\n" +
	"%GetLeaderBoardOptionalCountryResponse\x12/\n" +
	"\x04data\x18\x01 \x01(\v2\x1b.problems.LeaderboardSingleR\x04data\x12$\n" +
	"\vfilter_type\x18\x02 \x01(\tH\x00R\n" +
	"filterType\x88\x01\x01B\x0e\n" +
	"\f_filter_type\"\x89\x01\n" +
	"\x11LeaderboardSingle\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12&\n" +
	"\fcountry_rank\x18\x02 \x01(\x03H\x00R\vcountryRank\x88\x01\x01\x12\x1f\n" +
	"\vglobal_rank\x18\x03 \x01(\x03R\n" +
	"globalRankB\x0f\n" +
	"\r_country_rank\"\x83\x01\n" +
	" GetProblemsDoneStatisticsRequest\x12\x1f\n" +
	"\busername\x18\x01 \x01(\tH\x00R\busername\x88\x01\x01\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x03 \x01(\tR\atraceIDB\v\n" +
	"\t_username\"Y\n" +
	"!GetProblemsDoneStatisticsResponse\x124\n" +
	"\x04data\x18\x01 \x01(\v2 .problems.ProblemsDoneStatisticsR\x04data\"\x8a\x02\n" +
	"\x16ProblemsDoneStatistics\x12$\n" +
	"\x0emax_easy_count\x18\x01 \x01(\x05R\fmaxEasyCount\x12&\n" +
	"\x0fdone_easy_count\x18\x02 \x01(\x05R\rdoneEasyCount\x12(\n" +
	"\x10max_medium_count\x18\x03 \x01(\x05R\x0emaxMediumCount\x12*\n" +
	"\x11done_medium_count\x18\x04 \x01(\x05R\x0fdoneMediumCount\x12$\n" +
	"\x0emax_hard_count\x18\x05 \x01(\x05R\fmaxHardCount\x12&\n" +
	"\x0fdone_hard_count\x18\x06 \x01(\x05R\rdoneHardCount\";\n" +
	"\tTimestamp\x12\x18\n" +
	"\aseconds\x18\x01 \x01(\x03R\aseconds\x12\x14\n" +
	"\x05nanos\x18\x02 \x01(\x05R\x05nanos\"L\n" +
	"\bTestCase\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05input\x18\x02 \x01(\tR\x05input\x12\x1a\n" +
	"\bexpected\x18\x03 \x01(\tR\bexpected\"]\n" +
	"\tTestCases\x12$\n" +
	"\x03run\x18\x01 \x03(\v2\x12.problems.TestCaseR\x03run\x12*\n" +
	"\x06submit\x18\x02 \x03(\v2\x12.problems.TestCaseR\x06submit\"7\n" +
	"\x0fTestCaseRunOnly\x12$\n" +
	"\x03run\x18\x01 \x03(\v2\x12.problems.TestCaseR\x03run\"b\n" +
	"\x0eValidationCode\x12 \n" +
	"\vplaceholder\x18\x01 \x01(\tR\vplaceholder\x12\x12\n" +
	"\x04code\x18\x02 \x01(\tR\x04code\x12\x1a\n" +
	"\btemplate\x18\x03 \x01(\tR\btemplate\"\x9c\x01\n" +
	"\x14CreateProblemRequest\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\tR\n" +
	"difficulty\x12\x18\n" +
	"\atraceID\x18\x05 \x01(\tR\atraceID\"\x9e\x02\n" +
	"\x14UpdateProblemRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x19\n" +
	"\x05title\x18\x02 \x01(\tH\x00R\x05title\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x03 \x01(\tH\x01R\vdescription\x88\x01\x01\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12#\n" +
	"\n" +
	"difficulty\x18\x05 \x01(\tH\x02R\n" +
	"difficulty\x88\x01\x01\x12\x1d\n" +
	"\avisible\x18\x06 \x01(\bH\x03R\avisible\x88\x01\x01\x12\x18\n" +
	"\atraceID\x18\a \x01(\tR\atraceIDB\b\n" +
	"\x06_titleB\x0e\n" +
	"\f_descriptionB\r\n" +
	"\v_difficultyB\n" +
	"\n" +
	"\b_visible\"O\n" +
	"\x14DeleteProblemRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"L\n" +
	"\x11GetProblemRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"\xd1\x01\n" +
	"\x13ListProblemsRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\tR\n" +
	"difficulty\x12!\n" +
	"\fsearch_query\x18\x05 \x01(\tR\vsearchQuery\x12\x18\n" +
	"\atraceID\x18\x06 \x01(\tR\atraceID\x12\x18\n" +
	"\aisAdmin\x18\a \x01(\bR\aisAdmin\"\x81\x01\n" +
	"\x13AddTestCasesRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x121\n" +
	"\ttestcases\x18\x02 \x01(\v2\x13.problems.TestCasesR\ttestcases\x12\x18\n" +
	"\atraceID\x18\x03 \x01(\tR\atraceID\"\xb3\x01\n" +
	"\x19AddLanguageSupportRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12A\n" +
	"\x0fvalidation_code\x18\x03 \x01(\v2\x18.problems.ValidationCodeR\x0evalidationCode\x12\x18\n" +
	"\atraceID\x18\x04 \x01(\tR\atraceID\"\xb6\x01\n" +
	"\x1cUpdateLanguageSupportRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12A\n" +
	"\x0fvalidation_code\x18\x03 \x01(\v2\x18.problems.ValidationCodeR\x0evalidationCode\x12\x18\n" +
	"\atraceID\x18\x04 \x01(\tR\atraceID\"s\n" +
	"\x1cRemoveLanguageSupportRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12\x18\n" +
	"\atraceID\x18\x03 \x01(\tR\atraceID\"\xbd\x05\n" +
	"\aProblem\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x122\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x13.problems.TimestampR\tcreatedAt\x122\n" +
	"\n" +
	"updated_at\x18\x03 \x01(\v2\x13.problems.TimestampR\tupdatedAt\x127\n" +
	"\n" +
	"deleted_at\x18\x04 \x01(\v2\x13.problems.TimestampH\x00R\tdeletedAt\x88\x01\x01\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\a \x03(\tR\x04tags\x121\n" +
	"\ttestcases\x18\b \x01(\v2\x13.problems.TestCasesR\ttestcases\x12\x1e\n" +
	"\n" +
	"difficulty\x18\t \x01(\tR\n" +
	"difficulty\x12/\n" +
	"\x13supported_languages\x18\n" +
	" \x03(\tR\x12supportedLanguages\x12H\n" +
	"\rvalidate_code\x18\v \x03(\v2#.problems.Problem.ValidateCodeEntryR\fvalidateCode\x12\x1c\n" +
	"\tvalidated\x18\f \x01(\bR\tvalidated\x126\n" +
	"\fvalidated_at\x18\r \x01(\v2\x13.problems.TimestampR\vvalidatedAt\x12\x18\n" +
	"\avisible\x18\x0e \x01(\bR\avisible\x1aY\n" +
	"\x11ValidateCodeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.problems.ValidationCodeR\x05value:\x028\x01B\r\n" +
	"\v_deleted_at\"\x89\x01\n" +
	"\x15CreateProblemResponse\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x04 \x01(\tR\terrorType\"j\n" +
	"\x15UpdateProblemResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"j\n" +
	"\x15DeleteProblemResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"`\n" +
	"\x12GetProblemResponse\x12+\n" +
	"\aproblem\x18\x01 \x01(\v2\x11.problems.ProblemR\aproblem\x12\x1d\n" +
	"\n" +
	"error_type\x18\x02 \x01(\tR\terrorType\"\xb6\x01\n" +
	"\x14ListProblemsResponse\x12-\n" +
	"\bproblems\x18\x01 \x03(\v2\x11.problems.ProblemR\bproblems\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"error_type\x18\x05 \x01(\tR\terrorType\"\x8a\x01\n" +
	"\x14AddTestCasesResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vadded_count\x18\x03 \x01(\x05R\n" +
	"addedCount\x12\x1d\n" +
	"\n" +
	"error_type\x18\x04 \x01(\tR\terrorType\"o\n" +
	"\x1aAddLanguageSupportResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"r\n" +
	"\x1dUpdateLanguageSupportResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"r\n" +
	"\x1dRemoveLanguageSupportResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"\x99\x01\n" +
	"\x15DeleteTestCaseRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1f\n" +
	"\vtestcase_id\x18\x02 \x01(\tR\n" +
	"testcaseId\x12&\n" +
	"\x0fis_run_testcase\x18\x03 \x01(\bR\risRunTestcase\x12\x18\n" +
	"\atraceID\x18\x04 \x01(\tR\atraceID\"k\n" +
	"\x16DeleteTestCaseResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"U\n" +
	"\x1aGetLanguageSupportsRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"\xda\x02\n" +
	"\x1bGetLanguageSupportsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12/\n" +
	"\x13supported_languages\x18\x03 \x03(\tR\x12supportedLanguages\x12\\\n" +
	"\rvalidate_code\x18\x04 \x03(\v27.problems.GetLanguageSupportsResponse.ValidateCodeEntryR\fvalidateCode\x12\x1d\n" +
	"\n" +
	"error_type\x18\x05 \x01(\tR\terrorType\x1aY\n" +
	"\x11ValidateCodeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.problems.ValidationCodeR\x05value:\x028\x01\"[\n" +
	" FullValidationByProblemIDRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\atraceID\x18\x02 \x01(\tR\atraceID\"v\n" +
	"!FullValidationByProblemIDResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x03 \x01(\tR\terrorType\"\xf1\x01\n" +
	"\x11RunProblemRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1b\n" +
	"\tuser_code\x18\x02 \x01(\tR\buserCode\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\tR\blanguage\x12&\n" +
	"\x0fis_run_testcase\x18\x04 \x01(\bR\risRunTestcase\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\tR\x06userId\x12\x1d\n" +
	"\acountry\x18\x06 \x01(\tH\x00R\acountry\x88\x01\x01\x12\x18\n" +
	"\atraceID\x18\a \x01(\tR\atraceIDB\n" +
	"\n" +
	"\b_country\"\xca\x01\n" +
	"\x12RunProblemResponse\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12&\n" +
	"\x0fis_run_testcase\x18\x03 \x01(\bR\risRunTestcase\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x06 \x01(\tR\terrorType\"\xa6\x03\n" +
	"\n" +
	"Submission\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x02 \x01(\tR\tproblemId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12!\n" +
	"\fchallenge_id\x18\x04 \x01(\tR\vchallengeId\x126\n" +
	"\fsubmitted_at\x18\x05 \x01(\v2\x13.problems.TimestampR\vsubmittedAt\x12\x14\n" +
	"\x05score\x18\x06 \x01(\x05R\x05score\x12\x16\n" +
	"\x06status\x18\a \x01(\tR\x06status\x12\x16\n" +
	"\x06output\x18\b \x01(\tR\x06output\x12\x1a\n" +
	"\blanguage\x18\t \x01(\tR\blanguage\x12%\n" +
	"\x0eexecution_time\x18\n" +
	" \x01(\x02R\rexecutionTime\x12\x1e\n" +
	"\n" +
	"difficulty\x18\v \x01(\tR\n" +
	"difficulty\x12\x19\n" +
	"\bis_first\x18\f \x01(\bR\aisFirst\x12\x14\n" +
	"\x05title\x18\r \x01(\tR\x05title\x12\x1b\n" +
	"\tuser_code\x18\x0e \x01(\tR\buserCode\"\xa7\x01\n" +
	"\x15GetSubmissionsRequest\x12\"\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tH\x00R\tproblemId\x88\x01\x01\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12\x18\n" +
	"\atraceID\x18\x05 \x01(\tR\atraceIDB\r\n" +
	"\v_problem_id\"\xa3\x01\n" +
	"\x16GetSubmissionsResponse\x126\n" +
	"\vsubmissions\x18\x01 \x03(\v2\x14.problems.SubmissionR\vsubmissions\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x04 \x01(\tR\terrorType\"v\n" +
	"\x19GetProblemByIdSlugRequest\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x17\n" +
	"\x04slug\x18\x02 \x01(\tH\x00R\x04slug\x88\x01\x01\x12\x18\n" +
	"\atraceID\x18\x03 \x01(\tR\atraceIDB\a\n" +
	"\x05_slug\"}\n" +
	"\x1aGetProblemByIdSlugResponse\x12E\n" +
	"\x0eproblemmetdata\x18\x01 \x01(\v2\x1d.problems.ProblemMetadataLiteR\x0eproblemmetdata\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xdb\x01\n" +
	"\x1dGetProblemMetadataListRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\tR\n" +
	"difficulty\x12!\n" +
	"\fsearch_query\x18\x05 \x01(\tR\vsearchQuery\x12\x18\n" +
	"\atraceID\x18\x06 \x01(\tR\atraceID\x12\x18\n" +
	"\aisAdmin\x18\a \x01(\bR\aisAdmin\"\x81\x01\n" +
	"\x1eGetProblemMetadataListResponse\x12E\n" +
	"\x0eproblemmetdata\x18\x01 \x03(\v2\x1d.problems.ProblemMetadataLiteR\x0eproblemmetdata\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xea\x03\n" +
	"\x13ProblemMetadataLite\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12<\n" +
	"\ftestcase_run\x18\x05 \x01(\v2\x19.problems.TestCaseRunOnlyR\vtestcaseRun\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x06 \x01(\tR\n" +
	"difficulty\x12/\n" +
	"\x13supported_languages\x18\a \x03(\tR\x12supportedLanguages\x12\x1c\n" +
	"\tvalidated\x18\b \x01(\bR\tvalidated\x12]\n" +
	"\x10placeholder_maps\x18\t \x03(\v22.problems.ProblemMetadataLite.PlaceholderMapsEntryR\x0fplaceholderMaps\x12\x18\n" +
	"\avisible\x18\n" +
	" \x01(\bR\avisible\x1aB\n" +
	"\x14PlaceholderMapsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\xfb\x1d\n" +
	"\x0fProblemsService\x12P\n" +
	"\rCreateProblem\x12\x1e.problems.CreateProblemRequest\x1a\x1f.problems.CreateProblemResponse\x12P\n" +
	"\rUpdateProblem\x12\x1e.problems.UpdateProblemRequest\x1a\x1f.problems.UpdateProblemResponse\x12P\n" +
	"\rDeleteProblem\x12\x1e.problems.DeleteProblemRequest\x1a\x1f.problems.DeleteProblemResponse\x12G\n" +
	"\n" +
	"GetProblem\x12\x1b.problems.GetProblemRequest\x1a\x1c.problems.GetProblemResponse\x12M\n" +
	"\fListProblems\x12\x1d.problems.ListProblemsRequest\x1a\x1e.problems.ListProblemsResponse\x12_\n" +
	"\x12GetProblemByIDSlug\x12#.problems.GetProblemByIdSlugRequest\x1a$.problems.GetProblemByIdSlugResponse\x12k\n" +
	"\x16GetProblemMetadataList\x12'.problems.GetProblemMetadataListRequest\x1a(.problems.GetProblemMetadataListResponse\x12M\n" +
	"\fAddTestCases\x12\x1d.problems.AddTestCasesRequest\x1a\x1e.problems.AddTestCasesResponse\x12S\n" +
	"\x0eDeleteTestCase\x12\x1f.problems.DeleteTestCaseRequest\x1a .problems.DeleteTestCaseResponse\x12b\n" +
	"\x13GetLanguageSupports\x12$.problems.GetLanguageSupportsRequest\x1a%.problems.GetLanguageSupportsResponse\x12_\n" +
	"\x12AddLanguageSupport\x12#.problems.AddLanguageSupportRequest\x1a$.problems.AddLanguageSupportResponse\x12h\n" +
	"\x15UpdateLanguageSupport\x12&.problems.UpdateLanguageSupportRequest\x1a'.problems.UpdateLanguageSupportResponse\x12h\n" +
	"\x15RemoveLanguageSupport\x12&.problems.RemoveLanguageSupportRequest\x1a'.problems.RemoveLanguageSupportResponse\x12t\n" +
	"\x19FullValidationByProblemID\x12*.problems.FullValidationByProblemIDRequest\x1a+.problems.FullValidationByProblemIDResponse\x12O\n" +
	"\x12RunUserCodeProblem\x12\x1b.problems.RunProblemRequest\x1a\x1c.problems.RunProblemResponse\x12f\n" +
	"!GetSubmissionsByOptionalProblemID\x12\x1f.problems.GetSubmissionsRequest\x1a .problems.GetSubmissionsResponse\x12_\n" +
	"\x12GetSubmissionsByID\x12#.problems.GetSubmissionsByIDRequest\x1a$.problems.GetSubmissionsByIDResponse\x12k\n" +
	"\x16ProblemIDsDoneByUserID\x12'.problems.ProblemIDsDoneByUserIDRequest\x1a(.problems.ProblemIDsDoneByUserIDResponse\x12t\n" +
	"\x19GetProblemsDoneStatistics\x12*.problems.GetProblemsDoneStatisticsRequest\x1a+.problems.GetProblemsDoneStatisticsResponse\x12\x8c\x01\n" +
	"!ForceChangeUserEntityInSubmission\x122.problems.ForceChangeUserEntityInSubmissionRequest\x1a3.problems.ForceChangeUserEntityInSubmissionResponse\x12t\n" +
	"\x19GetMonthlyActivityHeatmap\x12*.problems.GetMonthlyActivityHeatmapRequest\x1a+.problems.GetMonthlyActivityHeatmapResponse\x12P\n" +
	"\rGetTopKGlobal\x12\x1e.problems.GetTopKGlobalRequest\x1a\x1f.problems.GetTopKGlobalResponse\x12P\n" +
	"\rGetTopKEntity\x12\x1e.problems.GetTopKEntityRequest\x1a\x1f.problems.GetTopKEntityResponse\x12J\n" +
	"\vGetUserRank\x12\x1c.problems.GetUserRankRequest\x1a\x1d.problems.GetUserRankResponse\x12_\n" +
	"\x12GetLeaderboardData\x12#.problems.GetLeaderboardDataRequest\x1a$.problems.GetLeaderboardDataResponse\x12V\n" +
	"\x0fCreateChallenge\x12 .problems.CreateChallengeRequest\x1a!.problems.CreateChallengeResponse\x12b\n" +
	"\x13GetChallengeDetails\x12$.problems.GetChallengeDetailsRequest\x1a%.problems.GetChallengeDetailsResponse\x12b\n" +
	"\x13GetPublicChallenges\x12$.problems.GetPublicChallengesRequest\x1a%.problems.GetPublicChallengesResponse\x12P\n" +
	"\rJoinChallenge\x12\x1e.problems.JoinChallengeRequest\x1a\x1f.problems.JoinChallengeResponse\x12S\n" +
	"\x0eStartChallenge\x12\x1f.problems.StartChallengeRequest\x1a .problems.StartChallengeResponse\x12M\n" +
	"\fEndChallenge\x12\x1d.problems.EndChallengeRequest\x1a\x1e.problems.EndChallengeResponse\x12b\n" +
	"\x13GetSubmissionStatus\x12$.problems.GetSubmissionStatusRequest\x1a%.problems.GetSubmissionStatusResponse\x12n\n" +
	"\x17GetChallengeSubmissions\x12(.problems.GetChallengeSubmissionsRequest\x1a).problems.GetChallengeSubmissionsResponse\x12M\n" +
	"\fGetUserStats\x12\x1d.problems.GetUserStatsRequest\x1a\x1e.problems.GetUserStatsResponse\x12h\n" +
	"\x15GetChallengeUserStats\x12&.problems.GetChallengeUserStatsRequest\x1a'.problems.GetChallengeUserStatsResponse\x12b\n" +
	"\x13GetChallengeHistory\x12$.problems.GetChallengeHistoryRequest\x1a%.problems.GetChallengeHistoryResponse\x12k\n" +
	"\x16GetBulkProblemMetadata\x12'.problems.GetBulkProblemMetadataRequest\x1a(.problems.GetBulkProblemMetadataResponse\x12t\n" +
	"\x19CheckProblemExistenceBulk\x12*.problems.CheckProblemExistenceBulkRequest\x1a+.problems.CheckProblemExistenceBulkResponse\x12\x9b\x01\n" +
	"&RandomProblemIDsGenWithDifficultyRatio\x127.problems.RandomProblemIDsGenWithDifficultyRatioRequest\x1a8.problems.RandomProblemIDsGenWithDifficultyRatioResponseB\tZ\a./protob\x06proto3"

var (
	file_ProblemsService_problemsservice_proto_rawDescOnce sync.Once
	file_ProblemsService_problemsservice_proto_rawDescData []byte
)

func file_ProblemsService_problemsservice_proto_rawDescGZIP() []byte {
	file_ProblemsService_problemsservice_proto_rawDescOnce.Do(func() {
		file_ProblemsService_problemsservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ProblemsService_problemsservice_proto_rawDesc), len(file_ProblemsService_problemsservice_proto_rawDesc)))
	})
	return file_ProblemsService_problemsservice_proto_rawDescData
}

var file_ProblemsService_problemsservice_proto_msgTypes = make([]protoimpl.MessageInfo, 107)
var file_ProblemsService_problemsservice_proto_goTypes = []any{
	(*RandomProblemIDsGenWithDifficultyRatioRequest)(nil),  // 0: problems.RandomProblemIDsGenWithDifficultyRatioRequest
	(*ProblemDifficultyRatio)(nil),                         // 1: problems.ProblemDifficultyRatio
	(*RandomProblemIDsGenWithDifficultyRatioResponse)(nil), // 2: problems.RandomProblemIDsGenWithDifficultyRatioResponse
	(*CheckProblemExistenceBulkRequest)(nil),               // 3: problems.CheckProblemExistenceBulkRequest
	(*CheckProblemExistenceBulkResponse)(nil),              // 4: problems.CheckProblemExistenceBulkResponse
	(*ProblemIDsDoneByUserIDRequest)(nil),                  // 5: problems.ProblemIDsDoneByUserIDRequest
	(*ProblemIDsDoneByUserIDResponse)(nil),                 // 6: problems.ProblemIDsDoneByUserIDResponse
	(*GetSubmissionsByIDRequest)(nil),                      // 7: problems.GetSubmissionsByIDRequest
	(*GetSubmissionsByIDResponse)(nil),                     // 8: problems.GetSubmissionsByIDResponse
	(*ForceChangeUserEntityInSubmissionRequest)(nil),       // 9: problems.ForceChangeUserEntityInSubmissionRequest
	(*ForceChangeUserEntityInSubmissionResponse)(nil),      // 10: problems.ForceChangeUserEntityInSubmissionResponse
	(*GetBulkProblemMetadataRequest)(nil),                  // 11: problems.GetBulkProblemMetadataRequest
	(*GetBulkProblemMetadataResponse)(nil),                 // 12: problems.GetBulkProblemMetadataResponse
	(*BulkProblemMetadata)(nil),                            // 13: problems.BulkProblemMetadata
	(*GetChallengeHistoryRequest)(nil),                     // 14: problems.GetChallengeHistoryRequest
	(*GetChallengeHistoryResponse)(nil),                    // 15: problems.GetChallengeHistoryResponse
	(*Challenge)(nil),                                      // 16: problems.Challenge
	(*ProblemMetadata)(nil),                                // 17: problems.ProblemMetadata
	(*ChallengeProblemMetadata)(nil),                       // 18: problems.ChallengeProblemMetadata
	(*ProblemMetadataList)(nil),                            // 19: problems.ProblemMetadataList
	(*LeaderboardEntry)(nil),                               // 20: problems.LeaderboardEntry
	(*UserStats)(nil),                                      // 21: problems.UserStats
	(*ChallengeStat)(nil),                                  // 22: problems.ChallengeStat
	(*CreateChallengeRequest)(nil),                         // 23: problems.CreateChallengeRequest
	(*CreateChallengeResponse)(nil),                        // 24: problems.CreateChallengeResponse
	(*GetChallengeDetailsRequest)(nil),                     // 25: problems.GetChallengeDetailsRequest
	(*GetChallengeDetailsResponse)(nil),                    // 26: problems.GetChallengeDetailsResponse
	(*GetPublicChallengesRequest)(nil),                     // 27: problems.GetPublicChallengesRequest
	(*GetPublicChallengesResponse)(nil),                    // 28: problems.GetPublicChallengesResponse
	(*JoinChallengeRequest)(nil),                           // 29: problems.JoinChallengeRequest
	(*JoinChallengeResponse)(nil),                          // 30: problems.JoinChallengeResponse
	(*StartChallengeRequest)(nil),                          // 31: problems.StartChallengeRequest
	(*StartChallengeResponse)(nil),                         // 32: problems.StartChallengeResponse
	(*EndChallengeRequest)(nil),                            // 33: problems.EndChallengeRequest
	(*EndChallengeResponse)(nil),                           // 34: problems.EndChallengeResponse
	(*GetSubmissionStatusRequest)(nil),                     // 35: problems.GetSubmissionStatusRequest
	(*GetSubmissionStatusResponse)(nil),                    // 36: problems.GetSubmissionStatusResponse
	(*GetChallengeSubmissionsRequest)(nil),                 // 37: problems.GetChallengeSubmissionsRequest
	(*GetChallengeSubmissionsResponse)(nil),                // 38: problems.GetChallengeSubmissionsResponse
	(*GetUserStatsRequest)(nil),                            // 39: problems.GetUserStatsRequest
	(*GetUserStatsResponse)(nil),                           // 40: problems.GetUserStatsResponse
	(*GetChallengeUserStatsRequest)(nil),                   // 41: problems.GetChallengeUserStatsRequest
	(*GetChallengeUserStatsResponse)(nil),                  // 42: problems.GetChallengeUserStatsResponse
	(*GetTopKGlobalRequest)(nil),                           // 43: problems.GetTopKGlobalRequest
	(*GetTopKGlobalResponse)(nil),                          // 44: problems.GetTopKGlobalResponse
	(*GetTopKEntityRequest)(nil),                           // 45: problems.GetTopKEntityRequest
	(*GetTopKEntityResponse)(nil),                          // 46: problems.GetTopKEntityResponse
	(*GetUserRankRequest)(nil),                             // 47: problems.GetUserRankRequest
	(*GetUserRankResponse)(nil),                            // 48: problems.GetUserRankResponse
	(*GetLeaderboardDataRequest)(nil),                      // 49: problems.GetLeaderboardDataRequest
	(*GetLeaderboardDataResponse)(nil),                     // 50: problems.GetLeaderboardDataResponse
	(*UserScore)(nil),                                      // 51: problems.UserScore
	(*GetMonthlyActivityHeatmapRequest)(nil),               // 52: problems.GetMonthlyActivityHeatmapRequest
	(*ActivityDay)(nil),                                    // 53: problems.ActivityDay
	(*GetMonthlyActivityHeatmapResponse)(nil),              // 54: problems.GetMonthlyActivityHeatmapResponse
	(*GetLeaderBoardOptionalCountryRequest)(nil),           // 55: problems.GetLeaderBoardOptionalCountryRequest
	(*GetLeaderBoardOptionalCountryResponse)(nil),          // 56: problems.GetLeaderBoardOptionalCountryResponse
	(*LeaderboardSingle)(nil),                              // 57: problems.LeaderboardSingle
	(*GetProblemsDoneStatisticsRequest)(nil),               // 58: problems.GetProblemsDoneStatisticsRequest
	(*GetProblemsDoneStatisticsResponse)(nil),              // 59: problems.GetProblemsDoneStatisticsResponse
	(*ProblemsDoneStatistics)(nil),                         // 60: problems.ProblemsDoneStatistics
	(*Timestamp)(nil),                                      // 61: problems.Timestamp
	(*TestCase)(nil),                                       // 62: problems.TestCase
	(*TestCases)(nil),                                      // 63: problems.TestCases
	(*TestCaseRunOnly)(nil),                                // 64: problems.TestCaseRunOnly
	(*ValidationCode)(nil),                                 // 65: problems.ValidationCode
	(*CreateProblemRequest)(nil),                           // 66: problems.CreateProblemRequest
	(*UpdateProblemRequest)(nil),                           // 67: problems.UpdateProblemRequest
	(*DeleteProblemRequest)(nil),                           // 68: problems.DeleteProblemRequest
	(*GetProblemRequest)(nil),                              // 69: problems.GetProblemRequest
	(*ListProblemsRequest)(nil),                            // 70: problems.ListProblemsRequest
	(*AddTestCasesRequest)(nil),                            // 71: problems.AddTestCasesRequest
	(*AddLanguageSupportRequest)(nil),                      // 72: problems.AddLanguageSupportRequest
	(*UpdateLanguageSupportRequest)(nil),                   // 73: problems.UpdateLanguageSupportRequest
	(*RemoveLanguageSupportRequest)(nil),                   // 74: problems.RemoveLanguageSupportRequest
	(*Problem)(nil),                                        // 75: problems.Problem
	(*CreateProblemResponse)(nil),                          // 76: problems.CreateProblemResponse
	(*UpdateProblemResponse)(nil),                          // 77: problems.UpdateProblemResponse
	(*DeleteProblemResponse)(nil),                          // 78: problems.DeleteProblemResponse
	(*GetProblemResponse)(nil),                             // 79: problems.GetProblemResponse
	(*ListProblemsResponse)(nil),                           // 80: problems.ListProblemsResponse
	(*AddTestCasesResponse)(nil),                           // 81: problems.AddTestCasesResponse
	(*AddLanguageSupportResponse)(nil),                     // 82: problems.AddLanguageSupportResponse
	(*UpdateLanguageSupportResponse)(nil),                  // 83: problems.UpdateLanguageSupportResponse
	(*RemoveLanguageSupportResponse)(nil),                  // 84: problems.RemoveLanguageSupportResponse
	(*DeleteTestCaseRequest)(nil),                          // 85: problems.DeleteTestCaseRequest
	(*DeleteTestCaseResponse)(nil),                         // 86: problems.DeleteTestCaseResponse
	(*GetLanguageSupportsRequest)(nil),                     // 87: problems.GetLanguageSupportsRequest
	(*GetLanguageSupportsResponse)(nil),                    // 88: problems.GetLanguageSupportsResponse
	(*FullValidationByProblemIDRequest)(nil),               // 89: problems.FullValidationByProblemIDRequest
	(*FullValidationByProblemIDResponse)(nil),              // 90: problems.FullValidationByProblemIDResponse
	(*RunProblemRequest)(nil),                              // 91: problems.RunProblemRequest
	(*RunProblemResponse)(nil),                             // 92: problems.RunProblemResponse
	(*Submission)(nil),                                     // 93: problems.Submission
	(*GetSubmissionsRequest)(nil),                          // 94: problems.GetSubmissionsRequest
	(*GetSubmissionsResponse)(nil),                         // 95: problems.GetSubmissionsResponse
	(*GetProblemByIdSlugRequest)(nil),                      // 96: problems.GetProblemByIdSlugRequest
	(*GetProblemByIdSlugResponse)(nil),                     // 97: problems.GetProblemByIdSlugResponse
	(*GetProblemMetadataListRequest)(nil),                  // 98: problems.GetProblemMetadataListRequest
	(*GetProblemMetadataListResponse)(nil),                 // 99: problems.GetProblemMetadataListResponse
	(*ProblemMetadataLite)(nil),                            // 100: problems.ProblemMetadataLite
	nil,                                                    // 101: problems.CheckProblemExistenceBulkResponse.ProblemExistenceEntry
	nil,                                                    // 102: problems.Challenge.UserProblemMetadataEntry
	nil,                                                    // 103: problems.UserStats.ChallengeStatsEntry
	nil,                                                    // 104: problems.Problem.ValidateCodeEntry
	nil,                                                    // 105: problems.GetLanguageSupportsResponse.ValidateCodeEntry
	nil,                                                    // 106: problems.ProblemMetadataLite.PlaceholderMapsEntry
}
var file_ProblemsService_problemsservice_proto_depIdxs = []int32{
	1,   // 0: problems.RandomProblemIDsGenWithDifficultyRatioRequest.qnratio:type_name -> problems.ProblemDifficultyRatio
	101, // 1: problems.CheckProblemExistenceBulkResponse.problem_existence:type_name -> problems.CheckProblemExistenceBulkResponse.ProblemExistenceEntry
	13,  // 2: problems.GetBulkProblemMetadataResponse.BulkProblemMetadata:type_name -> problems.BulkProblemMetadata
	16,  // 3: problems.GetChallengeHistoryResponse.challenges:type_name -> problems.Challenge
	102, // 4: problems.Challenge.user_problem_metadata:type_name -> problems.Challenge.UserProblemMetadataEntry
	64,  // 5: problems.ProblemMetadata.testcase_run:type_name -> problems.TestCaseRunOnly
	18,  // 6: problems.ProblemMetadataList.challenge_problem_metadata:type_name -> problems.ChallengeProblemMetadata
	103, // 7: problems.UserStats.challenge_stats:type_name -> problems.UserStats.ChallengeStatsEntry
	16,  // 8: problems.GetChallengeDetailsResponse.challenge:type_name -> problems.Challenge
	20,  // 9: problems.GetChallengeDetailsResponse.leaderboard:type_name -> problems.LeaderboardEntry
	16,  // 10: problems.GetPublicChallengesResponse.challenges:type_name -> problems.Challenge
	20,  // 11: problems.EndChallengeResponse.leaderboard:type_name -> problems.LeaderboardEntry
	93,  // 12: problems.GetSubmissionStatusResponse.submission:type_name -> problems.Submission
	93,  // 13: problems.GetChallengeSubmissionsResponse.submissions:type_name -> problems.Submission
	21,  // 14: problems.GetUserStatsResponse.stats:type_name -> problems.UserStats
	18,  // 15: problems.GetChallengeUserStatsResponse.challenge_problem_metadata:type_name -> problems.ChallengeProblemMetadata
	51,  // 16: problems.GetTopKGlobalResponse.users:type_name -> problems.UserScore
	51,  // 17: problems.GetTopKEntityResponse.users:type_name -> problems.UserScore
	51,  // 18: problems.GetLeaderboardDataResponse.top_k_global:type_name -> problems.UserScore
	51,  // 19: problems.GetLeaderboardDataResponse.top_k_entity:type_name -> problems.UserScore
	53,  // 20: problems.GetMonthlyActivityHeatmapResponse.data:type_name -> problems.ActivityDay
	57,  // 21: problems.GetLeaderBoardOptionalCountryResponse.data:type_name -> problems.LeaderboardSingle
	60,  // 22: problems.GetProblemsDoneStatisticsResponse.data:type_name -> problems.ProblemsDoneStatistics
	62,  // 23: problems.TestCases.run:type_name -> problems.TestCase
	62,  // 24: problems.TestCases.submit:type_name -> problems.TestCase
	62,  // 25: problems.TestCaseRunOnly.run:type_name -> problems.TestCase
	63,  // 26: problems.AddTestCasesRequest.testcases:type_name -> problems.TestCases
	65,  // 27: problems.AddLanguageSupportRequest.validation_code:type_name -> problems.ValidationCode
	65,  // 28: problems.UpdateLanguageSupportRequest.validation_code:type_name -> problems.ValidationCode
	61,  // 29: problems.Problem.created_at:type_name -> problems.Timestamp
	61,  // 30: problems.Problem.updated_at:type_name -> problems.Timestamp
	61,  // 31: problems.Problem.deleted_at:type_name -> problems.Timestamp
	63,  // 32: problems.Problem.testcases:type_name -> problems.TestCases
	104, // 33: problems.Problem.validate_code:type_name -> problems.Problem.ValidateCodeEntry
	61,  // 34: problems.Problem.validated_at:type_name -> problems.Timestamp
	75,  // 35: problems.GetProblemResponse.problem:type_name -> problems.Problem
	75,  // 36: problems.ListProblemsResponse.problems:type_name -> problems.Problem
	105, // 37: problems.GetLanguageSupportsResponse.validate_code:type_name -> problems.GetLanguageSupportsResponse.ValidateCodeEntry
	61,  // 38: problems.Submission.submitted_at:type_name -> problems.Timestamp
	93,  // 39: problems.GetSubmissionsResponse.submissions:type_name -> problems.Submission
	100, // 40: problems.GetProblemByIdSlugResponse.problemmetdata:type_name -> problems.ProblemMetadataLite
	100, // 41: problems.GetProblemMetadataListResponse.problemmetdata:type_name -> problems.ProblemMetadataLite
	64,  // 42: problems.ProblemMetadataLite.testcase_run:type_name -> problems.TestCaseRunOnly
	106, // 43: problems.ProblemMetadataLite.placeholder_maps:type_name -> problems.ProblemMetadataLite.PlaceholderMapsEntry
	19,  // 44: problems.Challenge.UserProblemMetadataEntry.value:type_name -> problems.ProblemMetadataList
	22,  // 45: problems.UserStats.ChallengeStatsEntry.value:type_name -> problems.ChallengeStat
	65,  // 46: problems.Problem.ValidateCodeEntry.value:type_name -> problems.ValidationCode
	65,  // 47: problems.GetLanguageSupportsResponse.ValidateCodeEntry.value:type_name -> problems.ValidationCode
	66,  // 48: problems.ProblemsService.CreateProblem:input_type -> problems.CreateProblemRequest
	67,  // 49: problems.ProblemsService.UpdateProblem:input_type -> problems.UpdateProblemRequest
	68,  // 50: problems.ProblemsService.DeleteProblem:input_type -> problems.DeleteProblemRequest
	69,  // 51: problems.ProblemsService.GetProblem:input_type -> problems.GetProblemRequest
	70,  // 52: problems.ProblemsService.ListProblems:input_type -> problems.ListProblemsRequest
	96,  // 53: problems.ProblemsService.GetProblemByIDSlug:input_type -> problems.GetProblemByIdSlugRequest
	98,  // 54: problems.ProblemsService.GetProblemMetadataList:input_type -> problems.GetProblemMetadataListRequest
	71,  // 55: problems.ProblemsService.AddTestCases:input_type -> problems.AddTestCasesRequest
	85,  // 56: problems.ProblemsService.DeleteTestCase:input_type -> problems.DeleteTestCaseRequest
	87,  // 57: problems.ProblemsService.GetLanguageSupports:input_type -> problems.GetLanguageSupportsRequest
	72,  // 58: problems.ProblemsService.AddLanguageSupport:input_type -> problems.AddLanguageSupportRequest
	73,  // 59: problems.ProblemsService.UpdateLanguageSupport:input_type -> problems.UpdateLanguageSupportRequest
	74,  // 60: problems.ProblemsService.RemoveLanguageSupport:input_type -> problems.RemoveLanguageSupportRequest
	89,  // 61: problems.ProblemsService.FullValidationByProblemID:input_type -> problems.FullValidationByProblemIDRequest
	91,  // 62: problems.ProblemsService.RunUserCodeProblem:input_type -> problems.RunProblemRequest
	94,  // 63: problems.ProblemsService.GetSubmissionsByOptionalProblemID:input_type -> problems.GetSubmissionsRequest
	7,   // 64: problems.ProblemsService.GetSubmissionsByID:input_type -> problems.GetSubmissionsByIDRequest
	5,   // 65: problems.ProblemsService.ProblemIDsDoneByUserID:input_type -> problems.ProblemIDsDoneByUserIDRequest
	58,  // 66: problems.ProblemsService.GetProblemsDoneStatistics:input_type -> problems.GetProblemsDoneStatisticsRequest
	9,   // 67: problems.ProblemsService.ForceChangeUserEntityInSubmission:input_type -> problems.ForceChangeUserEntityInSubmissionRequest
	52,  // 68: problems.ProblemsService.GetMonthlyActivityHeatmap:input_type -> problems.GetMonthlyActivityHeatmapRequest
	43,  // 69: problems.ProblemsService.GetTopKGlobal:input_type -> problems.GetTopKGlobalRequest
	45,  // 70: problems.ProblemsService.GetTopKEntity:input_type -> problems.GetTopKEntityRequest
	47,  // 71: problems.ProblemsService.GetUserRank:input_type -> problems.GetUserRankRequest
	49,  // 72: problems.ProblemsService.GetLeaderboardData:input_type -> problems.GetLeaderboardDataRequest
	23,  // 73: problems.ProblemsService.CreateChallenge:input_type -> problems.CreateChallengeRequest
	25,  // 74: problems.ProblemsService.GetChallengeDetails:input_type -> problems.GetChallengeDetailsRequest
	27,  // 75: problems.ProblemsService.GetPublicChallenges:input_type -> problems.GetPublicChallengesRequest
	29,  // 76: problems.ProblemsService.JoinChallenge:input_type -> problems.JoinChallengeRequest
	31,  // 77: problems.ProblemsService.StartChallenge:input_type -> problems.StartChallengeRequest
	33,  // 78: problems.ProblemsService.EndChallenge:input_type -> problems.EndChallengeRequest
	35,  // 79: problems.ProblemsService.GetSubmissionStatus:input_type -> problems.GetSubmissionStatusRequest
	37,  // 80: problems.ProblemsService.GetChallengeSubmissions:input_type -> problems.GetChallengeSubmissionsRequest
	39,  // 81: problems.ProblemsService.GetUserStats:input_type -> problems.GetUserStatsRequest
	41,  // 82: problems.ProblemsService.GetChallengeUserStats:input_type -> problems.GetChallengeUserStatsRequest
	14,  // 83: problems.ProblemsService.GetChallengeHistory:input_type -> problems.GetChallengeHistoryRequest
	11,  // 84: problems.ProblemsService.GetBulkProblemMetadata:input_type -> problems.GetBulkProblemMetadataRequest
	3,   // 85: problems.ProblemsService.CheckProblemExistenceBulk:input_type -> problems.CheckProblemExistenceBulkRequest
	0,   // 86: problems.ProblemsService.RandomProblemIDsGenWithDifficultyRatio:input_type -> problems.RandomProblemIDsGenWithDifficultyRatioRequest
	76,  // 87: problems.ProblemsService.CreateProblem:output_type -> problems.CreateProblemResponse
	77,  // 88: problems.ProblemsService.UpdateProblem:output_type -> problems.UpdateProblemResponse
	78,  // 89: problems.ProblemsService.DeleteProblem:output_type -> problems.DeleteProblemResponse
	79,  // 90: problems.ProblemsService.GetProblem:output_type -> problems.GetProblemResponse
	80,  // 91: problems.ProblemsService.ListProblems:output_type -> problems.ListProblemsResponse
	97,  // 92: problems.ProblemsService.GetProblemByIDSlug:output_type -> problems.GetProblemByIdSlugResponse
	99,  // 93: problems.ProblemsService.GetProblemMetadataList:output_type -> problems.GetProblemMetadataListResponse
	81,  // 94: problems.ProblemsService.AddTestCases:output_type -> problems.AddTestCasesResponse
	86,  // 95: problems.ProblemsService.DeleteTestCase:output_type -> problems.DeleteTestCaseResponse
	88,  // 96: problems.ProblemsService.GetLanguageSupports:output_type -> problems.GetLanguageSupportsResponse
	82,  // 97: problems.ProblemsService.AddLanguageSupport:output_type -> problems.AddLanguageSupportResponse
	83,  // 98: problems.ProblemsService.UpdateLanguageSupport:output_type -> problems.UpdateLanguageSupportResponse
	84,  // 99: problems.ProblemsService.RemoveLanguageSupport:output_type -> problems.RemoveLanguageSupportResponse
	90,  // 100: problems.ProblemsService.FullValidationByProblemID:output_type -> problems.FullValidationByProblemIDResponse
	92,  // 101: problems.ProblemsService.RunUserCodeProblem:output_type -> problems.RunProblemResponse
	95,  // 102: problems.ProblemsService.GetSubmissionsByOptionalProblemID:output_type -> problems.GetSubmissionsResponse
	8,   // 103: problems.ProblemsService.GetSubmissionsByID:output_type -> problems.GetSubmissionsByIDResponse
	6,   // 104: problems.ProblemsService.ProblemIDsDoneByUserID:output_type -> problems.ProblemIDsDoneByUserIDResponse
	59,  // 105: problems.ProblemsService.GetProblemsDoneStatistics:output_type -> problems.GetProblemsDoneStatisticsResponse
	10,  // 106: problems.ProblemsService.ForceChangeUserEntityInSubmission:output_type -> problems.ForceChangeUserEntityInSubmissionResponse
	54,  // 107: problems.ProblemsService.GetMonthlyActivityHeatmap:output_type -> problems.GetMonthlyActivityHeatmapResponse
	44,  // 108: problems.ProblemsService.GetTopKGlobal:output_type -> problems.GetTopKGlobalResponse
	46,  // 109: problems.ProblemsService.GetTopKEntity:output_type -> problems.GetTopKEntityResponse
	48,  // 110: problems.ProblemsService.GetUserRank:output_type -> problems.GetUserRankResponse
	50,  // 111: problems.ProblemsService.GetLeaderboardData:output_type -> problems.GetLeaderboardDataResponse
	24,  // 112: problems.ProblemsService.CreateChallenge:output_type -> problems.CreateChallengeResponse
	26,  // 113: problems.ProblemsService.GetChallengeDetails:output_type -> problems.GetChallengeDetailsResponse
	28,  // 114: problems.ProblemsService.GetPublicChallenges:output_type -> problems.GetPublicChallengesResponse
	30,  // 115: problems.ProblemsService.JoinChallenge:output_type -> problems.JoinChallengeResponse
	32,  // 116: problems.ProblemsService.StartChallenge:output_type -> problems.StartChallengeResponse
	34,  // 117: problems.ProblemsService.EndChallenge:output_type -> problems.EndChallengeResponse
	36,  // 118: problems.ProblemsService.GetSubmissionStatus:output_type -> problems.GetSubmissionStatusResponse
	38,  // 119: problems.ProblemsService.GetChallengeSubmissions:output_type -> problems.GetChallengeSubmissionsResponse
	40,  // 120: problems.ProblemsService.GetUserStats:output_type -> problems.GetUserStatsResponse
	42,  // 121: problems.ProblemsService.GetChallengeUserStats:output_type -> problems.GetChallengeUserStatsResponse
	15,  // 122: problems.ProblemsService.GetChallengeHistory:output_type -> problems.GetChallengeHistoryResponse
	12,  // 123: problems.ProblemsService.GetBulkProblemMetadata:output_type -> problems.GetBulkProblemMetadataResponse
	4,   // 124: problems.ProblemsService.CheckProblemExistenceBulk:output_type -> problems.CheckProblemExistenceBulkResponse
	2,   // 125: problems.ProblemsService.RandomProblemIDsGenWithDifficultyRatio:output_type -> problems.RandomProblemIDsGenWithDifficultyRatioResponse
	87,  // [87:126] is the sub-list for method output_type
	48,  // [48:87] is the sub-list for method input_type
	48,  // [48:48] is the sub-list for extension type_name
	48,  // [48:48] is the sub-list for extension extendee
	0,   // [0:48] is the sub-list for field type_name
}

func init() { file_ProblemsService_problemsservice_proto_init() }
func file_ProblemsService_problemsservice_proto_init() {
	if File_ProblemsService_problemsservice_proto != nil {
		return
	}
	file_ProblemsService_problemsservice_proto_msgTypes[14].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[16].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[29].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[55].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[56].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[57].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[58].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[67].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[75].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[91].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[94].OneofWrappers = []any{}
	file_ProblemsService_problemsservice_proto_msgTypes[96].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ProblemsService_problemsservice_proto_rawDesc), len(file_ProblemsService_problemsservice_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   107,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ProblemsService_problemsservice_proto_goTypes,
		DependencyIndexes: file_ProblemsService_problemsservice_proto_depIdxs,
		MessageInfos:      file_ProblemsService_problemsservice_proto_msgTypes,
	}.Build()
	File_ProblemsService_problemsservice_proto = out.File
	file_ProblemsService_problemsservice_proto_goTypes = nil
	file_ProblemsService_problemsservice_proto_depIdxs = nil
}
