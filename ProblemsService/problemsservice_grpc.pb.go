// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: ProblemsService/problemsservice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProblemsService_CreateProblem_FullMethodName             = "/problems.ProblemsService/CreateProblem"
	ProblemsService_UpdateProblem_FullMethodName             = "/problems.ProblemsService/UpdateProblem"
	ProblemsService_DeleteProblem_FullMethodName             = "/problems.ProblemsService/DeleteProblem"
	ProblemsService_GetProblem_FullMethodName                = "/problems.ProblemsService/GetProblem"
	ProblemsService_ListProblems_FullMethodName              = "/problems.ProblemsService/ListProblems"
	ProblemsService_AddTestCases_FullMethodName              = "/problems.ProblemsService/AddTestCases"
	ProblemsService_DeleteTestCase_FullMethodName            = "/problems.ProblemsService/DeleteTestCase"
	ProblemsService_AddLanguageSupport_FullMethodName        = "/problems.ProblemsService/AddLanguageSupport"
	ProblemsService_UpdateLanguageSupport_FullMethodName     = "/problems.ProblemsService/UpdateLanguageSupport"
	ProblemsService_RemoveLanguageSupport_FullMethodName     = "/problems.ProblemsService/RemoveLanguageSupport"
	ProblemsService_FullValidationByProblemID_FullMethodName = "/problems.ProblemsService/FullValidationByProblemID"
)

// ProblemsServiceClient is the client API for ProblemsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProblemsServiceClient interface {
	// Problem CRUD Operations
	CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error)
	UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemResponse, error)
	DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemResponse, error)
	GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error)
	ListProblems(ctx context.Context, in *ListProblemsRequest, opts ...grpc.CallOption) (*ListProblemsResponse, error)
	// Test Case Operations
	AddTestCases(ctx context.Context, in *AddTestCasesRequest, opts ...grpc.CallOption) (*AddTestCasesResponse, error)
	DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*DeleteTestCaseResponse, error)
	// Language Support Operations
	AddLanguageSupport(ctx context.Context, in *AddLanguageSupportRequest, opts ...grpc.CallOption) (*AddLanguageSupportResponse, error)
	UpdateLanguageSupport(ctx context.Context, in *UpdateLanguageSupportRequest, opts ...grpc.CallOption) (*UpdateLanguageSupportResponse, error)
	RemoveLanguageSupport(ctx context.Context, in *RemoveLanguageSupportRequest, opts ...grpc.CallOption) (*RemoveLanguageSupportResponse, error)
	// Full Validation
	FullValidationByProblemID(ctx context.Context, in *FullValidationByProblemIDRequest, opts ...grpc.CallOption) (*FullValidationByProblemIDResponse, error)
}

type problemsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProblemsServiceClient(cc grpc.ClientConnInterface) ProblemsServiceClient {
	return &problemsServiceClient{cc}
}

func (c *problemsServiceClient) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProblemResponse)
	err := c.cc.Invoke(ctx, ProblemsService_CreateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProblemResponse)
	err := c.cc.Invoke(ctx, ProblemsService_UpdateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProblemResponse)
	err := c.cc.Invoke(ctx, ProblemsService_DeleteProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProblemResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) ListProblems(ctx context.Context, in *ListProblemsRequest, opts ...grpc.CallOption) (*ListProblemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProblemsResponse)
	err := c.cc.Invoke(ctx, ProblemsService_ListProblems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) AddTestCases(ctx context.Context, in *AddTestCasesRequest, opts ...grpc.CallOption) (*AddTestCasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTestCasesResponse)
	err := c.cc.Invoke(ctx, ProblemsService_AddTestCases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*DeleteTestCaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTestCaseResponse)
	err := c.cc.Invoke(ctx, ProblemsService_DeleteTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) AddLanguageSupport(ctx context.Context, in *AddLanguageSupportRequest, opts ...grpc.CallOption) (*AddLanguageSupportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLanguageSupportResponse)
	err := c.cc.Invoke(ctx, ProblemsService_AddLanguageSupport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) UpdateLanguageSupport(ctx context.Context, in *UpdateLanguageSupportRequest, opts ...grpc.CallOption) (*UpdateLanguageSupportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLanguageSupportResponse)
	err := c.cc.Invoke(ctx, ProblemsService_UpdateLanguageSupport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) RemoveLanguageSupport(ctx context.Context, in *RemoveLanguageSupportRequest, opts ...grpc.CallOption) (*RemoveLanguageSupportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveLanguageSupportResponse)
	err := c.cc.Invoke(ctx, ProblemsService_RemoveLanguageSupport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) FullValidationByProblemID(ctx context.Context, in *FullValidationByProblemIDRequest, opts ...grpc.CallOption) (*FullValidationByProblemIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FullValidationByProblemIDResponse)
	err := c.cc.Invoke(ctx, ProblemsService_FullValidationByProblemID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemsServiceServer is the server API for ProblemsService service.
// All implementations must embed UnimplementedProblemsServiceServer
// for forward compatibility.
type ProblemsServiceServer interface {
	// Problem CRUD Operations
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error)
	UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemResponse, error)
	DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemResponse, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error)
	ListProblems(context.Context, *ListProblemsRequest) (*ListProblemsResponse, error)
	// Test Case Operations
	AddTestCases(context.Context, *AddTestCasesRequest) (*AddTestCasesResponse, error)
	DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*DeleteTestCaseResponse, error)
	// Language Support Operations
	AddLanguageSupport(context.Context, *AddLanguageSupportRequest) (*AddLanguageSupportResponse, error)
	UpdateLanguageSupport(context.Context, *UpdateLanguageSupportRequest) (*UpdateLanguageSupportResponse, error)
	RemoveLanguageSupport(context.Context, *RemoveLanguageSupportRequest) (*RemoveLanguageSupportResponse, error)
	// Full Validation
	FullValidationByProblemID(context.Context, *FullValidationByProblemIDRequest) (*FullValidationByProblemIDResponse, error)
	mustEmbedUnimplementedProblemsServiceServer()
}

// UnimplementedProblemsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProblemsServiceServer struct{}

func (UnimplementedProblemsServiceServer) CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedProblemsServiceServer) UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblem not implemented")
}
func (UnimplementedProblemsServiceServer) DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblem not implemented")
}
func (UnimplementedProblemsServiceServer) GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblem not implemented")
}
func (UnimplementedProblemsServiceServer) ListProblems(context.Context, *ListProblemsRequest) (*ListProblemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblems not implemented")
}
func (UnimplementedProblemsServiceServer) AddTestCases(context.Context, *AddTestCasesRequest) (*AddTestCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTestCases not implemented")
}
func (UnimplementedProblemsServiceServer) DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*DeleteTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestCase not implemented")
}
func (UnimplementedProblemsServiceServer) AddLanguageSupport(context.Context, *AddLanguageSupportRequest) (*AddLanguageSupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLanguageSupport not implemented")
}
func (UnimplementedProblemsServiceServer) UpdateLanguageSupport(context.Context, *UpdateLanguageSupportRequest) (*UpdateLanguageSupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguageSupport not implemented")
}
func (UnimplementedProblemsServiceServer) RemoveLanguageSupport(context.Context, *RemoveLanguageSupportRequest) (*RemoveLanguageSupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLanguageSupport not implemented")
}
func (UnimplementedProblemsServiceServer) FullValidationByProblemID(context.Context, *FullValidationByProblemIDRequest) (*FullValidationByProblemIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullValidationByProblemID not implemented")
}
func (UnimplementedProblemsServiceServer) mustEmbedUnimplementedProblemsServiceServer() {}
func (UnimplementedProblemsServiceServer) testEmbeddedByValue()                         {}

// UnsafeProblemsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProblemsServiceServer will
// result in compilation errors.
type UnsafeProblemsServiceServer interface {
	mustEmbedUnimplementedProblemsServiceServer()
}

func RegisterProblemsServiceServer(s grpc.ServiceRegistrar, srv ProblemsServiceServer) {
	// If the following call pancis, it indicates UnimplementedProblemsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProblemsService_ServiceDesc, srv)
}

func _ProblemsService_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_CreateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).CreateProblem(ctx, req.(*CreateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_UpdateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).UpdateProblem(ctx, req.(*UpdateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_DeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).DeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_DeleteProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).DeleteProblem(ctx, req.(*DeleteProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetProblem(ctx, req.(*GetProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_ListProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).ListProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_ListProblems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).ListProblems(ctx, req.(*ListProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_AddTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTestCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).AddTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_AddTestCases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).AddTestCases(ctx, req.(*AddTestCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_DeleteTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).DeleteTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_DeleteTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).DeleteTestCase(ctx, req.(*DeleteTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_AddLanguageSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLanguageSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).AddLanguageSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_AddLanguageSupport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).AddLanguageSupport(ctx, req.(*AddLanguageSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_UpdateLanguageSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).UpdateLanguageSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_UpdateLanguageSupport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).UpdateLanguageSupport(ctx, req.(*UpdateLanguageSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_RemoveLanguageSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLanguageSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).RemoveLanguageSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_RemoveLanguageSupport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).RemoveLanguageSupport(ctx, req.(*RemoveLanguageSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_FullValidationByProblemID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullValidationByProblemIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).FullValidationByProblemID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_FullValidationByProblemID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).FullValidationByProblemID(ctx, req.(*FullValidationByProblemIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProblemsService_ServiceDesc is the grpc.ServiceDesc for ProblemsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProblemsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "problems.ProblemsService",
	HandlerType: (*ProblemsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProblem",
			Handler:    _ProblemsService_CreateProblem_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _ProblemsService_UpdateProblem_Handler,
		},
		{
			MethodName: "DeleteProblem",
			Handler:    _ProblemsService_DeleteProblem_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _ProblemsService_GetProblem_Handler,
		},
		{
			MethodName: "ListProblems",
			Handler:    _ProblemsService_ListProblems_Handler,
		},
		{
			MethodName: "AddTestCases",
			Handler:    _ProblemsService_AddTestCases_Handler,
		},
		{
			MethodName: "DeleteTestCase",
			Handler:    _ProblemsService_DeleteTestCase_Handler,
		},
		{
			MethodName: "AddLanguageSupport",
			Handler:    _ProblemsService_AddLanguageSupport_Handler,
		},
		{
			MethodName: "UpdateLanguageSupport",
			Handler:    _ProblemsService_UpdateLanguageSupport_Handler,
		},
		{
			MethodName: "RemoveLanguageSupport",
			Handler:    _ProblemsService_RemoveLanguageSupport_Handler,
		},
		{
			MethodName: "FullValidationByProblemID",
			Handler:    _ProblemsService_FullValidationByProblemID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProblemsService/problemsservice.proto",
}
