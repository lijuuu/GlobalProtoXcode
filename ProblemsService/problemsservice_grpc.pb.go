// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: ProblemsService/problemsservice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProblemsService_CreateProblem_FullMethodName                     = "/problems.ProblemsService/CreateProblem"
	ProblemsService_UpdateProblem_FullMethodName                     = "/problems.ProblemsService/UpdateProblem"
	ProblemsService_DeleteProblem_FullMethodName                     = "/problems.ProblemsService/DeleteProblem"
	ProblemsService_GetProblem_FullMethodName                        = "/problems.ProblemsService/GetProblem"
	ProblemsService_ListProblems_FullMethodName                      = "/problems.ProblemsService/ListProblems"
	ProblemsService_GetProblemByIDSlug_FullMethodName                = "/problems.ProblemsService/GetProblemByIDSlug"
	ProblemsService_GetProblemByIDList_FullMethodName                = "/problems.ProblemsService/GetProblemByIDList"
	ProblemsService_AddTestCases_FullMethodName                      = "/problems.ProblemsService/AddTestCases"
	ProblemsService_DeleteTestCase_FullMethodName                    = "/problems.ProblemsService/DeleteTestCase"
	ProblemsService_GetLanguageSupports_FullMethodName               = "/problems.ProblemsService/GetLanguageSupports"
	ProblemsService_AddLanguageSupport_FullMethodName                = "/problems.ProblemsService/AddLanguageSupport"
	ProblemsService_UpdateLanguageSupport_FullMethodName             = "/problems.ProblemsService/UpdateLanguageSupport"
	ProblemsService_RemoveLanguageSupport_FullMethodName             = "/problems.ProblemsService/RemoveLanguageSupport"
	ProblemsService_FullValidationByProblemID_FullMethodName         = "/problems.ProblemsService/FullValidationByProblemID"
	ProblemsService_RunUserCodeProblem_FullMethodName                = "/problems.ProblemsService/RunUserCodeProblem"
	ProblemsService_GetSubmissionsByOptionalProblemID_FullMethodName = "/problems.ProblemsService/GetSubmissionsByOptionalProblemID"
	ProblemsService_GetProblemsDoneStatistics_FullMethodName         = "/problems.ProblemsService/GetProblemsDoneStatistics"
	ProblemsService_GetMonthlyActivityHeatmap_FullMethodName         = "/problems.ProblemsService/GetMonthlyActivityHeatmap"
	ProblemsService_GetTopKGlobal_FullMethodName                     = "/problems.ProblemsService/GetTopKGlobal"
	ProblemsService_GetTopKEntity_FullMethodName                     = "/problems.ProblemsService/GetTopKEntity"
	ProblemsService_GetUserRank_FullMethodName                       = "/problems.ProblemsService/GetUserRank"
	ProblemsService_GetLeaderboardData_FullMethodName                = "/problems.ProblemsService/GetLeaderboardData"
)

// ProblemsServiceClient is the client API for ProblemsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProblemsServiceClient interface {
	CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error)
	UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemResponse, error)
	DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemResponse, error)
	GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error)
	ListProblems(ctx context.Context, in *ListProblemsRequest, opts ...grpc.CallOption) (*ListProblemsResponse, error)
	GetProblemByIDSlug(ctx context.Context, in *GetProblemByIdSlugRequest, opts ...grpc.CallOption) (*GetProblemByIdSlugResponse, error)
	GetProblemByIDList(ctx context.Context, in *GetProblemByIdListRequest, opts ...grpc.CallOption) (*GetProblemByIdListResponse, error)
	AddTestCases(ctx context.Context, in *AddTestCasesRequest, opts ...grpc.CallOption) (*AddTestCasesResponse, error)
	DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*DeleteTestCaseResponse, error)
	GetLanguageSupports(ctx context.Context, in *GetLanguageSupportsRequest, opts ...grpc.CallOption) (*GetLanguageSupportsResponse, error)
	AddLanguageSupport(ctx context.Context, in *AddLanguageSupportRequest, opts ...grpc.CallOption) (*AddLanguageSupportResponse, error)
	UpdateLanguageSupport(ctx context.Context, in *UpdateLanguageSupportRequest, opts ...grpc.CallOption) (*UpdateLanguageSupportResponse, error)
	RemoveLanguageSupport(ctx context.Context, in *RemoveLanguageSupportRequest, opts ...grpc.CallOption) (*RemoveLanguageSupportResponse, error)
	FullValidationByProblemID(ctx context.Context, in *FullValidationByProblemIDRequest, opts ...grpc.CallOption) (*FullValidationByProblemIDResponse, error)
	RunUserCodeProblem(ctx context.Context, in *RunProblemRequest, opts ...grpc.CallOption) (*RunProblemResponse, error)
	GetSubmissionsByOptionalProblemID(ctx context.Context, in *GetSubmissionsRequest, opts ...grpc.CallOption) (*GetSubmissionsResponse, error)
	// leaderboard
	// get leaderboard -req: page,limit resp
	GetProblemsDoneStatistics(ctx context.Context, in *GetProblemsDoneStatisticsRequest, opts ...grpc.CallOption) (*GetProblemsDoneStatisticsResponse, error)
	// actitvitycontribution
	GetMonthlyActivityHeatmap(ctx context.Context, in *GetMonthlyActivityHeatmapRequest, opts ...grpc.CallOption) (*GetMonthlyActivityHeatmapResponse, error)
	// leaderboard methods
	GetTopKGlobal(ctx context.Context, in *GetTopKGlobalRequest, opts ...grpc.CallOption) (*GetTopKGlobalResponse, error)
	GetTopKEntity(ctx context.Context, in *GetTopKEntityRequest, opts ...grpc.CallOption) (*GetTopKEntityResponse, error)
	GetUserRank(ctx context.Context, in *GetUserRankRequest, opts ...grpc.CallOption) (*GetUserRankResponse, error)
	GetLeaderboardData(ctx context.Context, in *GetLeaderboardDataRequest, opts ...grpc.CallOption) (*GetLeaderboardDataResponse, error)
}

type problemsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProblemsServiceClient(cc grpc.ClientConnInterface) ProblemsServiceClient {
	return &problemsServiceClient{cc}
}

func (c *problemsServiceClient) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProblemResponse)
	err := c.cc.Invoke(ctx, ProblemsService_CreateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProblemResponse)
	err := c.cc.Invoke(ctx, ProblemsService_UpdateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProblemResponse)
	err := c.cc.Invoke(ctx, ProblemsService_DeleteProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProblemResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) ListProblems(ctx context.Context, in *ListProblemsRequest, opts ...grpc.CallOption) (*ListProblemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProblemsResponse)
	err := c.cc.Invoke(ctx, ProblemsService_ListProblems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetProblemByIDSlug(ctx context.Context, in *GetProblemByIdSlugRequest, opts ...grpc.CallOption) (*GetProblemByIdSlugResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProblemByIdSlugResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetProblemByIDSlug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetProblemByIDList(ctx context.Context, in *GetProblemByIdListRequest, opts ...grpc.CallOption) (*GetProblemByIdListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProblemByIdListResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetProblemByIDList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) AddTestCases(ctx context.Context, in *AddTestCasesRequest, opts ...grpc.CallOption) (*AddTestCasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTestCasesResponse)
	err := c.cc.Invoke(ctx, ProblemsService_AddTestCases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*DeleteTestCaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTestCaseResponse)
	err := c.cc.Invoke(ctx, ProblemsService_DeleteTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetLanguageSupports(ctx context.Context, in *GetLanguageSupportsRequest, opts ...grpc.CallOption) (*GetLanguageSupportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLanguageSupportsResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetLanguageSupports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) AddLanguageSupport(ctx context.Context, in *AddLanguageSupportRequest, opts ...grpc.CallOption) (*AddLanguageSupportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLanguageSupportResponse)
	err := c.cc.Invoke(ctx, ProblemsService_AddLanguageSupport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) UpdateLanguageSupport(ctx context.Context, in *UpdateLanguageSupportRequest, opts ...grpc.CallOption) (*UpdateLanguageSupportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLanguageSupportResponse)
	err := c.cc.Invoke(ctx, ProblemsService_UpdateLanguageSupport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) RemoveLanguageSupport(ctx context.Context, in *RemoveLanguageSupportRequest, opts ...grpc.CallOption) (*RemoveLanguageSupportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveLanguageSupportResponse)
	err := c.cc.Invoke(ctx, ProblemsService_RemoveLanguageSupport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) FullValidationByProblemID(ctx context.Context, in *FullValidationByProblemIDRequest, opts ...grpc.CallOption) (*FullValidationByProblemIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FullValidationByProblemIDResponse)
	err := c.cc.Invoke(ctx, ProblemsService_FullValidationByProblemID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) RunUserCodeProblem(ctx context.Context, in *RunProblemRequest, opts ...grpc.CallOption) (*RunProblemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunProblemResponse)
	err := c.cc.Invoke(ctx, ProblemsService_RunUserCodeProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetSubmissionsByOptionalProblemID(ctx context.Context, in *GetSubmissionsRequest, opts ...grpc.CallOption) (*GetSubmissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubmissionsResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetSubmissionsByOptionalProblemID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetProblemsDoneStatistics(ctx context.Context, in *GetProblemsDoneStatisticsRequest, opts ...grpc.CallOption) (*GetProblemsDoneStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProblemsDoneStatisticsResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetProblemsDoneStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetMonthlyActivityHeatmap(ctx context.Context, in *GetMonthlyActivityHeatmapRequest, opts ...grpc.CallOption) (*GetMonthlyActivityHeatmapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonthlyActivityHeatmapResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetMonthlyActivityHeatmap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetTopKGlobal(ctx context.Context, in *GetTopKGlobalRequest, opts ...grpc.CallOption) (*GetTopKGlobalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopKGlobalResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetTopKGlobal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetTopKEntity(ctx context.Context, in *GetTopKEntityRequest, opts ...grpc.CallOption) (*GetTopKEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopKEntityResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetTopKEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetUserRank(ctx context.Context, in *GetUserRankRequest, opts ...grpc.CallOption) (*GetUserRankResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRankResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetUserRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemsServiceClient) GetLeaderboardData(ctx context.Context, in *GetLeaderboardDataRequest, opts ...grpc.CallOption) (*GetLeaderboardDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderboardDataResponse)
	err := c.cc.Invoke(ctx, ProblemsService_GetLeaderboardData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemsServiceServer is the server API for ProblemsService service.
// All implementations must embed UnimplementedProblemsServiceServer
// for forward compatibility.
type ProblemsServiceServer interface {
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error)
	UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemResponse, error)
	DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemResponse, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error)
	ListProblems(context.Context, *ListProblemsRequest) (*ListProblemsResponse, error)
	GetProblemByIDSlug(context.Context, *GetProblemByIdSlugRequest) (*GetProblemByIdSlugResponse, error)
	GetProblemByIDList(context.Context, *GetProblemByIdListRequest) (*GetProblemByIdListResponse, error)
	AddTestCases(context.Context, *AddTestCasesRequest) (*AddTestCasesResponse, error)
	DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*DeleteTestCaseResponse, error)
	GetLanguageSupports(context.Context, *GetLanguageSupportsRequest) (*GetLanguageSupportsResponse, error)
	AddLanguageSupport(context.Context, *AddLanguageSupportRequest) (*AddLanguageSupportResponse, error)
	UpdateLanguageSupport(context.Context, *UpdateLanguageSupportRequest) (*UpdateLanguageSupportResponse, error)
	RemoveLanguageSupport(context.Context, *RemoveLanguageSupportRequest) (*RemoveLanguageSupportResponse, error)
	FullValidationByProblemID(context.Context, *FullValidationByProblemIDRequest) (*FullValidationByProblemIDResponse, error)
	RunUserCodeProblem(context.Context, *RunProblemRequest) (*RunProblemResponse, error)
	GetSubmissionsByOptionalProblemID(context.Context, *GetSubmissionsRequest) (*GetSubmissionsResponse, error)
	// leaderboard
	// get leaderboard -req: page,limit resp
	GetProblemsDoneStatistics(context.Context, *GetProblemsDoneStatisticsRequest) (*GetProblemsDoneStatisticsResponse, error)
	// actitvitycontribution
	GetMonthlyActivityHeatmap(context.Context, *GetMonthlyActivityHeatmapRequest) (*GetMonthlyActivityHeatmapResponse, error)
	// leaderboard methods
	GetTopKGlobal(context.Context, *GetTopKGlobalRequest) (*GetTopKGlobalResponse, error)
	GetTopKEntity(context.Context, *GetTopKEntityRequest) (*GetTopKEntityResponse, error)
	GetUserRank(context.Context, *GetUserRankRequest) (*GetUserRankResponse, error)
	GetLeaderboardData(context.Context, *GetLeaderboardDataRequest) (*GetLeaderboardDataResponse, error)
	mustEmbedUnimplementedProblemsServiceServer()
}

// UnimplementedProblemsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProblemsServiceServer struct{}

func (UnimplementedProblemsServiceServer) CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedProblemsServiceServer) UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblem not implemented")
}
func (UnimplementedProblemsServiceServer) DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblem not implemented")
}
func (UnimplementedProblemsServiceServer) GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblem not implemented")
}
func (UnimplementedProblemsServiceServer) ListProblems(context.Context, *ListProblemsRequest) (*ListProblemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblems not implemented")
}
func (UnimplementedProblemsServiceServer) GetProblemByIDSlug(context.Context, *GetProblemByIdSlugRequest) (*GetProblemByIdSlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemByIDSlug not implemented")
}
func (UnimplementedProblemsServiceServer) GetProblemByIDList(context.Context, *GetProblemByIdListRequest) (*GetProblemByIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemByIDList not implemented")
}
func (UnimplementedProblemsServiceServer) AddTestCases(context.Context, *AddTestCasesRequest) (*AddTestCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTestCases not implemented")
}
func (UnimplementedProblemsServiceServer) DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*DeleteTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestCase not implemented")
}
func (UnimplementedProblemsServiceServer) GetLanguageSupports(context.Context, *GetLanguageSupportsRequest) (*GetLanguageSupportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageSupports not implemented")
}
func (UnimplementedProblemsServiceServer) AddLanguageSupport(context.Context, *AddLanguageSupportRequest) (*AddLanguageSupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLanguageSupport not implemented")
}
func (UnimplementedProblemsServiceServer) UpdateLanguageSupport(context.Context, *UpdateLanguageSupportRequest) (*UpdateLanguageSupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguageSupport not implemented")
}
func (UnimplementedProblemsServiceServer) RemoveLanguageSupport(context.Context, *RemoveLanguageSupportRequest) (*RemoveLanguageSupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLanguageSupport not implemented")
}
func (UnimplementedProblemsServiceServer) FullValidationByProblemID(context.Context, *FullValidationByProblemIDRequest) (*FullValidationByProblemIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullValidationByProblemID not implemented")
}
func (UnimplementedProblemsServiceServer) RunUserCodeProblem(context.Context, *RunProblemRequest) (*RunProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunUserCodeProblem not implemented")
}
func (UnimplementedProblemsServiceServer) GetSubmissionsByOptionalProblemID(context.Context, *GetSubmissionsRequest) (*GetSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionsByOptionalProblemID not implemented")
}
func (UnimplementedProblemsServiceServer) GetProblemsDoneStatistics(context.Context, *GetProblemsDoneStatisticsRequest) (*GetProblemsDoneStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemsDoneStatistics not implemented")
}
func (UnimplementedProblemsServiceServer) GetMonthlyActivityHeatmap(context.Context, *GetMonthlyActivityHeatmapRequest) (*GetMonthlyActivityHeatmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyActivityHeatmap not implemented")
}
func (UnimplementedProblemsServiceServer) GetTopKGlobal(context.Context, *GetTopKGlobalRequest) (*GetTopKGlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopKGlobal not implemented")
}
func (UnimplementedProblemsServiceServer) GetTopKEntity(context.Context, *GetTopKEntityRequest) (*GetTopKEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopKEntity not implemented")
}
func (UnimplementedProblemsServiceServer) GetUserRank(context.Context, *GetUserRankRequest) (*GetUserRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRank not implemented")
}
func (UnimplementedProblemsServiceServer) GetLeaderboardData(context.Context, *GetLeaderboardDataRequest) (*GetLeaderboardDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboardData not implemented")
}
func (UnimplementedProblemsServiceServer) mustEmbedUnimplementedProblemsServiceServer() {}
func (UnimplementedProblemsServiceServer) testEmbeddedByValue()                         {}

// UnsafeProblemsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProblemsServiceServer will
// result in compilation errors.
type UnsafeProblemsServiceServer interface {
	mustEmbedUnimplementedProblemsServiceServer()
}

func RegisterProblemsServiceServer(s grpc.ServiceRegistrar, srv ProblemsServiceServer) {
	// If the following call pancis, it indicates UnimplementedProblemsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProblemsService_ServiceDesc, srv)
}

func _ProblemsService_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_CreateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).CreateProblem(ctx, req.(*CreateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_UpdateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).UpdateProblem(ctx, req.(*UpdateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_DeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).DeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_DeleteProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).DeleteProblem(ctx, req.(*DeleteProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetProblem(ctx, req.(*GetProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_ListProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).ListProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_ListProblems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).ListProblems(ctx, req.(*ListProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetProblemByIDSlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemByIdSlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetProblemByIDSlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetProblemByIDSlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetProblemByIDSlug(ctx, req.(*GetProblemByIdSlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetProblemByIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemByIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetProblemByIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetProblemByIDList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetProblemByIDList(ctx, req.(*GetProblemByIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_AddTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTestCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).AddTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_AddTestCases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).AddTestCases(ctx, req.(*AddTestCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_DeleteTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).DeleteTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_DeleteTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).DeleteTestCase(ctx, req.(*DeleteTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetLanguageSupports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageSupportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetLanguageSupports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetLanguageSupports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetLanguageSupports(ctx, req.(*GetLanguageSupportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_AddLanguageSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLanguageSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).AddLanguageSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_AddLanguageSupport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).AddLanguageSupport(ctx, req.(*AddLanguageSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_UpdateLanguageSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).UpdateLanguageSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_UpdateLanguageSupport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).UpdateLanguageSupport(ctx, req.(*UpdateLanguageSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_RemoveLanguageSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLanguageSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).RemoveLanguageSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_RemoveLanguageSupport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).RemoveLanguageSupport(ctx, req.(*RemoveLanguageSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_FullValidationByProblemID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullValidationByProblemIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).FullValidationByProblemID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_FullValidationByProblemID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).FullValidationByProblemID(ctx, req.(*FullValidationByProblemIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_RunUserCodeProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).RunUserCodeProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_RunUserCodeProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).RunUserCodeProblem(ctx, req.(*RunProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetSubmissionsByOptionalProblemID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetSubmissionsByOptionalProblemID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetSubmissionsByOptionalProblemID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetSubmissionsByOptionalProblemID(ctx, req.(*GetSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetProblemsDoneStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemsDoneStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetProblemsDoneStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetProblemsDoneStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetProblemsDoneStatistics(ctx, req.(*GetProblemsDoneStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetMonthlyActivityHeatmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyActivityHeatmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetMonthlyActivityHeatmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetMonthlyActivityHeatmap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetMonthlyActivityHeatmap(ctx, req.(*GetMonthlyActivityHeatmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetTopKGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopKGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetTopKGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetTopKGlobal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetTopKGlobal(ctx, req.(*GetTopKGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetTopKEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopKEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetTopKEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetTopKEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetTopKEntity(ctx, req.(*GetTopKEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetUserRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetUserRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetUserRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetUserRank(ctx, req.(*GetUserRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemsService_GetLeaderboardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemsServiceServer).GetLeaderboardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemsService_GetLeaderboardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemsServiceServer).GetLeaderboardData(ctx, req.(*GetLeaderboardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProblemsService_ServiceDesc is the grpc.ServiceDesc for ProblemsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProblemsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "problems.ProblemsService",
	HandlerType: (*ProblemsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProblem",
			Handler:    _ProblemsService_CreateProblem_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _ProblemsService_UpdateProblem_Handler,
		},
		{
			MethodName: "DeleteProblem",
			Handler:    _ProblemsService_DeleteProblem_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _ProblemsService_GetProblem_Handler,
		},
		{
			MethodName: "ListProblems",
			Handler:    _ProblemsService_ListProblems_Handler,
		},
		{
			MethodName: "GetProblemByIDSlug",
			Handler:    _ProblemsService_GetProblemByIDSlug_Handler,
		},
		{
			MethodName: "GetProblemByIDList",
			Handler:    _ProblemsService_GetProblemByIDList_Handler,
		},
		{
			MethodName: "AddTestCases",
			Handler:    _ProblemsService_AddTestCases_Handler,
		},
		{
			MethodName: "DeleteTestCase",
			Handler:    _ProblemsService_DeleteTestCase_Handler,
		},
		{
			MethodName: "GetLanguageSupports",
			Handler:    _ProblemsService_GetLanguageSupports_Handler,
		},
		{
			MethodName: "AddLanguageSupport",
			Handler:    _ProblemsService_AddLanguageSupport_Handler,
		},
		{
			MethodName: "UpdateLanguageSupport",
			Handler:    _ProblemsService_UpdateLanguageSupport_Handler,
		},
		{
			MethodName: "RemoveLanguageSupport",
			Handler:    _ProblemsService_RemoveLanguageSupport_Handler,
		},
		{
			MethodName: "FullValidationByProblemID",
			Handler:    _ProblemsService_FullValidationByProblemID_Handler,
		},
		{
			MethodName: "RunUserCodeProblem",
			Handler:    _ProblemsService_RunUserCodeProblem_Handler,
		},
		{
			MethodName: "GetSubmissionsByOptionalProblemID",
			Handler:    _ProblemsService_GetSubmissionsByOptionalProblemID_Handler,
		},
		{
			MethodName: "GetProblemsDoneStatistics",
			Handler:    _ProblemsService_GetProblemsDoneStatistics_Handler,
		},
		{
			MethodName: "GetMonthlyActivityHeatmap",
			Handler:    _ProblemsService_GetMonthlyActivityHeatmap_Handler,
		},
		{
			MethodName: "GetTopKGlobal",
			Handler:    _ProblemsService_GetTopKGlobal_Handler,
		},
		{
			MethodName: "GetTopKEntity",
			Handler:    _ProblemsService_GetTopKEntity_Handler,
		},
		{
			MethodName: "GetUserRank",
			Handler:    _ProblemsService_GetUserRank_Handler,
		},
		{
			MethodName: "GetLeaderboardData",
			Handler:    _ProblemsService_GetLeaderboardData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProblemsService/problemsservice.proto",
}
