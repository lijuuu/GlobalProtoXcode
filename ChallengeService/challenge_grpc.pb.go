// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: ChallengeService/challenge.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChallengeService_CreateChallenge_FullMethodName              = "/challenge.ChallengeService/CreateChallenge"
	ChallengeService_AbandonChallenge_FullMethodName             = "/challenge.ChallengeService/AbandonChallenge"
	ChallengeService_GetChallengeRoomInfoMetadata_FullMethodName = "/challenge.ChallengeService/GetChallengeRoomInfoMetadata"
	ChallengeService_GetFullChallengeData_FullMethodName         = "/challenge.ChallengeService/GetFullChallengeData"
	ChallengeService_GetChallengeHistory_FullMethodName          = "/challenge.ChallengeService/GetChallengeHistory"
	ChallengeService_GetActiveOpenChallenges_FullMethodName      = "/challenge.ChallengeService/GetActiveOpenChallenges"
	ChallengeService_GetOwnersActiveChallenges_FullMethodName    = "/challenge.ChallengeService/GetOwnersActiveChallenges"
	ChallengeService_PushSubmissionStatus_FullMethodName         = "/challenge.ChallengeService/PushSubmissionStatus"
	ChallengeService_GetPostChallengeData_FullMethodName         = "/challenge.ChallengeService/GetPostChallengeData"
)

// ChallengeServiceClient is the client API for ChallengeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChallengeServiceClient interface {
	CreateChallenge(ctx context.Context, in *ChallengeRecord, opts ...grpc.CallOption) (*ChallengeRecord, error)
	AbandonChallenge(ctx context.Context, in *AbandonChallengeRequest, opts ...grpc.CallOption) (*AbandonChallengeResponse, error)
	GetChallengeRoomInfoMetadata(ctx context.Context, in *GetChallengeRoomInfoMetadataRequest, opts ...grpc.CallOption) (*GetChallengeRoomInfoMetadataResponse, error)
	GetFullChallengeData(ctx context.Context, in *GetFullChallengeDataRequest, opts ...grpc.CallOption) (*GetFullChallengeDataResponse, error)
	GetChallengeHistory(ctx context.Context, in *GetChallengeHistoryRequest, opts ...grpc.CallOption) (*ChallengeListResponse, error)
	GetActiveOpenChallenges(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*ChallengeListResponse, error)
	GetOwnersActiveChallenges(ctx context.Context, in *GetOwnersActiveChallengesRequest, opts ...grpc.CallOption) (*ChallengeListResponse, error)
	PushSubmissionStatus(ctx context.Context, in *PushSubmissionStatusRequest, opts ...grpc.CallOption) (*PushSubmissionStatusResponse, error)
	GetPostChallengeData(ctx context.Context, in *GetPostChallengeDataRequest, opts ...grpc.CallOption) (*GetPostChallengeDataResponse, error)
}

type challengeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChallengeServiceClient(cc grpc.ClientConnInterface) ChallengeServiceClient {
	return &challengeServiceClient{cc}
}

func (c *challengeServiceClient) CreateChallenge(ctx context.Context, in *ChallengeRecord, opts ...grpc.CallOption) (*ChallengeRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChallengeRecord)
	err := c.cc.Invoke(ctx, ChallengeService_CreateChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) AbandonChallenge(ctx context.Context, in *AbandonChallengeRequest, opts ...grpc.CallOption) (*AbandonChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbandonChallengeResponse)
	err := c.cc.Invoke(ctx, ChallengeService_AbandonChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) GetChallengeRoomInfoMetadata(ctx context.Context, in *GetChallengeRoomInfoMetadataRequest, opts ...grpc.CallOption) (*GetChallengeRoomInfoMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChallengeRoomInfoMetadataResponse)
	err := c.cc.Invoke(ctx, ChallengeService_GetChallengeRoomInfoMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) GetFullChallengeData(ctx context.Context, in *GetFullChallengeDataRequest, opts ...grpc.CallOption) (*GetFullChallengeDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFullChallengeDataResponse)
	err := c.cc.Invoke(ctx, ChallengeService_GetFullChallengeData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) GetChallengeHistory(ctx context.Context, in *GetChallengeHistoryRequest, opts ...grpc.CallOption) (*ChallengeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChallengeListResponse)
	err := c.cc.Invoke(ctx, ChallengeService_GetChallengeHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) GetActiveOpenChallenges(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*ChallengeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChallengeListResponse)
	err := c.cc.Invoke(ctx, ChallengeService_GetActiveOpenChallenges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) GetOwnersActiveChallenges(ctx context.Context, in *GetOwnersActiveChallengesRequest, opts ...grpc.CallOption) (*ChallengeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChallengeListResponse)
	err := c.cc.Invoke(ctx, ChallengeService_GetOwnersActiveChallenges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) PushSubmissionStatus(ctx context.Context, in *PushSubmissionStatusRequest, opts ...grpc.CallOption) (*PushSubmissionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushSubmissionStatusResponse)
	err := c.cc.Invoke(ctx, ChallengeService_PushSubmissionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) GetPostChallengeData(ctx context.Context, in *GetPostChallengeDataRequest, opts ...grpc.CallOption) (*GetPostChallengeDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostChallengeDataResponse)
	err := c.cc.Invoke(ctx, ChallengeService_GetPostChallengeData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChallengeServiceServer is the server API for ChallengeService service.
// All implementations must embed UnimplementedChallengeServiceServer
// for forward compatibility.
type ChallengeServiceServer interface {
	CreateChallenge(context.Context, *ChallengeRecord) (*ChallengeRecord, error)
	AbandonChallenge(context.Context, *AbandonChallengeRequest) (*AbandonChallengeResponse, error)
	GetChallengeRoomInfoMetadata(context.Context, *GetChallengeRoomInfoMetadataRequest) (*GetChallengeRoomInfoMetadataResponse, error)
	GetFullChallengeData(context.Context, *GetFullChallengeDataRequest) (*GetFullChallengeDataResponse, error)
	GetChallengeHistory(context.Context, *GetChallengeHistoryRequest) (*ChallengeListResponse, error)
	GetActiveOpenChallenges(context.Context, *PaginationRequest) (*ChallengeListResponse, error)
	GetOwnersActiveChallenges(context.Context, *GetOwnersActiveChallengesRequest) (*ChallengeListResponse, error)
	PushSubmissionStatus(context.Context, *PushSubmissionStatusRequest) (*PushSubmissionStatusResponse, error)
	GetPostChallengeData(context.Context, *GetPostChallengeDataRequest) (*GetPostChallengeDataResponse, error)
	mustEmbedUnimplementedChallengeServiceServer()
}

// UnimplementedChallengeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChallengeServiceServer struct{}

func (UnimplementedChallengeServiceServer) CreateChallenge(context.Context, *ChallengeRecord) (*ChallengeRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChallenge not implemented")
}
func (UnimplementedChallengeServiceServer) AbandonChallenge(context.Context, *AbandonChallengeRequest) (*AbandonChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbandonChallenge not implemented")
}
func (UnimplementedChallengeServiceServer) GetChallengeRoomInfoMetadata(context.Context, *GetChallengeRoomInfoMetadataRequest) (*GetChallengeRoomInfoMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengeRoomInfoMetadata not implemented")
}
func (UnimplementedChallengeServiceServer) GetFullChallengeData(context.Context, *GetFullChallengeDataRequest) (*GetFullChallengeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChallengeData not implemented")
}
func (UnimplementedChallengeServiceServer) GetChallengeHistory(context.Context, *GetChallengeHistoryRequest) (*ChallengeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengeHistory not implemented")
}
func (UnimplementedChallengeServiceServer) GetActiveOpenChallenges(context.Context, *PaginationRequest) (*ChallengeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveOpenChallenges not implemented")
}
func (UnimplementedChallengeServiceServer) GetOwnersActiveChallenges(context.Context, *GetOwnersActiveChallengesRequest) (*ChallengeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnersActiveChallenges not implemented")
}
func (UnimplementedChallengeServiceServer) PushSubmissionStatus(context.Context, *PushSubmissionStatusRequest) (*PushSubmissionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSubmissionStatus not implemented")
}
func (UnimplementedChallengeServiceServer) GetPostChallengeData(context.Context, *GetPostChallengeDataRequest) (*GetPostChallengeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostChallengeData not implemented")
}
func (UnimplementedChallengeServiceServer) mustEmbedUnimplementedChallengeServiceServer() {}
func (UnimplementedChallengeServiceServer) testEmbeddedByValue()                          {}

// UnsafeChallengeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChallengeServiceServer will
// result in compilation errors.
type UnsafeChallengeServiceServer interface {
	mustEmbedUnimplementedChallengeServiceServer()
}

func RegisterChallengeServiceServer(s grpc.ServiceRegistrar, srv ChallengeServiceServer) {
	// If the following call pancis, it indicates UnimplementedChallengeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChallengeService_ServiceDesc, srv)
}

func _ChallengeService_CreateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).CreateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_CreateChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).CreateChallenge(ctx, req.(*ChallengeRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_AbandonChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).AbandonChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_AbandonChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).AbandonChallenge(ctx, req.(*AbandonChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_GetChallengeRoomInfoMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChallengeRoomInfoMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).GetChallengeRoomInfoMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_GetChallengeRoomInfoMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).GetChallengeRoomInfoMetadata(ctx, req.(*GetChallengeRoomInfoMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_GetFullChallengeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullChallengeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).GetFullChallengeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_GetFullChallengeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).GetFullChallengeData(ctx, req.(*GetFullChallengeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_GetChallengeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChallengeHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).GetChallengeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_GetChallengeHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).GetChallengeHistory(ctx, req.(*GetChallengeHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_GetActiveOpenChallenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).GetActiveOpenChallenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_GetActiveOpenChallenges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).GetActiveOpenChallenges(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_GetOwnersActiveChallenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnersActiveChallengesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).GetOwnersActiveChallenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_GetOwnersActiveChallenges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).GetOwnersActiveChallenges(ctx, req.(*GetOwnersActiveChallengesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_PushSubmissionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSubmissionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).PushSubmissionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_PushSubmissionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).PushSubmissionStatus(ctx, req.(*PushSubmissionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_GetPostChallengeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostChallengeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).GetPostChallengeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_GetPostChallengeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).GetPostChallengeData(ctx, req.(*GetPostChallengeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChallengeService_ServiceDesc is the grpc.ServiceDesc for ChallengeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChallengeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "challenge.ChallengeService",
	HandlerType: (*ChallengeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChallenge",
			Handler:    _ChallengeService_CreateChallenge_Handler,
		},
		{
			MethodName: "AbandonChallenge",
			Handler:    _ChallengeService_AbandonChallenge_Handler,
		},
		{
			MethodName: "GetChallengeRoomInfoMetadata",
			Handler:    _ChallengeService_GetChallengeRoomInfoMetadata_Handler,
		},
		{
			MethodName: "GetFullChallengeData",
			Handler:    _ChallengeService_GetFullChallengeData_Handler,
		},
		{
			MethodName: "GetChallengeHistory",
			Handler:    _ChallengeService_GetChallengeHistory_Handler,
		},
		{
			MethodName: "GetActiveOpenChallenges",
			Handler:    _ChallengeService_GetActiveOpenChallenges_Handler,
		},
		{
			MethodName: "GetOwnersActiveChallenges",
			Handler:    _ChallengeService_GetOwnersActiveChallenges_Handler,
		},
		{
			MethodName: "PushSubmissionStatus",
			Handler:    _ChallengeService_PushSubmissionStatus_Handler,
		},
		{
			MethodName: "GetPostChallengeData",
			Handler:    _ChallengeService_GetPostChallengeData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ChallengeService/challenge.proto",
}
