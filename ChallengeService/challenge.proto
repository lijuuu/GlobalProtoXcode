syntax = "proto3";

package challenge;

option go_package = "github.com/lijuuu/ChallengeWssManagerService/internal/proto";

message ParticipantMetadata {
  int64 joinTimeUnix = 1;
  map<string, ChallengeProblemMetadata> problemsDone = 2;
  int32 problemsAttempted = 3;
  int32 totalScore = 4;
  int64 lastConnectedUnix = 5;
}

message ChallengeProblemMetadata {
  string problemId = 1;
  int32 score = 2;
  int64 timeTaken = 3;
  int64 completedAtUnix = 4;
}

message SubmissionMetadata {
  string submissionId = 1;
  int64 timeTakenMillis = 2;
  int32 points = 3;
  string userCode = 4;
}

message SubmissionEntry {
  string problemId = 1;
  SubmissionMetadata submission = 2;
}

message UserSubmissions {
  string userId = 1;
  repeated SubmissionEntry entries = 2;
}

message LeaderboardEntry {
  string userId = 1;
  int32 problemsCompleted = 2;
  int32 totalScore = 3;
  int32 rank = 4;
}

message QuestionPool {
  repeated string questionIds = 1;
}

message ChallengeConfig {
  int32 maxUsers = 1;
  int32 maxEasyQuestions = 2;
  int32 maxMediumQuestions = 3;
  int32 maxHardQuestions = 4;
}

message ChallengeRecord {
  string challengeId = 1;
  string creatorId = 2;
  string title = 3;
  bool isPrivate = 4;
  string password = 5;
  string status = 6;
  int64 timeLimitMillis = 7;
  int64 startTimeUnix = 8;
  map<string, ParticipantMetadata> participants = 9;
  repeated UserSubmissions submissions = 10;
  repeated LeaderboardEntry leaderboard = 11;
  ChallengeConfig config = 12;
  repeated string processedProblemIds = 13;
  int64 createdAt = 14;
  int64 problemCount = 15;
}

message GetChallengeRoomInfoMetadataRequest {
  string challengeId = 1;
  optional string password = 2;
}

message GetChallengeRoomInfoMetadataResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
  ChallengeRecord challenge = 4;
}

message PaginationRequest {
  int32 page = 1;
  int32 pageSize = 2;
}

message ChallengeListResponse {
  repeated ChallengeRecord challenges = 1;
  int64 totalCount = 2;
}

message GetChallengeHistoryRequest {
  string userId = 1;
  PaginationRequest pagination = 2;
  bool isPrivate = 3;
}

message GetOwnersActiveChallengesRequest {
  string userId = 1;
  PaginationRequest pagination = 2;
}

message PushSubmissionStatusRequest {
  string userCode = 1;
  string challengeId = 2;
  string userId = 3;
  string problemId = 4;
  string submissionId = 6;
  int32 score = 7;
  bool isSuccessful = 8;
  int64 TimeTakenMillis = 9;
  string traceId = 10;
}

message PushSubmissionStatusResponse {
  string message = 1;
  bool success = 2;
}

message AbandonChallengeRequest {
  string challengeId = 1;
  string creatorId = 2;
}

message AbandonChallengeResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
}

message GetFullChallengeDataRequest {
  string challengeId = 1;
  optional string password = 2;
}

message GetFullChallengeDataResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
  ChallengeRecord challenge = 4;
}

message PostChallengeNotification {
  string type = 1;
  string message = 2;
  int64 time = 3;
}

message PostChallengeChatMessage {
  string userId = 1;
  string profilePic = 2;
  string message = 3;
  int64 time = 4;
}

message PostChallengeDocument {
  string challengeId = 1;
  string creatorId = 2;
  int64 createdAt = 3;
  string title = 4;
  bool isPrivate = 5;
  string status = 6;
  int64 timeLimit = 7;
  int64 startTime = 8;
  repeated PostChallengeNotification notifications = 9;
  repeated PostChallengeChatMessage chat = 10;
}

message GetPostChallengeDataRequest {
  string challengeId = 1;
  string userId = 2;
}

message GetPostChallengeDataResponse {
  bool success = 1;
  string message = 2;
  string errorType = 3;
  PostChallengeDocument challenge = 4;
}

service ChallengeService {
  rpc CreateChallenge(ChallengeRecord) returns (ChallengeRecord);
  rpc AbandonChallenge(AbandonChallengeRequest) returns (AbandonChallengeResponse);
  rpc GetChallengeRoomInfoMetadata(GetChallengeRoomInfoMetadataRequest) returns (GetChallengeRoomInfoMetadataResponse);
  rpc GetFullChallengeData(GetFullChallengeDataRequest) returns (GetFullChallengeDataResponse);
  rpc GetChallengeHistory(GetChallengeHistoryRequest) returns (ChallengeListResponse);
  rpc GetActiveOpenChallenges(PaginationRequest) returns (ChallengeListResponse);
  rpc GetOwnersActiveChallenges(GetOwnersActiveChallengesRequest) returns (ChallengeListResponse);
  rpc PushSubmissionStatus(PushSubmissionStatusRequest) returns (PushSubmissionStatusResponse);
  rpc GetPostChallengeData(GetPostChallengeDataRequest) returns (GetPostChallengeDataResponse);
}