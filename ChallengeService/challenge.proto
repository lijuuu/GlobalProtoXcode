syntax = "proto3";

package challenge;

option go_package = "github.com/lijuuu/ChallengeWssManagerService/internal/proto";

message ParticipantMetadata {
  string userId = 1;
  int64 joinTimeUnix = 2;
  map<string, ChallengeProblemMetadata> problemsDone = 3;
  int32 problemsAttempted = 4;
  int32 totalScore = 5;
  int64 lastConnectedUnix = 6;
}

message ChallengeProblemMetadata {
  string problemId = 1;
  int32 score = 2;
  int64 timeTaken = 3;
  int64 completedAtUnix = 4;
}

message Submission {
  string submissionId = 1;
  int64 timeTakenMillis = 2;
  int32 points = 3;
}

message LeaderboardEntry {
  string userId = 1;
  int32 problemsCompleted = 2;
  int32 totalScore = 3;
  int32 rank = 4;
}

message QuestionPool {
  repeated string questionIds = 1;
}

message ChallengeConfig {
  int32 maxUsers = 1;
  int32 maxEasyQuestions = 2;
  int32 maxMediumQuestions = 3;
  int32 maxHardQuestions = 4;
  map<string, QuestionPool> randomQuestionPool = 5;
  map<string, QuestionPool> initialQuestions = 6;
}

message ChallengeRecord {
  string challengeId = 1;
  string creatorId = 2;
  string title = 3;
  bool isPrivate = 4;
  string password = 5;
  string status = 6;
  repeated string problemIds = 7;
  int64 timeLimitMillis = 8;
  int64 startTimeUnix = 9;
  map<string, ParticipantMetadata> participants = 10;
  map<string, Submission> submissions = 11;
  repeated LeaderboardEntry leaderboard = 12;
  ChallengeConfig config = 13;
}

message PaginationRequest {
  int32 page = 1;
  int32 pageSize = 2;
}

message ChallengeListResponse {
  repeated ChallengeRecord challenges = 1;
  int64 totalCount = 2;
}

message PrivateChallengesRequest {
  string userId = 1;
  PaginationRequest pagination = 2;
}

message UserChallengesRequest {
  string userId = 1;
  PaginationRequest pagination = 2;
}

message PushSubmissionStatusRequest {
  string userCode = 1;
  string challengeId = 2;
  string userId = 3;
  string problemId = 4;
  string status = 5;
  string submissionId = 6;
  string traceId = 7;
}

message PushSubmissionStatusResponse {
  string message = 1;
  bool success = 2;
}

service ChallengeService {
  rpc CreateChallenge(ChallengeRecord) returns (ChallengeRecord) {}
  rpc GetPublicChallenges(PaginationRequest) returns (ChallengeListResponse) {}
  rpc GetPrivateChallengesOfUser(PrivateChallengesRequest) returns (ChallengeListResponse) {}
  rpc GetActiveChallenges(PaginationRequest) returns (ChallengeListResponse) {}
  rpc GetUserChallenges(UserChallengesRequest) returns (ChallengeListResponse) {}
  rpc PushSubmissionStatus(PushSubmissionStatusRequest) returns (PushSubmissionStatusResponse) {}
}
