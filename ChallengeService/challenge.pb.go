// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.6
// source: ChallengeService/challenge.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParticipantMetadata struct {
	state             protoimpl.MessageState               `protogen:"open.v1"`
	UserId            string                               `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	JoinTimeUnix      int64                                `protobuf:"varint,2,opt,name=joinTimeUnix,proto3" json:"joinTimeUnix,omitempty"`
	ProblemsDone      map[string]*ChallengeProblemMetadata `protobuf:"bytes,3,rep,name=problemsDone,proto3" json:"problemsDone,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ProblemsAttempted int32                                `protobuf:"varint,4,opt,name=problemsAttempted,proto3" json:"problemsAttempted,omitempty"`
	TotalScore        int32                                `protobuf:"varint,5,opt,name=totalScore,proto3" json:"totalScore,omitempty"`
	LastConnectedUnix int64                                `protobuf:"varint,6,opt,name=lastConnectedUnix,proto3" json:"lastConnectedUnix,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ParticipantMetadata) Reset() {
	*x = ParticipantMetadata{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantMetadata) ProtoMessage() {}

func (x *ParticipantMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantMetadata.ProtoReflect.Descriptor instead.
func (*ParticipantMetadata) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{0}
}

func (x *ParticipantMetadata) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ParticipantMetadata) GetJoinTimeUnix() int64 {
	if x != nil {
		return x.JoinTimeUnix
	}
	return 0
}

func (x *ParticipantMetadata) GetProblemsDone() map[string]*ChallengeProblemMetadata {
	if x != nil {
		return x.ProblemsDone
	}
	return nil
}

func (x *ParticipantMetadata) GetProblemsAttempted() int32 {
	if x != nil {
		return x.ProblemsAttempted
	}
	return 0
}

func (x *ParticipantMetadata) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *ParticipantMetadata) GetLastConnectedUnix() int64 {
	if x != nil {
		return x.LastConnectedUnix
	}
	return 0
}

type ChallengeProblemMetadata struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProblemId       string                 `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Score           int32                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	TimeTaken       int64                  `protobuf:"varint,3,opt,name=timeTaken,proto3" json:"timeTaken,omitempty"`
	CompletedAtUnix int64                  `protobuf:"varint,4,opt,name=completedAtUnix,proto3" json:"completedAtUnix,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ChallengeProblemMetadata) Reset() {
	*x = ChallengeProblemMetadata{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeProblemMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeProblemMetadata) ProtoMessage() {}

func (x *ChallengeProblemMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeProblemMetadata.ProtoReflect.Descriptor instead.
func (*ChallengeProblemMetadata) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{1}
}

func (x *ChallengeProblemMetadata) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ChallengeProblemMetadata) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ChallengeProblemMetadata) GetTimeTaken() int64 {
	if x != nil {
		return x.TimeTaken
	}
	return 0
}

func (x *ChallengeProblemMetadata) GetCompletedAtUnix() int64 {
	if x != nil {
		return x.CompletedAtUnix
	}
	return 0
}

type Submission struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SubmissionId    string                 `protobuf:"bytes,1,opt,name=submissionId,proto3" json:"submissionId,omitempty"`
	TimeTakenMillis int64                  `protobuf:"varint,2,opt,name=timeTakenMillis,proto3" json:"timeTakenMillis,omitempty"`
	Points          int32                  `protobuf:"varint,3,opt,name=points,proto3" json:"points,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Submission) Reset() {
	*x = Submission{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{2}
}

func (x *Submission) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *Submission) GetTimeTakenMillis() int64 {
	if x != nil {
		return x.TimeTakenMillis
	}
	return 0
}

func (x *Submission) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type LeaderboardEntry struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserId            string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ProblemsCompleted int32                  `protobuf:"varint,2,opt,name=problemsCompleted,proto3" json:"problemsCompleted,omitempty"`
	TotalScore        int32                  `protobuf:"varint,3,opt,name=totalScore,proto3" json:"totalScore,omitempty"`
	Rank              int32                  `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LeaderboardEntry) Reset() {
	*x = LeaderboardEntry{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardEntry) ProtoMessage() {}

func (x *LeaderboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardEntry.ProtoReflect.Descriptor instead.
func (*LeaderboardEntry) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{3}
}

func (x *LeaderboardEntry) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LeaderboardEntry) GetProblemsCompleted() int32 {
	if x != nil {
		return x.ProblemsCompleted
	}
	return 0
}

func (x *LeaderboardEntry) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *LeaderboardEntry) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type QuestionPool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionIds   []string               `protobuf:"bytes,1,rep,name=questionIds,proto3" json:"questionIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionPool) Reset() {
	*x = QuestionPool{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionPool) ProtoMessage() {}

func (x *QuestionPool) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionPool.ProtoReflect.Descriptor instead.
func (*QuestionPool) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{4}
}

func (x *QuestionPool) GetQuestionIds() []string {
	if x != nil {
		return x.QuestionIds
	}
	return nil
}

type ChallengeConfig struct {
	state              protoimpl.MessageState   `protogen:"open.v1"`
	MaxUsers           int32                    `protobuf:"varint,1,opt,name=maxUsers,proto3" json:"maxUsers,omitempty"`
	MaxEasyQuestions   int32                    `protobuf:"varint,2,opt,name=maxEasyQuestions,proto3" json:"maxEasyQuestions,omitempty"`
	MaxMediumQuestions int32                    `protobuf:"varint,3,opt,name=maxMediumQuestions,proto3" json:"maxMediumQuestions,omitempty"`
	MaxHardQuestions   int32                    `protobuf:"varint,4,opt,name=maxHardQuestions,proto3" json:"maxHardQuestions,omitempty"`
	RandomQuestionPool map[string]*QuestionPool `protobuf:"bytes,5,rep,name=randomQuestionPool,proto3" json:"randomQuestionPool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	InitialQuestions   map[string]*QuestionPool `protobuf:"bytes,6,rep,name=initialQuestions,proto3" json:"initialQuestions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChallengeConfig) Reset() {
	*x = ChallengeConfig{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeConfig) ProtoMessage() {}

func (x *ChallengeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeConfig.ProtoReflect.Descriptor instead.
func (*ChallengeConfig) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{5}
}

func (x *ChallengeConfig) GetMaxUsers() int32 {
	if x != nil {
		return x.MaxUsers
	}
	return 0
}

func (x *ChallengeConfig) GetMaxEasyQuestions() int32 {
	if x != nil {
		return x.MaxEasyQuestions
	}
	return 0
}

func (x *ChallengeConfig) GetMaxMediumQuestions() int32 {
	if x != nil {
		return x.MaxMediumQuestions
	}
	return 0
}

func (x *ChallengeConfig) GetMaxHardQuestions() int32 {
	if x != nil {
		return x.MaxHardQuestions
	}
	return 0
}

func (x *ChallengeConfig) GetRandomQuestionPool() map[string]*QuestionPool {
	if x != nil {
		return x.RandomQuestionPool
	}
	return nil
}

func (x *ChallengeConfig) GetInitialQuestions() map[string]*QuestionPool {
	if x != nil {
		return x.InitialQuestions
	}
	return nil
}

type ChallengeRecord struct {
	state           protoimpl.MessageState          `protogen:"open.v1"`
	ChallengeId     string                          `protobuf:"bytes,1,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
	CreatorId       string                          `protobuf:"bytes,2,opt,name=creatorId,proto3" json:"creatorId,omitempty"`
	Title           string                          `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	IsPrivate       bool                            `protobuf:"varint,4,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"`
	Password        string                          `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Status          string                          `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	ProblemIds      []string                        `protobuf:"bytes,7,rep,name=problemIds,proto3" json:"problemIds,omitempty"`
	TimeLimitMillis int64                           `protobuf:"varint,8,opt,name=timeLimitMillis,proto3" json:"timeLimitMillis,omitempty"`
	StartTimeUnix   int64                           `protobuf:"varint,9,opt,name=startTimeUnix,proto3" json:"startTimeUnix,omitempty"`
	Participants    map[string]*ParticipantMetadata `protobuf:"bytes,10,rep,name=participants,proto3" json:"participants,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Submissions     map[string]*Submission          `protobuf:"bytes,11,rep,name=submissions,proto3" json:"submissions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Leaderboard     []*LeaderboardEntry             `protobuf:"bytes,12,rep,name=leaderboard,proto3" json:"leaderboard,omitempty"`
	Config          *ChallengeConfig                `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ChallengeRecord) Reset() {
	*x = ChallengeRecord{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeRecord) ProtoMessage() {}

func (x *ChallengeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeRecord.ProtoReflect.Descriptor instead.
func (*ChallengeRecord) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{6}
}

func (x *ChallengeRecord) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *ChallengeRecord) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *ChallengeRecord) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChallengeRecord) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ChallengeRecord) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ChallengeRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChallengeRecord) GetProblemIds() []string {
	if x != nil {
		return x.ProblemIds
	}
	return nil
}

func (x *ChallengeRecord) GetTimeLimitMillis() int64 {
	if x != nil {
		return x.TimeLimitMillis
	}
	return 0
}

func (x *ChallengeRecord) GetStartTimeUnix() int64 {
	if x != nil {
		return x.StartTimeUnix
	}
	return 0
}

func (x *ChallengeRecord) GetParticipants() map[string]*ParticipantMetadata {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ChallengeRecord) GetSubmissions() map[string]*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *ChallengeRecord) GetLeaderboard() []*LeaderboardEntry {
	if x != nil {
		return x.Leaderboard
	}
	return nil
}

func (x *ChallengeRecord) GetConfig() *ChallengeConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type PaginationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{7}
}

func (x *PaginationRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ChallengeListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Challenges    []*ChallengeRecord     `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
	TotalCount    int64                  `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChallengeListResponse) Reset() {
	*x = ChallengeListResponse{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeListResponse) ProtoMessage() {}

func (x *ChallengeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeListResponse.ProtoReflect.Descriptor instead.
func (*ChallengeListResponse) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{8}
}

func (x *ChallengeListResponse) GetChallenges() []*ChallengeRecord {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *ChallengeListResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type PrivateChallengesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Pagination    *PaginationRequest     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrivateChallengesRequest) Reset() {
	*x = PrivateChallengesRequest{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateChallengesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateChallengesRequest) ProtoMessage() {}

func (x *PrivateChallengesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateChallengesRequest.ProtoReflect.Descriptor instead.
func (*PrivateChallengesRequest) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{9}
}

func (x *PrivateChallengesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PrivateChallengesRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UserChallengesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Pagination    *PaginationRequest     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChallengesRequest) Reset() {
	*x = UserChallengesRequest{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChallengesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChallengesRequest) ProtoMessage() {}

func (x *UserChallengesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChallengesRequest.ProtoReflect.Descriptor instead.
func (*UserChallengesRequest) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{10}
}

func (x *UserChallengesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserChallengesRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type PushSubmissionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserCode      string                 `protobuf:"bytes,1,opt,name=userCode,proto3" json:"userCode,omitempty"`
	ChallengeId   string                 `protobuf:"bytes,2,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	ProblemId     string                 `protobuf:"bytes,4,opt,name=problemId,proto3" json:"problemId,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	SubmissionId  string                 `protobuf:"bytes,6,opt,name=submissionId,proto3" json:"submissionId,omitempty"`
	TraceId       string                 `protobuf:"bytes,7,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushSubmissionStatusRequest) Reset() {
	*x = PushSubmissionStatusRequest{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushSubmissionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushSubmissionStatusRequest) ProtoMessage() {}

func (x *PushSubmissionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushSubmissionStatusRequest.ProtoReflect.Descriptor instead.
func (*PushSubmissionStatusRequest) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{11}
}

func (x *PushSubmissionStatusRequest) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *PushSubmissionStatusRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *PushSubmissionStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PushSubmissionStatusRequest) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *PushSubmissionStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PushSubmissionStatusRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *PushSubmissionStatusRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type PushSubmissionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushSubmissionStatusResponse) Reset() {
	*x = PushSubmissionStatusResponse{}
	mi := &file_ChallengeService_challenge_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushSubmissionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushSubmissionStatusResponse) ProtoMessage() {}

func (x *PushSubmissionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ChallengeService_challenge_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushSubmissionStatusResponse.ProtoReflect.Descriptor instead.
func (*PushSubmissionStatusResponse) Descriptor() ([]byte, []int) {
	return file_ChallengeService_challenge_proto_rawDescGZIP(), []int{12}
}

func (x *PushSubmissionStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PushSubmissionStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_ChallengeService_challenge_proto protoreflect.FileDescriptor

const file_ChallengeService_challenge_proto_rawDesc = "" +
	"\n" +
	" ChallengeService/challenge.proto\x12\tchallenge\"\x89\x03\n" +
	"\x13ParticipantMetadata\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\"\n" +
	"\fjoinTimeUnix\x18\x02 \x01(\x03R\fjoinTimeUnix\x12T\n" +
	"\fproblemsDone\x18\x03 \x03(\v20.challenge.ParticipantMetadata.ProblemsDoneEntryR\fproblemsDone\x12,\n" +
	"\x11problemsAttempted\x18\x04 \x01(\x05R\x11problemsAttempted\x12\x1e\n" +
	"\n" +
	"totalScore\x18\x05 \x01(\x05R\n" +
	"totalScore\x12,\n" +
	"\x11lastConnectedUnix\x18\x06 \x01(\x03R\x11lastConnectedUnix\x1ad\n" +
	"\x11ProblemsDoneEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x129\n" +
	"\x05value\x18\x02 \x01(\v2#.challenge.ChallengeProblemMetadataR\x05value:\x028\x01\"\x96\x01\n" +
	"\x18ChallengeProblemMetadata\x12\x1c\n" +
	"\tproblemId\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x05R\x05score\x12\x1c\n" +
	"\ttimeTaken\x18\x03 \x01(\x03R\ttimeTaken\x12(\n" +
	"\x0fcompletedAtUnix\x18\x04 \x01(\x03R\x0fcompletedAtUnix\"r\n" +
	"\n" +
	"Submission\x12\"\n" +
	"\fsubmissionId\x18\x01 \x01(\tR\fsubmissionId\x12(\n" +
	"\x0ftimeTakenMillis\x18\x02 \x01(\x03R\x0ftimeTakenMillis\x12\x16\n" +
	"\x06points\x18\x03 \x01(\x05R\x06points\"\x8c\x01\n" +
	"\x10LeaderboardEntry\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12,\n" +
	"\x11problemsCompleted\x18\x02 \x01(\x05R\x11problemsCompleted\x12\x1e\n" +
	"\n" +
	"totalScore\x18\x03 \x01(\x05R\n" +
	"totalScore\x12\x12\n" +
	"\x04rank\x18\x04 \x01(\x05R\x04rank\"0\n" +
	"\fQuestionPool\x12 \n" +
	"\vquestionIds\x18\x01 \x03(\tR\vquestionIds\"\xb5\x04\n" +
	"\x0fChallengeConfig\x12\x1a\n" +
	"\bmaxUsers\x18\x01 \x01(\x05R\bmaxUsers\x12*\n" +
	"\x10maxEasyQuestions\x18\x02 \x01(\x05R\x10maxEasyQuestions\x12.\n" +
	"\x12maxMediumQuestions\x18\x03 \x01(\x05R\x12maxMediumQuestions\x12*\n" +
	"\x10maxHardQuestions\x18\x04 \x01(\x05R\x10maxHardQuestions\x12b\n" +
	"\x12randomQuestionPool\x18\x05 \x03(\v22.challenge.ChallengeConfig.RandomQuestionPoolEntryR\x12randomQuestionPool\x12\\\n" +
	"\x10initialQuestions\x18\x06 \x03(\v20.challenge.ChallengeConfig.InitialQuestionsEntryR\x10initialQuestions\x1a^\n" +
	"\x17RandomQuestionPoolEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.challenge.QuestionPoolR\x05value:\x028\x01\x1a\\\n" +
	"\x15InitialQuestionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.challenge.QuestionPoolR\x05value:\x028\x01\"\xf5\x05\n" +
	"\x0fChallengeRecord\x12 \n" +
	"\vchallengeId\x18\x01 \x01(\tR\vchallengeId\x12\x1c\n" +
	"\tcreatorId\x18\x02 \x01(\tR\tcreatorId\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12\x1c\n" +
	"\tisPrivate\x18\x04 \x01(\bR\tisPrivate\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12\x16\n" +
	"\x06status\x18\x06 \x01(\tR\x06status\x12\x1e\n" +
	"\n" +
	"problemIds\x18\a \x03(\tR\n" +
	"problemIds\x12(\n" +
	"\x0ftimeLimitMillis\x18\b \x01(\x03R\x0ftimeLimitMillis\x12$\n" +
	"\rstartTimeUnix\x18\t \x01(\x03R\rstartTimeUnix\x12P\n" +
	"\fparticipants\x18\n" +
	" \x03(\v2,.challenge.ChallengeRecord.ParticipantsEntryR\fparticipants\x12M\n" +
	"\vsubmissions\x18\v \x03(\v2+.challenge.ChallengeRecord.SubmissionsEntryR\vsubmissions\x12=\n" +
	"\vleaderboard\x18\f \x03(\v2\x1b.challenge.LeaderboardEntryR\vleaderboard\x122\n" +
	"\x06config\x18\r \x01(\v2\x1a.challenge.ChallengeConfigR\x06config\x1a_\n" +
	"\x11ParticipantsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.challenge.ParticipantMetadataR\x05value:\x028\x01\x1aU\n" +
	"\x10SubmissionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.challenge.SubmissionR\x05value:\x028\x01\"C\n" +
	"\x11PaginationRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1a\n" +
	"\bpageSize\x18\x02 \x01(\x05R\bpageSize\"s\n" +
	"\x15ChallengeListResponse\x12:\n" +
	"\n" +
	"challenges\x18\x01 \x03(\v2\x1a.challenge.ChallengeRecordR\n" +
	"challenges\x12\x1e\n" +
	"\n" +
	"totalCount\x18\x02 \x01(\x03R\n" +
	"totalCount\"p\n" +
	"\x18PrivateChallengesRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12<\n" +
	"\n" +
	"pagination\x18\x02 \x01(\v2\x1c.challenge.PaginationRequestR\n" +
	"pagination\"m\n" +
	"\x15UserChallengesRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12<\n" +
	"\n" +
	"pagination\x18\x02 \x01(\v2\x1c.challenge.PaginationRequestR\n" +
	"pagination\"\xe7\x01\n" +
	"\x1bPushSubmissionStatusRequest\x12\x1a\n" +
	"\buserCode\x18\x01 \x01(\tR\buserCode\x12 \n" +
	"\vchallengeId\x18\x02 \x01(\tR\vchallengeId\x12\x16\n" +
	"\x06userId\x18\x03 \x01(\tR\x06userId\x12\x1c\n" +
	"\tproblemId\x18\x04 \x01(\tR\tproblemId\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12\"\n" +
	"\fsubmissionId\x18\x06 \x01(\tR\fsubmissionId\x12\x18\n" +
	"\atraceId\x18\a \x01(\tR\atraceId\"R\n" +
	"\x1cPushSubmissionStatusResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess2\xbe\x04\n" +
	"\x10ChallengeService\x12K\n" +
	"\x0fCreateChallenge\x12\x1a.challenge.ChallengeRecord\x1a\x1a.challenge.ChallengeRecord\"\x00\x12W\n" +
	"\x13GetPublicChallenges\x12\x1c.challenge.PaginationRequest\x1a .challenge.ChallengeListResponse\"\x00\x12e\n" +
	"\x1aGetPrivateChallengesOfUser\x12#.challenge.PrivateChallengesRequest\x1a .challenge.ChallengeListResponse\"\x00\x12W\n" +
	"\x13GetActiveChallenges\x12\x1c.challenge.PaginationRequest\x1a .challenge.ChallengeListResponse\"\x00\x12Y\n" +
	"\x11GetUserChallenges\x12 .challenge.UserChallengesRequest\x1a .challenge.ChallengeListResponse\"\x00\x12i\n" +
	"\x14PushSubmissionStatus\x12&.challenge.PushSubmissionStatusRequest\x1a'.challenge.PushSubmissionStatusResponse\"\x00B=Z;github.com/lijuuu/ChallengeWssManagerService/internal/protob\x06proto3"

var (
	file_ChallengeService_challenge_proto_rawDescOnce sync.Once
	file_ChallengeService_challenge_proto_rawDescData []byte
)

func file_ChallengeService_challenge_proto_rawDescGZIP() []byte {
	file_ChallengeService_challenge_proto_rawDescOnce.Do(func() {
		file_ChallengeService_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ChallengeService_challenge_proto_rawDesc), len(file_ChallengeService_challenge_proto_rawDesc)))
	})
	return file_ChallengeService_challenge_proto_rawDescData
}

var file_ChallengeService_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_ChallengeService_challenge_proto_goTypes = []any{
	(*ParticipantMetadata)(nil),          // 0: challenge.ParticipantMetadata
	(*ChallengeProblemMetadata)(nil),     // 1: challenge.ChallengeProblemMetadata
	(*Submission)(nil),                   // 2: challenge.Submission
	(*LeaderboardEntry)(nil),             // 3: challenge.LeaderboardEntry
	(*QuestionPool)(nil),                 // 4: challenge.QuestionPool
	(*ChallengeConfig)(nil),              // 5: challenge.ChallengeConfig
	(*ChallengeRecord)(nil),              // 6: challenge.ChallengeRecord
	(*PaginationRequest)(nil),            // 7: challenge.PaginationRequest
	(*ChallengeListResponse)(nil),        // 8: challenge.ChallengeListResponse
	(*PrivateChallengesRequest)(nil),     // 9: challenge.PrivateChallengesRequest
	(*UserChallengesRequest)(nil),        // 10: challenge.UserChallengesRequest
	(*PushSubmissionStatusRequest)(nil),  // 11: challenge.PushSubmissionStatusRequest
	(*PushSubmissionStatusResponse)(nil), // 12: challenge.PushSubmissionStatusResponse
	nil,                                  // 13: challenge.ParticipantMetadata.ProblemsDoneEntry
	nil,                                  // 14: challenge.ChallengeConfig.RandomQuestionPoolEntry
	nil,                                  // 15: challenge.ChallengeConfig.InitialQuestionsEntry
	nil,                                  // 16: challenge.ChallengeRecord.ParticipantsEntry
	nil,                                  // 17: challenge.ChallengeRecord.SubmissionsEntry
}
var file_ChallengeService_challenge_proto_depIdxs = []int32{
	13, // 0: challenge.ParticipantMetadata.problemsDone:type_name -> challenge.ParticipantMetadata.ProblemsDoneEntry
	14, // 1: challenge.ChallengeConfig.randomQuestionPool:type_name -> challenge.ChallengeConfig.RandomQuestionPoolEntry
	15, // 2: challenge.ChallengeConfig.initialQuestions:type_name -> challenge.ChallengeConfig.InitialQuestionsEntry
	16, // 3: challenge.ChallengeRecord.participants:type_name -> challenge.ChallengeRecord.ParticipantsEntry
	17, // 4: challenge.ChallengeRecord.submissions:type_name -> challenge.ChallengeRecord.SubmissionsEntry
	3,  // 5: challenge.ChallengeRecord.leaderboard:type_name -> challenge.LeaderboardEntry
	5,  // 6: challenge.ChallengeRecord.config:type_name -> challenge.ChallengeConfig
	6,  // 7: challenge.ChallengeListResponse.challenges:type_name -> challenge.ChallengeRecord
	7,  // 8: challenge.PrivateChallengesRequest.pagination:type_name -> challenge.PaginationRequest
	7,  // 9: challenge.UserChallengesRequest.pagination:type_name -> challenge.PaginationRequest
	1,  // 10: challenge.ParticipantMetadata.ProblemsDoneEntry.value:type_name -> challenge.ChallengeProblemMetadata
	4,  // 11: challenge.ChallengeConfig.RandomQuestionPoolEntry.value:type_name -> challenge.QuestionPool
	4,  // 12: challenge.ChallengeConfig.InitialQuestionsEntry.value:type_name -> challenge.QuestionPool
	0,  // 13: challenge.ChallengeRecord.ParticipantsEntry.value:type_name -> challenge.ParticipantMetadata
	2,  // 14: challenge.ChallengeRecord.SubmissionsEntry.value:type_name -> challenge.Submission
	6,  // 15: challenge.ChallengeService.CreateChallenge:input_type -> challenge.ChallengeRecord
	7,  // 16: challenge.ChallengeService.GetPublicChallenges:input_type -> challenge.PaginationRequest
	9,  // 17: challenge.ChallengeService.GetPrivateChallengesOfUser:input_type -> challenge.PrivateChallengesRequest
	7,  // 18: challenge.ChallengeService.GetActiveChallenges:input_type -> challenge.PaginationRequest
	10, // 19: challenge.ChallengeService.GetUserChallenges:input_type -> challenge.UserChallengesRequest
	11, // 20: challenge.ChallengeService.PushSubmissionStatus:input_type -> challenge.PushSubmissionStatusRequest
	6,  // 21: challenge.ChallengeService.CreateChallenge:output_type -> challenge.ChallengeRecord
	8,  // 22: challenge.ChallengeService.GetPublicChallenges:output_type -> challenge.ChallengeListResponse
	8,  // 23: challenge.ChallengeService.GetPrivateChallengesOfUser:output_type -> challenge.ChallengeListResponse
	8,  // 24: challenge.ChallengeService.GetActiveChallenges:output_type -> challenge.ChallengeListResponse
	8,  // 25: challenge.ChallengeService.GetUserChallenges:output_type -> challenge.ChallengeListResponse
	12, // 26: challenge.ChallengeService.PushSubmissionStatus:output_type -> challenge.PushSubmissionStatusResponse
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_ChallengeService_challenge_proto_init() }
func file_ChallengeService_challenge_proto_init() {
	if File_ChallengeService_challenge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ChallengeService_challenge_proto_rawDesc), len(file_ChallengeService_challenge_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ChallengeService_challenge_proto_goTypes,
		DependencyIndexes: file_ChallengeService_challenge_proto_depIdxs,
		MessageInfos:      file_ChallengeService_challenge_proto_msgTypes,
	}.Build()
	File_ChallengeService_challenge_proto = out.File
	file_ChallengeService_challenge_proto_goTypes = nil
	file_ChallengeService_challenge_proto_depIdxs = nil
}
